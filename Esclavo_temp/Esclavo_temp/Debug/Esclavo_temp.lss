
Esclavo_temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000614  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000614  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 000000a8  00000000  00000000  00000643  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000006eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015c0  00000000  00000000  0000079b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b3  00000000  00000000  00001d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000083c  00000000  00000000  0000270e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00002f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000258  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e2  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000039d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000572  00000572  00000606  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.oneWireInit 0000003e  000004a2  000004a2  00000536  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.oneWireWrite 00000046  00000418  00000418  000004ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.oneWireRead 00000052  000003c6  000003c6  0000045a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.readTemperature 00000066  000002aa  000002aa  0000033e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.I2C_SETTING_SLAVE 00000016  00000502  00000502  00000596  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.main    00000058  0000036e  0000036e  00000402  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_24 0000009a  00000196  00000196  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .bss.bufferI2C 00000001  00800101  00800101  00000614  2**0
                  ALLOC
 23 .text         0000005e  00000310  00000310  000003a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text         0000007a  00000230  00000230  000002c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text         00000044  0000045e  0000045e  000004f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text         0000000e  0000052e  0000052e  000005c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text         00000008  00000564  00000564  000005f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text         000000d4  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text         0000000c  00000558  00000558  000005ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text         00000006  0000056c  0000056c  00000600  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text         0000000e  0000053c  0000053c  000005d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text         0000000e  0000054a  0000054a  000005de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text         00000022  000004e0  000004e0  00000574  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__dummy_fini 00000002  0000057a  0000057a  0000060e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_funcs_on_exit 00000002  0000057c  0000057c  00000610  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__dummy_simulator_exit 00000002  0000057e  0000057e  00000612  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.exit    00000016  00000518  00000518  000005ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text._Exit   00000004  00000576  00000576  0000060a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
   8:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
   c:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  10:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  14:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  18:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  1c:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  20:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  24:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  28:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  2c:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  30:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  34:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  38:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  3c:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  40:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  44:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  48:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  4c:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  50:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  54:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  58:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  5c:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>
  60:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_24>
  64:	0c 94 b9 02 	jmp	0x572	; 0x572 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 02       	muls	r16, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
  ba:	0c 94 8c 02 	jmp	0x518	; 0x518 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000572 <__bad_interrupt>:
 572:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.oneWireInit:

000004a2 <oneWireInit>:
// Definiciones para el DS18B20
#define DS18B20_PIN  PB0  // Define el pin al que está conectado el DS18B20

// Funciones para el DS18B20
void oneWireInit(void) {
	DDRB |= (1 << DS18B20_PIN);  // Configura el pin como salida
 4a2:	84 b1       	in	r24, 0x04	; 4
 4a4:	81 60       	ori	r24, 0x01	; 1
 4a6:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << DS18B20_PIN); // Envía un pulso bajo
 4a8:	85 b1       	in	r24, 0x05	; 5
 4aa:	8e 7f       	andi	r24, 0xFE	; 254
 4ac:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ae:	8f e7       	ldi	r24, 0x7F	; 127
 4b0:	97 e0       	ldi	r25, 0x07	; 7
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <oneWireInit+0x10>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <oneWireInit+0x16>
 4b8:	00 00       	nop
	_delay_us(480);  // Espera 480us
	PORTB |= (1 << DS18B20_PIN);  // Envía un pulso alto
 4ba:	85 b1       	in	r24, 0x05	; 5
 4bc:	81 60       	ori	r24, 0x01	; 1
 4be:	85 b9       	out	0x05, r24	; 5
 4c0:	87 e1       	ldi	r24, 0x17	; 23
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <oneWireInit+0x22>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <oneWireInit+0x28>
 4ca:	00 00       	nop
	_delay_us(70);   // Espera 70us
	DDRB &= ~(1 << DS18B20_PIN); // Configura el pin como entrada
 4cc:	84 b1       	in	r24, 0x04	; 4
 4ce:	8e 7f       	andi	r24, 0xFE	; 254
 4d0:	84 b9       	out	0x04, r24	; 4
 4d2:	87 e6       	ldi	r24, 0x67	; 103
 4d4:	96 e0       	ldi	r25, 0x06	; 6
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <oneWireInit+0x34>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <oneWireInit+0x3a>
 4dc:	00 00       	nop
 4de:	08 95       	ret

Disassembly of section .text.oneWireWrite:

00000418 <oneWireWrite>:
	_delay_us(410);  // Espera 410us para la respuesta del sensor
}

void oneWireWrite(uint8_t data) {
	for (uint8_t i = 0; i < 8; i++) {
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	1e c0       	rjmp	.+60     	; 0x458 <oneWireWrite+0x40>
		DDRB |= (1 << DS18B20_PIN);  // Configura el pin como salida
 41c:	94 b1       	in	r25, 0x04	; 4
 41e:	91 60       	ori	r25, 0x01	; 1
 420:	94 b9       	out	0x04, r25	; 4
		PORTB &= ~(1 << DS18B20_PIN); // Envía un pulso bajo
 422:	95 b1       	in	r25, 0x05	; 5
 424:	9e 7f       	andi	r25, 0xFE	; 254
 426:	95 b9       	out	0x05, r25	; 5
 428:	9a e0       	ldi	r25, 0x0A	; 10
 42a:	9a 95       	dec	r25
 42c:	f1 f7       	brne	.-4      	; 0x42a <oneWireWrite+0x12>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <oneWireWrite+0x18>
		_delay_us(2);  // Espera 2us
		if (data & 0x01) {
 430:	80 ff       	sbrs	r24, 0
 432:	03 c0       	rjmp	.+6      	; 0x43a <oneWireWrite+0x22>
			PORTB |= (1 << DS18B20_PIN); // Envía un pulso alto
 434:	95 b1       	in	r25, 0x05	; 5
 436:	91 60       	ori	r25, 0x01	; 1
 438:	95 b9       	out	0x05, r25	; 5
 43a:	ef ee       	ldi	r30, 0xEF	; 239
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	31 97       	sbiw	r30, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <oneWireWrite+0x26>
 442:	00 c0       	rjmp	.+0      	; 0x444 <oneWireWrite+0x2c>
 444:	00 00       	nop
		}
		_delay_us(60);  // Espera 60us
		PORTB |= (1 << DS18B20_PIN);  // Termina el pulso
 446:	95 b1       	in	r25, 0x05	; 5
 448:	91 60       	ori	r25, 0x01	; 1
 44a:	95 b9       	out	0x05, r25	; 5
 44c:	fa e0       	ldi	r31, 0x0A	; 10
 44e:	fa 95       	dec	r31
 450:	f1 f7       	brne	.-4      	; 0x44e <oneWireWrite+0x36>
 452:	00 c0       	rjmp	.+0      	; 0x454 <oneWireWrite+0x3c>
		_delay_us(2);   // Espera 2us
		data >>= 1;    // Desplaza el bit
 454:	86 95       	lsr	r24
	DDRB &= ~(1 << DS18B20_PIN); // Configura el pin como entrada
	_delay_us(410);  // Espera 410us para la respuesta del sensor
}

void oneWireWrite(uint8_t data) {
	for (uint8_t i = 0; i < 8; i++) {
 456:	2f 5f       	subi	r18, 0xFF	; 255
 458:	28 30       	cpi	r18, 0x08	; 8
 45a:	00 f3       	brcs	.-64     	; 0x41c <oneWireWrite+0x4>
		_delay_us(60);  // Espera 60us
		PORTB |= (1 << DS18B20_PIN);  // Termina el pulso
		_delay_us(2);   // Espera 2us
		data >>= 1;    // Desplaza el bit
	}
}
 45c:	08 95       	ret

Disassembly of section .text.oneWireRead:

000003c6 <oneWireRead>:

uint8_t oneWireRead(void) {
	uint8_t data = 0;
	for (uint8_t i = 0; i < 8; i++) {
 3c6:	20 e0       	ldi	r18, 0x00	; 0
		data >>= 1;    // Desplaza el bit
	}
}

uint8_t oneWireRead(void) {
	uint8_t data = 0;
 3c8:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
 3ca:	23 c0       	rjmp	.+70     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		DDRB |= (1 << DS18B20_PIN);  // Configura el pin como salida
 3cc:	94 b1       	in	r25, 0x04	; 4
 3ce:	91 60       	ori	r25, 0x01	; 1
 3d0:	94 b9       	out	0x04, r25	; 4
		PORTB &= ~(1 << DS18B20_PIN); // Envía un pulso bajo
 3d2:	95 b1       	in	r25, 0x05	; 5
 3d4:	9e 7f       	andi	r25, 0xFE	; 254
 3d6:	95 b9       	out	0x05, r25	; 5
 3d8:	9a e0       	ldi	r25, 0x0A	; 10
 3da:	9a 95       	dec	r25
 3dc:	f1 f7       	brne	.-4      	; 0x3da <oneWireRead+0x14>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <oneWireRead+0x1a>
		_delay_us(2);  // Espera 2us
		DDRB &= ~(1 << DS18B20_PIN); // Configura el pin como entrada
 3e0:	94 b1       	in	r25, 0x04	; 4
 3e2:	9e 7f       	andi	r25, 0xFE	; 254
 3e4:	94 b9       	out	0x04, r25	; 4
 3e6:	e5 e3       	ldi	r30, 0x35	; 53
 3e8:	ea 95       	dec	r30
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <oneWireRead+0x22>
 3ec:	00 00       	nop
		_delay_us(10);  // Espera 10us para leer el bit
		if (PINB & (1 << DS18B20_PIN)) {
 3ee:	18 9b       	sbis	0x03, 0	; 3
 3f0:	09 c0       	rjmp	.+18     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
			data |= (1 << i); // Lee el bit
 3f2:	41 e0       	ldi	r20, 0x01	; 1
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	02 2e       	mov	r0, r18
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <oneWireRead+0x38>
 3fa:	44 0f       	add	r20, r20
 3fc:	55 1f       	adc	r21, r21
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <oneWireRead+0x34>
 402:	84 2b       	or	r24, r20
 404:	eb ed       	ldi	r30, 0xDB	; 219
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	31 97       	sbiw	r30, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
	}
}

uint8_t oneWireRead(void) {
	uint8_t data = 0;
	for (uint8_t i = 0; i < 8; i++) {
 410:	2f 5f       	subi	r18, 0xFF	; 255
 412:	28 30       	cpi	r18, 0x08	; 8
 414:	d8 f2       	brcs	.-74     	; 0x3cc <oneWireRead+0x6>
			data |= (1 << i); // Lee el bit
		}
		_delay_us(55);  // Espera 55us
	}
	return data;
}
 416:	08 95       	ret

Disassembly of section .text.readTemperature:

000002aa <readTemperature>:

uint8_t readTemperature(void) {
 2aa:	cf 93       	push	r28
	 uint16_t temperatureRaw;
	 uint8_t temperatureCelsius;

	
	// Inicialización y lectura de la temperatura
	oneWireInit();
 2ac:	0e 94 51 02 	call	0x4a2	; 0x4a2 <oneWireInit>
	oneWireWrite(0xCC); // Skip ROM command
 2b0:	8c ec       	ldi	r24, 0xCC	; 204
 2b2:	0e 94 0c 02 	call	0x418	; 0x418 <oneWireWrite>
	oneWireWrite(0x44); // Convert T command
 2b6:	84 e4       	ldi	r24, 0x44	; 68
 2b8:	0e 94 0c 02 	call	0x418	; 0x418 <oneWireWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2bc:	2f ef       	ldi	r18, 0xFF	; 255
 2be:	8e e9       	ldi	r24, 0x9E	; 158
 2c0:	94 e2       	ldi	r25, 0x24	; 36
 2c2:	21 50       	subi	r18, 0x01	; 1
 2c4:	80 40       	sbci	r24, 0x00	; 0
 2c6:	90 40       	sbci	r25, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <readTemperature+0x18>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <readTemperature+0x22>
 2cc:	00 00       	nop
	_delay_ms(750);     // Espera a que el sensor convierta la temperatura
	
	oneWireInit();
 2ce:	0e 94 51 02 	call	0x4a2	; 0x4a2 <oneWireInit>
	oneWireWrite(0xCC); // Skip ROM command
 2d2:	8c ec       	ldi	r24, 0xCC	; 204
 2d4:	0e 94 0c 02 	call	0x418	; 0x418 <oneWireWrite>
	oneWireWrite(0xBE); // Read Scratchpad command
 2d8:	8e eb       	ldi	r24, 0xBE	; 190
 2da:	0e 94 0c 02 	call	0x418	; 0x418 <oneWireWrite>
	
	uint8_t tempL = oneWireRead();
 2de:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <oneWireRead>
 2e2:	c8 2f       	mov	r28, r24
	uint8_t tempH = oneWireRead();
 2e4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <oneWireRead>
	
	temperatureRaw = (tempH << 8) | tempL; // Combina los bytes de temperatura
 2e8:	68 2f       	mov	r22, r24
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	76 2f       	mov	r23, r22
 2ee:	66 27       	eor	r22, r22
 2f0:	6c 2b       	or	r22, r28

	 // Conversión a grados Celsius. El valor del DS18B20 es en unidades de 1/16 de grado.
	 temperatureCelsius = temperatureRaw * 0.0625;  // Ahora es un float en °C
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 18 01 	call	0x230	; 0x230 <__floatunsisf>
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	40 e8       	ldi	r20, 0x80	; 128
 300:	5d e3       	ldi	r21, 0x3D	; 61
 302:	0e 94 b2 02 	call	0x564	; 0x564 <__mulsf3>
 306:	0e 94 88 01 	call	0x310	; 0x310 <__fixunssfsi>
 30a:	86 2f       	mov	r24, r22
	 if (temperatureScaled > 255) {
		 temperatureScaled = 255;  // Limitar a 255 si excede
	 }
*/
	 return temperatureCelsius;  // Devuelve la temperatura escalada
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

Disassembly of section .text.I2C_SETTING_SLAVE:

00000502 <I2C_SETTING_SLAVE>:
	
	TWCR = 1 << TWEN;   //Habilita la interfaz
}

void I2C_SETTING_SLAVE(uint8_t address){
	DDRC &= ~((1<<DDC4) | (1<<DDC5));
 502:	97 b1       	in	r25, 0x07	; 7
 504:	9f 7c       	andi	r25, 0xCF	; 207
 506:	97 b9       	out	0x07, r25	; 7
	
	address <<= 1;  //Ubica la dirección y
 508:	88 0f       	add	r24, r24
	address |= 0x01; //habilita para reconocer las llamadas generales de I2C
 50a:	81 60       	ori	r24, 0x01	; 1
	TWAR = address;
 50c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
 510:	85 e4       	ldi	r24, 0x45	; 69
 512:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 516:	08 95       	ret

Disassembly of section .text.main:

0000036e <main>:
void uart_transmit(unsigned char data);
void uart_print(const char *str);
*/

int main(void) {
	cli();
 36e:	f8 94       	cli
	//char buffer[16];
	DDRB |= 1<< DDB4;
 370:	84 b1       	in	r24, 0x04	; 4
 372:	80 61       	ori	r24, 0x10	; 16
 374:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~1<<PORTB4;
 376:	85 b1       	in	r24, 0x05	; 5
 378:	80 7e       	andi	r24, 0xE0	; 224
 37a:	85 b9       	out	0x05, r24	; 5
	
	// Configura el pin del DS18B20
	DDRB |= (1 << DS18B20_PIN);  // Configura el pin como salida
 37c:	84 b1       	in	r24, 0x04	; 4
 37e:	81 60       	ori	r24, 0x01	; 1
 380:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << DS18B20_PIN); 
 382:	85 b1       	in	r24, 0x05	; 5
 384:	81 60       	ori	r24, 0x01	; 1
 386:	85 b9       	out	0x05, r24	; 5

	// Configura UART
	//uart_init(9600);  // Configura la UART a 9600 baudios
	I2C_SETTING_SLAVE(SlaveTemp);
 388:	80 e4       	ldi	r24, 0x40	; 64
 38a:	0e 94 81 02 	call	0x502	; 0x502 <I2C_SETTING_SLAVE>
	sei();
 38e:	78 94       	sei
	while (1) {
		
		temperatureRaw = readTemperature();
 390:	0e 94 55 01 	call	0x2aa	; 0x2aa <readTemperature>
 394:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		if (bufferI2C == 1)
 398:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_end>
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	21 f4       	brne	.+8      	; 0x3a8 <main+0x3a>
		{
			PORTB |= 1<< PORTB4;
 3a0:	85 b1       	in	r24, 0x05	; 5
 3a2:	80 61       	ori	r24, 0x10	; 16
 3a4:	85 b9       	out	0x05, r24	; 5
 3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <main+0x44>
		}
		else if (bufferI2C == 2) {
 3a8:	82 30       	cpi	r24, 0x02	; 2
 3aa:	19 f4       	brne	.+6      	; 0x3b2 <main+0x44>
			PORTB &= ~1<< PORTB4;
 3ac:	85 b1       	in	r24, 0x05	; 5
 3ae:	80 7e       	andi	r24, 0xE0	; 224
 3b0:	85 b9       	out	0x05, r24	; 5
 3b2:	2f ef       	ldi	r18, 0xFF	; 255
 3b4:	89 ef       	ldi	r24, 0xF9	; 249
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	21 50       	subi	r18, 0x01	; 1
 3ba:	80 40       	sbci	r24, 0x00	; 0
 3bc:	90 40       	sbci	r25, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0x4a>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0x54>
 3c2:	00 00       	nop
 3c4:	e5 cf       	rjmp	.-54     	; 0x390 <main+0x22>

Disassembly of section .text.__vector_24:

00000196 <__vector_24>:
	}

}

// Vector de interrupcion I2C
ISR(TWI_vect){
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	8f 93       	push	r24
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	uint8_t estado;
	estado = TWSR & 0xFC;
 1a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1aa:	8c 7f       	andi	r24, 0xFC	; 252
	switch(estado){
 1ac:	80 39       	cpi	r24, 0x90	; 144
 1ae:	c9 f0       	breq	.+50     	; 0x1e2 <__vector_24+0x4c>
 1b0:	38 f4       	brcc	.+14     	; 0x1c0 <__vector_24+0x2a>
 1b2:	80 37       	cpi	r24, 0x70	; 112
 1b4:	81 f0       	breq	.+32     	; 0x1d6 <__vector_24+0x40>
 1b6:	80 38       	cpi	r24, 0x80	; 128
 1b8:	a1 f0       	breq	.+40     	; 0x1e2 <__vector_24+0x4c>
 1ba:	80 36       	cpi	r24, 0x60	; 96
 1bc:	61 f5       	brne	.+88     	; 0x216 <__vector_24+0x80>
 1be:	0b c0       	rjmp	.+22     	; 0x1d6 <__vector_24+0x40>
 1c0:	88 3b       	cpi	r24, 0xB8	; 184
 1c2:	c9 f0       	breq	.+50     	; 0x1f6 <__vector_24+0x60>
 1c4:	18 f4       	brcc	.+6      	; 0x1cc <__vector_24+0x36>
 1c6:	88 3a       	cpi	r24, 0xA8	; 168
 1c8:	b1 f0       	breq	.+44     	; 0x1f6 <__vector_24+0x60>
 1ca:	25 c0       	rjmp	.+74     	; 0x216 <__vector_24+0x80>
 1cc:	80 3c       	cpi	r24, 0xC0	; 192
 1ce:	e9 f0       	breq	.+58     	; 0x20a <__vector_24+0x74>
 1d0:	88 3c       	cpi	r24, 0xC8	; 200
 1d2:	d9 f0       	breq	.+54     	; 0x20a <__vector_24+0x74>
 1d4:	20 c0       	rjmp	.+64     	; 0x216 <__vector_24+0x80>
		case 0x60:
		case 0x70:
		TWCR |= (1<<TWINT);
 1d6:	ec eb       	ldi	r30, 0xBC	; 188
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	80 83       	st	Z, r24
		break;
 1e0:	1f c0       	rjmp	.+62     	; 0x220 <__vector_24+0x8a>
		case 0x80:
		case 0x90:
		bufferI2C = TWDR;
 1e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1e6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_end>
		TWCR |= (1<<TWINT); //Se limpia la bandera
 1ea:	ec eb       	ldi	r30, 0xBC	; 188
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	80 68       	ori	r24, 0x80	; 128
 1f2:	80 83       	st	Z, r24
		break;
 1f4:	15 c0       	rjmp	.+42     	; 0x220 <__vector_24+0x8a>
		case 0xA8: // SLA+R recibido, maestro solicita lectura
		case 0xB8: // Dato transmitido y ACK recibido
		TWDR = temperatureRaw; // Cargar el dato en el registro de datos*****************
 1f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWIE)| (1 << TWEA); // Listo para la proxima operacion
 1fe:	ec eb       	ldi	r30, 0xBC	; 188
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	85 6c       	ori	r24, 0xC5	; 197
 206:	80 83       	st	Z, r24
		break;
 208:	0b c0       	rjmp	.+22     	; 0x220 <__vector_24+0x8a>
		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Ultimo dato transmitido y ACK recibido
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Listo para la proxima operacion
 20a:	ec eb       	ldi	r30, 0xBC	; 188
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	84 6c       	ori	r24, 0xC4	; 196
 212:	80 83       	st	Z, r24
		break;
 214:	05 c0       	rjmp	.+10     	; 0x220 <__vector_24+0x8a>
		default:	//Se libera el bus de cualquier error
		TWCR |= (1<<TWINT)|(1<<TWSTO);
 216:	ec eb       	ldi	r30, 0xBC	; 188
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	80 69       	ori	r24, 0x90	; 144
 21e:	80 83       	st	Z, r24
		break;
	}
}
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	8f 91       	pop	r24
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

Disassembly of section .text:

00000310 <__fixunssfsi>:
 310:	0e 94 37 02 	call	0x46e	; 0x46e <__fp_splitA>
 314:	88 f0       	brcs	.+34     	; 0x338 <__fixunssfsi+0x28>
 316:	9f 57       	subi	r25, 0x7F	; 127
 318:	98 f0       	brcs	.+38     	; 0x340 <__fixunssfsi+0x30>
 31a:	b9 2f       	mov	r27, r25
 31c:	99 27       	eor	r25, r25
 31e:	b7 51       	subi	r27, 0x17	; 23
 320:	b0 f0       	brcs	.+44     	; 0x34e <__fixunssfsi+0x3e>
 322:	e1 f0       	breq	.+56     	; 0x35c <__fixunssfsi+0x4c>
 324:	66 0f       	add	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	88 1f       	adc	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	1a f0       	brmi	.+6      	; 0x334 <__fixunssfsi+0x24>
 32e:	ba 95       	dec	r27
 330:	c9 f7       	brne	.-14     	; 0x324 <__fixunssfsi+0x14>
 332:	14 c0       	rjmp	.+40     	; 0x35c <__fixunssfsi+0x4c>
 334:	b1 30       	cpi	r27, 0x01	; 1
 336:	91 f0       	breq	.+36     	; 0x35c <__fixunssfsi+0x4c>
 338:	0e 94 97 02 	call	0x52e	; 0x52e <__fp_zero>
 33c:	b1 e0       	ldi	r27, 0x01	; 1
 33e:	08 95       	ret
 340:	0c 94 97 02 	jmp	0x52e	; 0x52e <__fp_zero>
 344:	67 2f       	mov	r22, r23
 346:	78 2f       	mov	r23, r24
 348:	88 27       	eor	r24, r24
 34a:	b8 5f       	subi	r27, 0xF8	; 248
 34c:	39 f0       	breq	.+14     	; 0x35c <__fixunssfsi+0x4c>
 34e:	b9 3f       	cpi	r27, 0xF9	; 249
 350:	cc f3       	brlt	.-14     	; 0x344 <__fixunssfsi+0x34>
 352:	86 95       	lsr	r24
 354:	77 95       	ror	r23
 356:	67 95       	ror	r22
 358:	b3 95       	inc	r27
 35a:	d9 f7       	brne	.-10     	; 0x352 <__fixunssfsi+0x42>
 35c:	3e f4       	brtc	.+14     	; 0x36c <__fixunssfsi+0x5c>
 35e:	90 95       	com	r25
 360:	80 95       	com	r24
 362:	70 95       	com	r23
 364:	61 95       	neg	r22
 366:	7f 4f       	sbci	r23, 0xFF	; 255
 368:	8f 4f       	sbci	r24, 0xFF	; 255
 36a:	9f 4f       	sbci	r25, 0xFF	; 255
 36c:	08 95       	ret

Disassembly of section .text:

00000230 <__floatunsisf>:
 230:	e8 94       	clt
 232:	09 c0       	rjmp	.+18     	; 0x246 <__floatsisf+0x12>

00000234 <__floatsisf>:
 234:	97 fb       	bst	r25, 7
 236:	3e f4       	brtc	.+14     	; 0x246 <__floatsisf+0x12>
 238:	90 95       	com	r25
 23a:	80 95       	com	r24
 23c:	70 95       	com	r23
 23e:	61 95       	neg	r22
 240:	7f 4f       	sbci	r23, 0xFF	; 255
 242:	8f 4f       	sbci	r24, 0xFF	; 255
 244:	9f 4f       	sbci	r25, 0xFF	; 255
 246:	99 23       	and	r25, r25
 248:	a9 f0       	breq	.+42     	; 0x274 <__floatsisf+0x40>
 24a:	f9 2f       	mov	r31, r25
 24c:	96 e9       	ldi	r25, 0x96	; 150
 24e:	bb 27       	eor	r27, r27
 250:	93 95       	inc	r25
 252:	f6 95       	lsr	r31
 254:	87 95       	ror	r24
 256:	77 95       	ror	r23
 258:	67 95       	ror	r22
 25a:	b7 95       	ror	r27
 25c:	f1 11       	cpse	r31, r1
 25e:	f8 cf       	rjmp	.-16     	; 0x250 <__floatsisf+0x1c>
 260:	fa f4       	brpl	.+62     	; 0x2a0 <__floatsisf+0x6c>
 262:	bb 0f       	add	r27, r27
 264:	11 f4       	brne	.+4      	; 0x26a <__floatsisf+0x36>
 266:	60 ff       	sbrs	r22, 0
 268:	1b c0       	rjmp	.+54     	; 0x2a0 <__floatsisf+0x6c>
 26a:	6f 5f       	subi	r22, 0xFF	; 255
 26c:	7f 4f       	sbci	r23, 0xFF	; 255
 26e:	8f 4f       	sbci	r24, 0xFF	; 255
 270:	9f 4f       	sbci	r25, 0xFF	; 255
 272:	16 c0       	rjmp	.+44     	; 0x2a0 <__floatsisf+0x6c>
 274:	88 23       	and	r24, r24
 276:	11 f0       	breq	.+4      	; 0x27c <__floatsisf+0x48>
 278:	96 e9       	ldi	r25, 0x96	; 150
 27a:	11 c0       	rjmp	.+34     	; 0x29e <__floatsisf+0x6a>
 27c:	77 23       	and	r23, r23
 27e:	21 f0       	breq	.+8      	; 0x288 <__floatsisf+0x54>
 280:	9e e8       	ldi	r25, 0x8E	; 142
 282:	87 2f       	mov	r24, r23
 284:	76 2f       	mov	r23, r22
 286:	05 c0       	rjmp	.+10     	; 0x292 <__floatsisf+0x5e>
 288:	66 23       	and	r22, r22
 28a:	71 f0       	breq	.+28     	; 0x2a8 <__floatsisf+0x74>
 28c:	96 e8       	ldi	r25, 0x86	; 134
 28e:	86 2f       	mov	r24, r22
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	2a f0       	brmi	.+10     	; 0x2a0 <__floatsisf+0x6c>
 296:	9a 95       	dec	r25
 298:	66 0f       	add	r22, r22
 29a:	77 1f       	adc	r23, r23
 29c:	88 1f       	adc	r24, r24
 29e:	da f7       	brpl	.-10     	; 0x296 <__floatsisf+0x62>
 2a0:	88 0f       	add	r24, r24
 2a2:	96 95       	lsr	r25
 2a4:	87 95       	ror	r24
 2a6:	97 f9       	bld	r25, 7
 2a8:	08 95       	ret

Disassembly of section .text:

0000045e <__fp_split3>:
 45e:	57 fd       	sbrc	r21, 7
 460:	90 58       	subi	r25, 0x80	; 128
 462:	44 0f       	add	r20, r20
 464:	55 1f       	adc	r21, r21
 466:	59 f0       	breq	.+22     	; 0x47e <__fp_splitA+0x10>
 468:	5f 3f       	cpi	r21, 0xFF	; 255
 46a:	71 f0       	breq	.+28     	; 0x488 <__fp_splitA+0x1a>
 46c:	47 95       	ror	r20

0000046e <__fp_splitA>:
 46e:	88 0f       	add	r24, r24
 470:	97 fb       	bst	r25, 7
 472:	99 1f       	adc	r25, r25
 474:	61 f0       	breq	.+24     	; 0x48e <__fp_splitA+0x20>
 476:	9f 3f       	cpi	r25, 0xFF	; 255
 478:	79 f0       	breq	.+30     	; 0x498 <__fp_splitA+0x2a>
 47a:	87 95       	ror	r24
 47c:	08 95       	ret
 47e:	12 16       	cp	r1, r18
 480:	13 06       	cpc	r1, r19
 482:	14 06       	cpc	r1, r20
 484:	55 1f       	adc	r21, r21
 486:	f2 cf       	rjmp	.-28     	; 0x46c <__fp_split3+0xe>
 488:	46 95       	lsr	r20
 48a:	f1 df       	rcall	.-30     	; 0x46e <__fp_splitA>
 48c:	08 c0       	rjmp	.+16     	; 0x49e <__fp_splitA+0x30>
 48e:	16 16       	cp	r1, r22
 490:	17 06       	cpc	r1, r23
 492:	18 06       	cpc	r1, r24
 494:	99 1f       	adc	r25, r25
 496:	f1 cf       	rjmp	.-30     	; 0x47a <__fp_splitA+0xc>
 498:	86 95       	lsr	r24
 49a:	71 05       	cpc	r23, r1
 49c:	61 05       	cpc	r22, r1
 49e:	08 94       	sec
 4a0:	08 95       	ret

Disassembly of section .text:

0000052e <__fp_zero>:
 52e:	e8 94       	clt

00000530 <__fp_szero>:
 530:	bb 27       	eor	r27, r27
 532:	66 27       	eor	r22, r22
 534:	77 27       	eor	r23, r23
 536:	cb 01       	movw	r24, r22
 538:	97 f9       	bld	r25, 7
 53a:	08 95       	ret

Disassembly of section .text:

00000564 <__mulsf3>:
 564:	0e 94 61 00 	call	0xc2	; 0xc2 <__data_load_end>
 568:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_round>

Disassembly of section .text:

000000c2 <__mulsf3x>:
  c2:	0f c0       	rjmp	.+30     	; 0xe2 <__mulsf3x+0x20>
  c4:	0e 94 9e 02 	call	0x53c	; 0x53c <__fp_pscA>
  c8:	38 f0       	brcs	.+14     	; 0xd8 <__mulsf3x+0x16>
  ca:	0e 94 a5 02 	call	0x54a	; 0x54a <__fp_pscB>
  ce:	20 f0       	brcs	.+8      	; 0xd8 <__mulsf3x+0x16>
  d0:	95 23       	and	r25, r21
  d2:	11 f0       	breq	.+4      	; 0xd8 <__mulsf3x+0x16>
  d4:	0c 94 ac 02 	jmp	0x558	; 0x558 <__fp_inf>
  d8:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_nan>
  dc:	11 24       	eor	r1, r1
  de:	0c 94 98 02 	jmp	0x530	; 0x530 <__fp_szero>
  e2:	0e 94 2f 02 	call	0x45e	; 0x45e <__fp_split3>
  e6:	70 f3       	brcs	.-36     	; 0xc4 <__mulsf3x+0x2>

000000e8 <__mulsf3_pse>:
  e8:	95 9f       	mul	r25, r21
  ea:	c1 f3       	breq	.-16     	; 0xdc <__mulsf3x+0x1a>
  ec:	95 0f       	add	r25, r21
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	55 1f       	adc	r21, r21
  f2:	62 9f       	mul	r22, r18
  f4:	f0 01       	movw	r30, r0
  f6:	72 9f       	mul	r23, r18
  f8:	bb 27       	eor	r27, r27
  fa:	f0 0d       	add	r31, r0
  fc:	b1 1d       	adc	r27, r1
  fe:	63 9f       	mul	r22, r19
 100:	aa 27       	eor	r26, r26
 102:	f0 0d       	add	r31, r0
 104:	b1 1d       	adc	r27, r1
 106:	aa 1f       	adc	r26, r26
 108:	64 9f       	mul	r22, r20
 10a:	66 27       	eor	r22, r22
 10c:	b0 0d       	add	r27, r0
 10e:	a1 1d       	adc	r26, r1
 110:	66 1f       	adc	r22, r22
 112:	82 9f       	mul	r24, r18
 114:	22 27       	eor	r18, r18
 116:	b0 0d       	add	r27, r0
 118:	a1 1d       	adc	r26, r1
 11a:	62 1f       	adc	r22, r18
 11c:	73 9f       	mul	r23, r19
 11e:	b0 0d       	add	r27, r0
 120:	a1 1d       	adc	r26, r1
 122:	62 1f       	adc	r22, r18
 124:	83 9f       	mul	r24, r19
 126:	a0 0d       	add	r26, r0
 128:	61 1d       	adc	r22, r1
 12a:	22 1f       	adc	r18, r18
 12c:	74 9f       	mul	r23, r20
 12e:	33 27       	eor	r19, r19
 130:	a0 0d       	add	r26, r0
 132:	61 1d       	adc	r22, r1
 134:	23 1f       	adc	r18, r19
 136:	84 9f       	mul	r24, r20
 138:	60 0d       	add	r22, r0
 13a:	21 1d       	adc	r18, r1
 13c:	82 2f       	mov	r24, r18
 13e:	76 2f       	mov	r23, r22
 140:	6a 2f       	mov	r22, r26
 142:	11 24       	eor	r1, r1
 144:	9f 57       	subi	r25, 0x7F	; 127
 146:	50 40       	sbci	r21, 0x00	; 0
 148:	9a f0       	brmi	.+38     	; 0x170 <__mulsf3_pse+0x88>
 14a:	f1 f0       	breq	.+60     	; 0x188 <__mulsf3_pse+0xa0>
 14c:	88 23       	and	r24, r24
 14e:	4a f0       	brmi	.+18     	; 0x162 <__mulsf3_pse+0x7a>
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	bb 1f       	adc	r27, r27
 156:	66 1f       	adc	r22, r22
 158:	77 1f       	adc	r23, r23
 15a:	88 1f       	adc	r24, r24
 15c:	91 50       	subi	r25, 0x01	; 1
 15e:	50 40       	sbci	r21, 0x00	; 0
 160:	a9 f7       	brne	.-22     	; 0x14c <__mulsf3_pse+0x64>
 162:	9e 3f       	cpi	r25, 0xFE	; 254
 164:	51 05       	cpc	r21, r1
 166:	80 f0       	brcs	.+32     	; 0x188 <__mulsf3_pse+0xa0>
 168:	0c 94 ac 02 	jmp	0x558	; 0x558 <__fp_inf>
 16c:	0c 94 98 02 	jmp	0x530	; 0x530 <__fp_szero>
 170:	5f 3f       	cpi	r21, 0xFF	; 255
 172:	e4 f3       	brlt	.-8      	; 0x16c <__mulsf3_pse+0x84>
 174:	98 3e       	cpi	r25, 0xE8	; 232
 176:	d4 f3       	brlt	.-12     	; 0x16c <__mulsf3_pse+0x84>
 178:	86 95       	lsr	r24
 17a:	77 95       	ror	r23
 17c:	67 95       	ror	r22
 17e:	b7 95       	ror	r27
 180:	f7 95       	ror	r31
 182:	e7 95       	ror	r30
 184:	9f 5f       	subi	r25, 0xFF	; 255
 186:	c1 f7       	brne	.-16     	; 0x178 <__mulsf3_pse+0x90>
 188:	fe 2b       	or	r31, r30
 18a:	88 0f       	add	r24, r24
 18c:	91 1d       	adc	r25, r1
 18e:	96 95       	lsr	r25
 190:	87 95       	ror	r24
 192:	97 f9       	bld	r25, 7
 194:	08 95       	ret

Disassembly of section .text:

00000558 <__fp_inf>:
 558:	97 f9       	bld	r25, 7
 55a:	9f 67       	ori	r25, 0x7F	; 127
 55c:	80 e8       	ldi	r24, 0x80	; 128
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	08 95       	ret

Disassembly of section .text:

0000056c <__fp_nan>:
 56c:	9f ef       	ldi	r25, 0xFF	; 255
 56e:	80 ec       	ldi	r24, 0xC0	; 192
 570:	08 95       	ret

Disassembly of section .text:

0000053c <__fp_pscA>:
 53c:	00 24       	eor	r0, r0
 53e:	0a 94       	dec	r0
 540:	16 16       	cp	r1, r22
 542:	17 06       	cpc	r1, r23
 544:	18 06       	cpc	r1, r24
 546:	09 06       	cpc	r0, r25
 548:	08 95       	ret

Disassembly of section .text:

0000054a <__fp_pscB>:
 54a:	00 24       	eor	r0, r0
 54c:	0a 94       	dec	r0
 54e:	12 16       	cp	r1, r18
 550:	13 06       	cpc	r1, r19
 552:	14 06       	cpc	r1, r20
 554:	05 06       	cpc	r0, r21
 556:	08 95       	ret

Disassembly of section .text:

000004e0 <__fp_round>:
 4e0:	09 2e       	mov	r0, r25
 4e2:	03 94       	inc	r0
 4e4:	00 0c       	add	r0, r0
 4e6:	11 f4       	brne	.+4      	; 0x4ec <__fp_round+0xc>
 4e8:	88 23       	and	r24, r24
 4ea:	52 f0       	brmi	.+20     	; 0x500 <__fp_round+0x20>
 4ec:	bb 0f       	add	r27, r27
 4ee:	40 f4       	brcc	.+16     	; 0x500 <__fp_round+0x20>
 4f0:	bf 2b       	or	r27, r31
 4f2:	11 f4       	brne	.+4      	; 0x4f8 <__fp_round+0x18>
 4f4:	60 ff       	sbrs	r22, 0
 4f6:	04 c0       	rjmp	.+8      	; 0x500 <__fp_round+0x20>
 4f8:	6f 5f       	subi	r22, 0xFF	; 255
 4fa:	7f 4f       	sbci	r23, 0xFF	; 255
 4fc:	8f 4f       	sbci	r24, 0xFF	; 255
 4fe:	9f 4f       	sbci	r25, 0xFF	; 255
 500:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000057a <_fini>:
 57a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000057c <__funcs_on_exit>:
 57c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000057e <__simulator_exit>:
 57e:	08 95       	ret

Disassembly of section .text.exit:

00000518 <exit>:
 518:	ec 01       	movw	r28, r24
 51a:	0e 94 be 02 	call	0x57c	; 0x57c <__funcs_on_exit>
 51e:	0e 94 bd 02 	call	0x57a	; 0x57a <_fini>
 522:	ce 01       	movw	r24, r28
 524:	0e 94 bf 02 	call	0x57e	; 0x57e <__simulator_exit>
 528:	ce 01       	movw	r24, r28
 52a:	0e 94 bb 02 	call	0x576	; 0x576 <_Exit>

Disassembly of section .text._Exit:

00000576 <_Exit>:
 576:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
