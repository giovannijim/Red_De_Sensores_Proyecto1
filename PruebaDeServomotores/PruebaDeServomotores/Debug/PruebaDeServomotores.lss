
PruebaDeServomotores.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000069a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000626  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000069a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000069a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000118d  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a70  00000000  00000000  00001999  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000acf  00000000  00000000  00002409  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00002ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b4  00000000  00000000  000030f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000907  00000000  00000000  000036a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003faf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 03 01 	call	0x206	; 0x206 <main>
  88:	0c 94 11 03 	jmp	0x622	; 0x622 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <oneWireInit>:
// Definiciones para el DS18B20
#define DS18B20_PIN  PB0  // Define el pin al que está conectado el DS18B20

// Funciones para el DS18B20
void oneWireInit(void) {
	DDRB |= (1 << DS18B20_PIN);  // Configura el pin como salida
  90:	84 b1       	in	r24, 0x04	; 4
  92:	81 60       	ori	r24, 0x01	; 1
  94:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << DS18B20_PIN); // Envía un pulso bajo
  96:	85 b1       	in	r24, 0x05	; 5
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	8f e7       	ldi	r24, 0x7F	; 127
  9e:	97 e0       	ldi	r25, 0x07	; 7
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <oneWireInit+0x10>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <oneWireInit+0x16>
  a6:	00 00       	nop
	_delay_us(480);  // Espera 480us
	PORTB |= (1 << DS18B20_PIN);  // Envía un pulso alto
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	85 b9       	out	0x05, r24	; 5
  ae:	87 e1       	ldi	r24, 0x17	; 23
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <oneWireInit+0x22>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <oneWireInit+0x28>
  b8:	00 00       	nop
	_delay_us(70);   // Espera 70us
	DDRB &= ~(1 << DS18B20_PIN); // Configura el pin como entrada
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	84 b9       	out	0x04, r24	; 4
  c0:	87 e6       	ldi	r24, 0x67	; 103
  c2:	96 e0       	ldi	r25, 0x06	; 6
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <oneWireInit+0x34>
  c8:	00 c0       	rjmp	.+0      	; 0xca <oneWireInit+0x3a>
  ca:	00 00       	nop
  cc:	08 95       	ret

000000ce <oneWireWrite>:
	_delay_us(410);  // Espera 410us para la respuesta del sensor
}

void oneWireWrite(uint8_t data) {
	for (uint8_t i = 0; i < 8; i++) {
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	1e c0       	rjmp	.+60     	; 0x10e <oneWireWrite+0x40>
		DDRB |= (1 << DS18B20_PIN);  // Configura el pin como salida
  d2:	94 b1       	in	r25, 0x04	; 4
  d4:	91 60       	ori	r25, 0x01	; 1
  d6:	94 b9       	out	0x04, r25	; 4
		PORTB &= ~(1 << DS18B20_PIN); // Envía un pulso bajo
  d8:	95 b1       	in	r25, 0x05	; 5
  da:	9e 7f       	andi	r25, 0xFE	; 254
  dc:	95 b9       	out	0x05, r25	; 5
  de:	9a e0       	ldi	r25, 0x0A	; 10
  e0:	9a 95       	dec	r25
  e2:	f1 f7       	brne	.-4      	; 0xe0 <oneWireWrite+0x12>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <oneWireWrite+0x18>
		_delay_us(2);  // Espera 2us
		if (data & 0x01) {
  e6:	80 ff       	sbrs	r24, 0
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <oneWireWrite+0x22>
			PORTB |= (1 << DS18B20_PIN); // Envía un pulso alto
  ea:	95 b1       	in	r25, 0x05	; 5
  ec:	91 60       	ori	r25, 0x01	; 1
  ee:	95 b9       	out	0x05, r25	; 5
  f0:	ef ee       	ldi	r30, 0xEF	; 239
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <oneWireWrite+0x26>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <oneWireWrite+0x2c>
  fa:	00 00       	nop
		}
		_delay_us(60);  // Espera 60us
		PORTB |= (1 << DS18B20_PIN);  // Termina el pulso
  fc:	95 b1       	in	r25, 0x05	; 5
  fe:	91 60       	ori	r25, 0x01	; 1
 100:	95 b9       	out	0x05, r25	; 5
 102:	fa e0       	ldi	r31, 0x0A	; 10
 104:	fa 95       	dec	r31
 106:	f1 f7       	brne	.-4      	; 0x104 <oneWireWrite+0x36>
 108:	00 c0       	rjmp	.+0      	; 0x10a <oneWireWrite+0x3c>
		_delay_us(2);   // Espera 2us
		data >>= 1;    // Desplaza el bit
 10a:	86 95       	lsr	r24
	DDRB &= ~(1 << DS18B20_PIN); // Configura el pin como entrada
	_delay_us(410);  // Espera 410us para la respuesta del sensor
}

void oneWireWrite(uint8_t data) {
	for (uint8_t i = 0; i < 8; i++) {
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	28 30       	cpi	r18, 0x08	; 8
 110:	00 f3       	brcs	.-64     	; 0xd2 <oneWireWrite+0x4>
		_delay_us(60);  // Espera 60us
		PORTB |= (1 << DS18B20_PIN);  // Termina el pulso
		_delay_us(2);   // Espera 2us
		data >>= 1;    // Desplaza el bit
	}
}
 112:	08 95       	ret

00000114 <oneWireRead>:

uint8_t oneWireRead(void) {
	uint8_t data = 0;
	for (uint8_t i = 0; i < 8; i++) {
 114:	20 e0       	ldi	r18, 0x00	; 0
		data >>= 1;    // Desplaza el bit
	}
}

uint8_t oneWireRead(void) {
	uint8_t data = 0;
 116:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
 118:	23 c0       	rjmp	.+70     	; 0x160 <oneWireRead+0x4c>
		DDRB |= (1 << DS18B20_PIN);  // Configura el pin como salida
 11a:	94 b1       	in	r25, 0x04	; 4
 11c:	91 60       	ori	r25, 0x01	; 1
 11e:	94 b9       	out	0x04, r25	; 4
		PORTB &= ~(1 << DS18B20_PIN); // Envía un pulso bajo
 120:	95 b1       	in	r25, 0x05	; 5
 122:	9e 7f       	andi	r25, 0xFE	; 254
 124:	95 b9       	out	0x05, r25	; 5
 126:	9a e0       	ldi	r25, 0x0A	; 10
 128:	9a 95       	dec	r25
 12a:	f1 f7       	brne	.-4      	; 0x128 <oneWireRead+0x14>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <oneWireRead+0x1a>
		_delay_us(2);  // Espera 2us
		DDRB &= ~(1 << DS18B20_PIN); // Configura el pin como entrada
 12e:	94 b1       	in	r25, 0x04	; 4
 130:	9e 7f       	andi	r25, 0xFE	; 254
 132:	94 b9       	out	0x04, r25	; 4
 134:	e5 e3       	ldi	r30, 0x35	; 53
 136:	ea 95       	dec	r30
 138:	f1 f7       	brne	.-4      	; 0x136 <oneWireRead+0x22>
 13a:	00 00       	nop
		_delay_us(10);  // Espera 10us para leer el bit
		if (PINB & (1 << DS18B20_PIN)) {
 13c:	18 9b       	sbis	0x03, 0	; 3
 13e:	09 c0       	rjmp	.+18     	; 0x152 <oneWireRead+0x3e>
			data |= (1 << i); // Lee el bit
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	02 2e       	mov	r0, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <oneWireRead+0x38>
 148:	44 0f       	add	r20, r20
 14a:	55 1f       	adc	r21, r21
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <oneWireRead+0x34>
 150:	84 2b       	or	r24, r20
 152:	eb ed       	ldi	r30, 0xDB	; 219
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <oneWireRead+0x42>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <oneWireRead+0x48>
 15c:	00 00       	nop
	}
}

uint8_t oneWireRead(void) {
	uint8_t data = 0;
	for (uint8_t i = 0; i < 8; i++) {
 15e:	2f 5f       	subi	r18, 0xFF	; 255
 160:	28 30       	cpi	r18, 0x08	; 8
 162:	d8 f2       	brcs	.-74     	; 0x11a <oneWireRead+0x6>
			data |= (1 << i); // Lee el bit
		}
		_delay_us(55);  // Espera 55us
	}
	return data;
}
 164:	08 95       	ret

00000166 <readTemperature>:

uint8_t readTemperature(void) {
 166:	cf 93       	push	r28
	 uint16_t temperatureRaw;
	 uint8_t temperatureCelsius;

	
	// Inicialización y lectura de la temperatura
	oneWireInit();
 168:	0e 94 48 00 	call	0x90	; 0x90 <oneWireInit>
	oneWireWrite(0xCC); // Skip ROM command
 16c:	8c ec       	ldi	r24, 0xCC	; 204
 16e:	0e 94 67 00 	call	0xce	; 0xce <oneWireWrite>
	oneWireWrite(0x44); // Convert T command
 172:	84 e4       	ldi	r24, 0x44	; 68
 174:	0e 94 67 00 	call	0xce	; 0xce <oneWireWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	8e e9       	ldi	r24, 0x9E	; 158
 17c:	94 e2       	ldi	r25, 0x24	; 36
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <readTemperature+0x18>
 186:	00 c0       	rjmp	.+0      	; 0x188 <readTemperature+0x22>
 188:	00 00       	nop
	_delay_ms(750);     // Espera a que el sensor convierta la temperatura
	
	oneWireInit();
 18a:	0e 94 48 00 	call	0x90	; 0x90 <oneWireInit>
	oneWireWrite(0xCC); // Skip ROM command
 18e:	8c ec       	ldi	r24, 0xCC	; 204
 190:	0e 94 67 00 	call	0xce	; 0xce <oneWireWrite>
	oneWireWrite(0xBE); // Read Scratchpad command
 194:	8e eb       	ldi	r24, 0xBE	; 190
 196:	0e 94 67 00 	call	0xce	; 0xce <oneWireWrite>
	
	uint8_t tempL = oneWireRead();
 19a:	0e 94 8a 00 	call	0x114	; 0x114 <oneWireRead>
 19e:	c8 2f       	mov	r28, r24
	uint8_t tempH = oneWireRead();
 1a0:	0e 94 8a 00 	call	0x114	; 0x114 <oneWireRead>
	
	temperatureRaw = (tempH << 8) | tempL; // Combina los bytes de temperatura
 1a4:	68 2f       	mov	r22, r24
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	76 2f       	mov	r23, r22
 1aa:	66 27       	eor	r22, r22
 1ac:	6c 2b       	or	r22, r28

	 // Conversión a grados Celsius. El valor del DS18B20 es en unidades de 1/16 de grado.
	 temperatureCelsius = temperatureRaw * 0.0625;  // Ahora es un float en °C
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 16 02 	call	0x42c	; 0x42c <__floatunsisf>
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	40 e8       	ldi	r20, 0x80	; 128
 1bc:	5d e3       	ldi	r21, 0x3D	; 61
 1be:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__mulsf3>
 1c2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__fixunssfsi>
 1c6:	86 2f       	mov	r24, r22
	 if (temperatureScaled > 255) {
		 temperatureScaled = 255;  // Limitar a 255 si excede
	 }
*/
	 return temperatureCelsius;  // Devuelve la temperatura escalada
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <I2C_SETTING_SLAVE>:
	
	TWCR = 1 << TWEN;   //Habilita la interfaz
}

void I2C_SETTING_SLAVE(uint8_t address){
	DDRC &= ~((1<<DDC4) | (1<<DDC5));
 1cc:	97 b1       	in	r25, 0x07	; 7
 1ce:	9f 7c       	andi	r25, 0xCF	; 207
 1d0:	97 b9       	out	0x07, r25	; 7
	
	address <<= 1;  //Ubica la dirección y
 1d2:	88 0f       	add	r24, r24
	address |= 0x01; //habilita para reconocer las llamadas generales de I2C
 1d4:	81 60       	ori	r24, 0x01	; 1
	TWAR = address;
 1d6:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
 1da:	85 e4       	ldi	r24, 0x45	; 69
 1dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1e0:	08 95       	ret

000001e2 <abrir_compuertas>:
void uart_transmit(unsigned char data);
void uart_print(const char *str);
*/

void abrir_compuertas(void){
	duty_cycleA(32);
 1e2:	80 e2       	ldi	r24, 0x20	; 32
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <duty_cycleA>
	duty_cycleB(32);
 1ea:	80 e2       	ldi	r24, 0x20	; 32
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 e5 01 	call	0x3ca	; 0x3ca <duty_cycleB>
 1f2:	08 95       	ret

000001f4 <cerrar_compuertas>:
}

void cerrar_compuertas(void){
	duty_cycleA(16);
 1f4:	80 e1       	ldi	r24, 0x10	; 16
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <duty_cycleA>
	duty_cycleB(19);
 1fc:	83 e1       	ldi	r24, 0x13	; 19
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 e5 01 	call	0x3ca	; 0x3ca <duty_cycleB>
 204:	08 95       	ret

00000206 <main>:
	
}
int main(void) {
	
	//Incialización de los PWM0 
	init_PMW0A(0,0,1024);
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	54 e0       	ldi	r21, 0x04	; 4
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 98 01 	call	0x330	; 0x330 <init_PMW0A>
	init_PMW0B(0);
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <init_PMW0B>
	//Posición inicial
	cerrar_compuertas();
 21e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <cerrar_compuertas>
	
	cli();
 222:	f8 94       	cli
	//char buffer[16];
	DDRB |= 1<< DDB4;
 224:	84 b1       	in	r24, 0x04	; 4
 226:	80 61       	ori	r24, 0x10	; 16
 228:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~1<<PORTB4;
 22a:	85 b1       	in	r24, 0x05	; 5
 22c:	80 7e       	andi	r24, 0xE0	; 224
 22e:	85 b9       	out	0x05, r24	; 5
	
	// Configura el pin del DS18B20
	DDRB |= (1 << DS18B20_PIN);  // Configura el pin como salida
 230:	84 b1       	in	r24, 0x04	; 4
 232:	81 60       	ori	r24, 0x01	; 1
 234:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << DS18B20_PIN); 
 236:	85 b1       	in	r24, 0x05	; 5
 238:	81 60       	ori	r24, 0x01	; 1
 23a:	85 b9       	out	0x05, r24	; 5

	// Configura UART
	//uart_init(9600);  // Configura la UART a 9600 baudios
	I2C_SETTING_SLAVE(SlaveTemp);
 23c:	80 e4       	ldi	r24, 0x40	; 64
 23e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_SETTING_SLAVE>
	sei();
 242:	78 94       	sei
	while (1) {
		
		temperatureRaw = readTemperature();
 244:	0e 94 b3 00 	call	0x166	; 0x166 <readTemperature>
 248:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <temperatureRaw>
		
		//Condiciones para cerrar y abrir compuertas
		if (temperatureRaw > temp_sup) {
 24c:	8b 31       	cpi	r24, 0x1B	; 27
 24e:	10 f0       	brcs	.+4      	; 0x254 <main+0x4e>
			abrir_compuertas();
 250:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <abrir_compuertas>
		}
		if (temperatureRaw < temp_infe){
 254:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <temperatureRaw>
 258:	87 31       	cpi	r24, 0x17	; 23
 25a:	10 f4       	brcc	.+4      	; 0x260 <main+0x5a>
			cerrar_compuertas();
 25c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <cerrar_compuertas>
		}
		
		if (bufferI2C == 1)
 260:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	31 f4       	brne	.+12     	; 0x274 <main+0x6e>
		{
			PORTB |= 1<< PORTB4;
 268:	85 b1       	in	r24, 0x05	; 5
 26a:	80 61       	ori	r24, 0x10	; 16
 26c:	85 b9       	out	0x05, r24	; 5
			abrir_compuertas();
 26e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <abrir_compuertas>
 272:	07 c0       	rjmp	.+14     	; 0x282 <main+0x7c>
		}
		else if (bufferI2C == 2) {
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	29 f4       	brne	.+10     	; 0x282 <main+0x7c>
			PORTB &= ~1<< PORTB4;
 278:	85 b1       	in	r24, 0x05	; 5
 27a:	80 7e       	andi	r24, 0xE0	; 224
 27c:	85 b9       	out	0x05, r24	; 5
			cerrar_compuertas();
 27e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <cerrar_compuertas>
 282:	2f ef       	ldi	r18, 0xFF	; 255
 284:	89 ef       	ldi	r24, 0xF9	; 249
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0x82>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x8c>
 292:	00 00       	nop
 294:	d7 cf       	rjmp	.-82     	; 0x244 <main+0x3e>

00000296 <__vector_24>:
	}

}

// Vector de interrupcion I2C
ISR(TWI_vect){
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	8f 93       	push	r24
 2a2:	ef 93       	push	r30
 2a4:	ff 93       	push	r31
	uint8_t estado;
	estado = TWSR & 0xFC;
 2a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2aa:	8c 7f       	andi	r24, 0xFC	; 252
	switch(estado){
 2ac:	80 39       	cpi	r24, 0x90	; 144
 2ae:	c9 f0       	breq	.+50     	; 0x2e2 <__vector_24+0x4c>
 2b0:	38 f4       	brcc	.+14     	; 0x2c0 <__vector_24+0x2a>
 2b2:	80 37       	cpi	r24, 0x70	; 112
 2b4:	81 f0       	breq	.+32     	; 0x2d6 <__vector_24+0x40>
 2b6:	80 38       	cpi	r24, 0x80	; 128
 2b8:	a1 f0       	breq	.+40     	; 0x2e2 <__vector_24+0x4c>
 2ba:	80 36       	cpi	r24, 0x60	; 96
 2bc:	61 f5       	brne	.+88     	; 0x316 <__vector_24+0x80>
 2be:	0b c0       	rjmp	.+22     	; 0x2d6 <__vector_24+0x40>
 2c0:	88 3b       	cpi	r24, 0xB8	; 184
 2c2:	c9 f0       	breq	.+50     	; 0x2f6 <__vector_24+0x60>
 2c4:	18 f4       	brcc	.+6      	; 0x2cc <__vector_24+0x36>
 2c6:	88 3a       	cpi	r24, 0xA8	; 168
 2c8:	b1 f0       	breq	.+44     	; 0x2f6 <__vector_24+0x60>
 2ca:	25 c0       	rjmp	.+74     	; 0x316 <__vector_24+0x80>
 2cc:	80 3c       	cpi	r24, 0xC0	; 192
 2ce:	e9 f0       	breq	.+58     	; 0x30a <__vector_24+0x74>
 2d0:	88 3c       	cpi	r24, 0xC8	; 200
 2d2:	d9 f0       	breq	.+54     	; 0x30a <__vector_24+0x74>
 2d4:	20 c0       	rjmp	.+64     	; 0x316 <__vector_24+0x80>
		case 0x60:
		case 0x70:
		TWCR |= (1<<TWINT);
 2d6:	ec eb       	ldi	r30, 0xBC	; 188
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	80 68       	ori	r24, 0x80	; 128
 2de:	80 83       	st	Z, r24
		break;
 2e0:	1f c0       	rjmp	.+62     	; 0x320 <__vector_24+0x8a>
		case 0x80:
		case 0x90:
		bufferI2C = TWDR;
 2e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		TWCR |= (1<<TWINT); //Se limpia la bandera
 2ea:	ec eb       	ldi	r30, 0xBC	; 188
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	80 68       	ori	r24, 0x80	; 128
 2f2:	80 83       	st	Z, r24
		break;
 2f4:	15 c0       	rjmp	.+42     	; 0x320 <__vector_24+0x8a>
		case 0xA8: // SLA+R recibido, maestro solicita lectura
		case 0xB8: // Dato transmitido y ACK recibido
		TWDR = temperatureRaw; // Cargar el dato en el registro de datos*******
 2f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <temperatureRaw>
 2fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWIE)| (1 << TWEA); // Listo para la proxima operacion
 2fe:	ec eb       	ldi	r30, 0xBC	; 188
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	85 6c       	ori	r24, 0xC5	; 197
 306:	80 83       	st	Z, r24
		break;
 308:	0b c0       	rjmp	.+22     	; 0x320 <__vector_24+0x8a>
		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Ultimo dato transmitido y ACK recibido
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Listo para la proxima operacion
 30a:	ec eb       	ldi	r30, 0xBC	; 188
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	84 6c       	ori	r24, 0xC4	; 196
 312:	80 83       	st	Z, r24
		break;
 314:	05 c0       	rjmp	.+10     	; 0x320 <__vector_24+0x8a>
		default:	//Se libera el bus de cualquier error
		TWCR |= (1<<TWINT)|(1<<TWSTO);
 316:	ec eb       	ldi	r30, 0xBC	; 188
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	80 69       	ori	r24, 0x90	; 144
 31e:	80 83       	st	Z, r24
		break;
	}
}
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	8f 91       	pop	r24
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <init_PMW0A>:

#include "PMW0.h" 

void init_PMW0A(int orientacion,int modo,int preescaler){
	//Puerto de salida
	DDRD |= (1<<DDD6);
 330:	2a b1       	in	r18, 0x0a	; 10
 332:	20 64       	ori	r18, 0x40	; 64
 334:	2a b9       	out	0x0a, r18	; 10
	
	// Configura TCCR0A y TCCR0B
	TCCR0A=0;
 336:	14 bc       	out	0x24, r1	; 36
	TCCR0B=0;
 338:	15 bc       	out	0x25, r1	; 37
	
	//Definimos la orientación en invertido o no invertido
	if (orientacion == 0) {
 33a:	89 2b       	or	r24, r25
 33c:	21 f4       	brne	.+8      	; 0x346 <init_PMW0A+0x16>
		// No invertido
		TCCR0A |= (1 << COM0A1);
 33e:	84 b5       	in	r24, 0x24	; 36
 340:	80 68       	ori	r24, 0x80	; 128
 342:	84 bd       	out	0x24, r24	; 36
 344:	03 c0       	rjmp	.+6      	; 0x34c <init_PMW0A+0x1c>
		} else {
		// Invertido
		TCCR0A |= (1 << COM0A1) | (1 << COM0A0);
 346:	84 b5       	in	r24, 0x24	; 36
 348:	80 6c       	ori	r24, 0xC0	; 192
 34a:	84 bd       	out	0x24, r24	; 36
	}
	//Definimos el modo de operación FAST o Phase Correct
	if (modo == 0) {
 34c:	67 2b       	or	r22, r23
 34e:	21 f4       	brne	.+8      	; 0x358 <init_PMW0A+0x28>
		// FAST
		TCCR0A |= (1 << WGM00) | (1 << WGM01);
 350:	84 b5       	in	r24, 0x24	; 36
 352:	83 60       	ori	r24, 0x03	; 3
 354:	84 bd       	out	0x24, r24	; 36
 356:	03 c0       	rjmp	.+6      	; 0x35e <init_PMW0A+0x2e>
		} else {
		// Phase Correct
		TCCR0A |= (1 << WGM00);
 358:	84 b5       	in	r24, 0x24	; 36
 35a:	81 60       	ori	r24, 0x01	; 1
 35c:	84 bd       	out	0x24, r24	; 36
	}
	//Definimos el preescaler
	switch (preescaler) {
 35e:	40 34       	cpi	r20, 0x40	; 64
 360:	51 05       	cpc	r21, r1
 362:	c1 f0       	breq	.+48     	; 0x394 <init_PMW0A+0x64>
 364:	3c f4       	brge	.+14     	; 0x374 <init_PMW0A+0x44>
 366:	41 15       	cp	r20, r1
 368:	51 05       	cpc	r21, r1
 36a:	61 f0       	breq	.+24     	; 0x384 <init_PMW0A+0x54>
 36c:	48 30       	cpi	r20, 0x08	; 8
 36e:	51 05       	cpc	r21, r1
 370:	69 f0       	breq	.+26     	; 0x38c <init_PMW0A+0x5c>
 372:	08 95       	ret
 374:	41 15       	cp	r20, r1
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	58 07       	cpc	r21, r24
 37a:	81 f0       	breq	.+32     	; 0x39c <init_PMW0A+0x6c>
 37c:	41 15       	cp	r20, r1
 37e:	54 40       	sbci	r21, 0x04	; 4
 380:	89 f0       	breq	.+34     	; 0x3a4 <init_PMW0A+0x74>
 382:	08 95       	ret
		case 0:
		TCCR0B |= (1 << CS00);
 384:	85 b5       	in	r24, 0x25	; 37
 386:	81 60       	ori	r24, 0x01	; 1
 388:	85 bd       	out	0x25, r24	; 37
		break;
 38a:	08 95       	ret
		case 8:
		TCCR0B |= (1 << CS01);
 38c:	85 b5       	in	r24, 0x25	; 37
 38e:	82 60       	ori	r24, 0x02	; 2
 390:	85 bd       	out	0x25, r24	; 37
		break;
 392:	08 95       	ret
		case 64:
		TCCR0B |= (1 << CS01) | (1 << CS00);
 394:	85 b5       	in	r24, 0x25	; 37
 396:	83 60       	ori	r24, 0x03	; 3
 398:	85 bd       	out	0x25, r24	; 37
		break;
 39a:	08 95       	ret
		case 256:
		TCCR0B |= (1 << CS02);
 39c:	85 b5       	in	r24, 0x25	; 37
 39e:	84 60       	ori	r24, 0x04	; 4
 3a0:	85 bd       	out	0x25, r24	; 37
		break;
 3a2:	08 95       	ret
		case 1024:
		TCCR0B |= (1 << CS02) | (1 << CS00);
 3a4:	85 b5       	in	r24, 0x25	; 37
 3a6:	85 60       	ori	r24, 0x05	; 5
 3a8:	85 bd       	out	0x25, r24	; 37
 3aa:	08 95       	ret

000003ac <init_PMW0B>:
	}
}

void init_PMW0B(int orientacion){
	//Puerto de salida
	DDRD |= (1<<DDD5);
 3ac:	2a b1       	in	r18, 0x0a	; 10
 3ae:	20 62       	ori	r18, 0x20	; 32
 3b0:	2a b9       	out	0x0a, r18	; 10
	
	//Definimos la orientación en invertido o no invertido
	if (orientacion == 0) {
 3b2:	89 2b       	or	r24, r25
 3b4:	21 f4       	brne	.+8      	; 0x3be <init_PMW0B+0x12>
		// No invertido
		TCCR0A |= (1 << COM0B1);
 3b6:	84 b5       	in	r24, 0x24	; 36
 3b8:	80 62       	ori	r24, 0x20	; 32
 3ba:	84 bd       	out	0x24, r24	; 36
 3bc:	08 95       	ret
		} else {
		// Invertido
		TCCR0A |= (1 << COM0B1) | (1 << COM0B0);
 3be:	84 b5       	in	r24, 0x24	; 36
 3c0:	80 63       	ori	r24, 0x30	; 48
 3c2:	84 bd       	out	0x24, r24	; 36
 3c4:	08 95       	ret

000003c6 <duty_cycleA>:
	}
	
}

void duty_cycleA(int duty){
	OCR0A = duty;
 3c6:	87 bd       	out	0x27, r24	; 39
 3c8:	08 95       	ret

000003ca <duty_cycleB>:
}

void duty_cycleB(int duty){
	OCR0B = duty;
 3ca:	88 bd       	out	0x28, r24	; 40
 3cc:	08 95       	ret

000003ce <__fixunssfsi>:
 3ce:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__fp_splitA>
 3d2:	88 f0       	brcs	.+34     	; 0x3f6 <__fixunssfsi+0x28>
 3d4:	9f 57       	subi	r25, 0x7F	; 127
 3d6:	98 f0       	brcs	.+38     	; 0x3fe <__fixunssfsi+0x30>
 3d8:	b9 2f       	mov	r27, r25
 3da:	99 27       	eor	r25, r25
 3dc:	b7 51       	subi	r27, 0x17	; 23
 3de:	b0 f0       	brcs	.+44     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3e0:	e1 f0       	breq	.+56     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3e2:	66 0f       	add	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	88 1f       	adc	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	1a f0       	brmi	.+6      	; 0x3f2 <__fixunssfsi+0x24>
 3ec:	ba 95       	dec	r27
 3ee:	c9 f7       	brne	.-14     	; 0x3e2 <__fixunssfsi+0x14>
 3f0:	14 c0       	rjmp	.+40     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3f2:	b1 30       	cpi	r27, 0x01	; 1
 3f4:	91 f0       	breq	.+36     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3f6:	0e 94 75 02 	call	0x4ea	; 0x4ea <__fp_zero>
 3fa:	b1 e0       	ldi	r27, 0x01	; 1
 3fc:	08 95       	ret
 3fe:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__fp_zero>
 402:	67 2f       	mov	r22, r23
 404:	78 2f       	mov	r23, r24
 406:	88 27       	eor	r24, r24
 408:	b8 5f       	subi	r27, 0xF8	; 248
 40a:	39 f0       	breq	.+14     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 40c:	b9 3f       	cpi	r27, 0xF9	; 249
 40e:	cc f3       	brlt	.-14     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 410:	86 95       	lsr	r24
 412:	77 95       	ror	r23
 414:	67 95       	ror	r22
 416:	b3 95       	inc	r27
 418:	d9 f7       	brne	.-10     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 41a:	3e f4       	brtc	.+14     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 41c:	90 95       	com	r25
 41e:	80 95       	com	r24
 420:	70 95       	com	r23
 422:	61 95       	neg	r22
 424:	7f 4f       	sbci	r23, 0xFF	; 255
 426:	8f 4f       	sbci	r24, 0xFF	; 255
 428:	9f 4f       	sbci	r25, 0xFF	; 255
 42a:	08 95       	ret

0000042c <__floatunsisf>:
 42c:	e8 94       	clt
 42e:	09 c0       	rjmp	.+18     	; 0x442 <__floatsisf+0x12>

00000430 <__floatsisf>:
 430:	97 fb       	bst	r25, 7
 432:	3e f4       	brtc	.+14     	; 0x442 <__floatsisf+0x12>
 434:	90 95       	com	r25
 436:	80 95       	com	r24
 438:	70 95       	com	r23
 43a:	61 95       	neg	r22
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	8f 4f       	sbci	r24, 0xFF	; 255
 440:	9f 4f       	sbci	r25, 0xFF	; 255
 442:	99 23       	and	r25, r25
 444:	a9 f0       	breq	.+42     	; 0x470 <__floatsisf+0x40>
 446:	f9 2f       	mov	r31, r25
 448:	96 e9       	ldi	r25, 0x96	; 150
 44a:	bb 27       	eor	r27, r27
 44c:	93 95       	inc	r25
 44e:	f6 95       	lsr	r31
 450:	87 95       	ror	r24
 452:	77 95       	ror	r23
 454:	67 95       	ror	r22
 456:	b7 95       	ror	r27
 458:	f1 11       	cpse	r31, r1
 45a:	f8 cf       	rjmp	.-16     	; 0x44c <__floatsisf+0x1c>
 45c:	fa f4       	brpl	.+62     	; 0x49c <__floatsisf+0x6c>
 45e:	bb 0f       	add	r27, r27
 460:	11 f4       	brne	.+4      	; 0x466 <__floatsisf+0x36>
 462:	60 ff       	sbrs	r22, 0
 464:	1b c0       	rjmp	.+54     	; 0x49c <__floatsisf+0x6c>
 466:	6f 5f       	subi	r22, 0xFF	; 255
 468:	7f 4f       	sbci	r23, 0xFF	; 255
 46a:	8f 4f       	sbci	r24, 0xFF	; 255
 46c:	9f 4f       	sbci	r25, 0xFF	; 255
 46e:	16 c0       	rjmp	.+44     	; 0x49c <__floatsisf+0x6c>
 470:	88 23       	and	r24, r24
 472:	11 f0       	breq	.+4      	; 0x478 <__floatsisf+0x48>
 474:	96 e9       	ldi	r25, 0x96	; 150
 476:	11 c0       	rjmp	.+34     	; 0x49a <__floatsisf+0x6a>
 478:	77 23       	and	r23, r23
 47a:	21 f0       	breq	.+8      	; 0x484 <__floatsisf+0x54>
 47c:	9e e8       	ldi	r25, 0x8E	; 142
 47e:	87 2f       	mov	r24, r23
 480:	76 2f       	mov	r23, r22
 482:	05 c0       	rjmp	.+10     	; 0x48e <__floatsisf+0x5e>
 484:	66 23       	and	r22, r22
 486:	71 f0       	breq	.+28     	; 0x4a4 <__floatsisf+0x74>
 488:	96 e8       	ldi	r25, 0x86	; 134
 48a:	86 2f       	mov	r24, r22
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	2a f0       	brmi	.+10     	; 0x49c <__floatsisf+0x6c>
 492:	9a 95       	dec	r25
 494:	66 0f       	add	r22, r22
 496:	77 1f       	adc	r23, r23
 498:	88 1f       	adc	r24, r24
 49a:	da f7       	brpl	.-10     	; 0x492 <__floatsisf+0x62>
 49c:	88 0f       	add	r24, r24
 49e:	96 95       	lsr	r25
 4a0:	87 95       	ror	r24
 4a2:	97 f9       	bld	r25, 7
 4a4:	08 95       	ret

000004a6 <__fp_split3>:
 4a6:	57 fd       	sbrc	r21, 7
 4a8:	90 58       	subi	r25, 0x80	; 128
 4aa:	44 0f       	add	r20, r20
 4ac:	55 1f       	adc	r21, r21
 4ae:	59 f0       	breq	.+22     	; 0x4c6 <__fp_splitA+0x10>
 4b0:	5f 3f       	cpi	r21, 0xFF	; 255
 4b2:	71 f0       	breq	.+28     	; 0x4d0 <__fp_splitA+0x1a>
 4b4:	47 95       	ror	r20

000004b6 <__fp_splitA>:
 4b6:	88 0f       	add	r24, r24
 4b8:	97 fb       	bst	r25, 7
 4ba:	99 1f       	adc	r25, r25
 4bc:	61 f0       	breq	.+24     	; 0x4d6 <__fp_splitA+0x20>
 4be:	9f 3f       	cpi	r25, 0xFF	; 255
 4c0:	79 f0       	breq	.+30     	; 0x4e0 <__fp_splitA+0x2a>
 4c2:	87 95       	ror	r24
 4c4:	08 95       	ret
 4c6:	12 16       	cp	r1, r18
 4c8:	13 06       	cpc	r1, r19
 4ca:	14 06       	cpc	r1, r20
 4cc:	55 1f       	adc	r21, r21
 4ce:	f2 cf       	rjmp	.-28     	; 0x4b4 <__fp_split3+0xe>
 4d0:	46 95       	lsr	r20
 4d2:	f1 df       	rcall	.-30     	; 0x4b6 <__fp_splitA>
 4d4:	08 c0       	rjmp	.+16     	; 0x4e6 <__fp_splitA+0x30>
 4d6:	16 16       	cp	r1, r22
 4d8:	17 06       	cpc	r1, r23
 4da:	18 06       	cpc	r1, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	f1 cf       	rjmp	.-30     	; 0x4c2 <__fp_splitA+0xc>
 4e0:	86 95       	lsr	r24
 4e2:	71 05       	cpc	r23, r1
 4e4:	61 05       	cpc	r22, r1
 4e6:	08 94       	sec
 4e8:	08 95       	ret

000004ea <__fp_zero>:
 4ea:	e8 94       	clt

000004ec <__fp_szero>:
 4ec:	bb 27       	eor	r27, r27
 4ee:	66 27       	eor	r22, r22
 4f0:	77 27       	eor	r23, r23
 4f2:	cb 01       	movw	r24, r22
 4f4:	97 f9       	bld	r25, 7
 4f6:	08 95       	ret

000004f8 <__mulsf3>:
 4f8:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3x>
 4fc:	0c 94 00 03 	jmp	0x600	; 0x600 <__fp_round>
 500:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__fp_pscA>
 504:	38 f0       	brcs	.+14     	; 0x514 <__mulsf3+0x1c>
 506:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fp_pscB>
 50a:	20 f0       	brcs	.+8      	; 0x514 <__mulsf3+0x1c>
 50c:	95 23       	and	r25, r21
 50e:	11 f0       	breq	.+4      	; 0x514 <__mulsf3+0x1c>
 510:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__fp_inf>
 514:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__fp_nan>
 518:	11 24       	eor	r1, r1
 51a:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_szero>

0000051e <__mulsf3x>:
 51e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__fp_split3>
 522:	70 f3       	brcs	.-36     	; 0x500 <__mulsf3+0x8>

00000524 <__mulsf3_pse>:
 524:	95 9f       	mul	r25, r21
 526:	c1 f3       	breq	.-16     	; 0x518 <__mulsf3+0x20>
 528:	95 0f       	add	r25, r21
 52a:	50 e0       	ldi	r21, 0x00	; 0
 52c:	55 1f       	adc	r21, r21
 52e:	62 9f       	mul	r22, r18
 530:	f0 01       	movw	r30, r0
 532:	72 9f       	mul	r23, r18
 534:	bb 27       	eor	r27, r27
 536:	f0 0d       	add	r31, r0
 538:	b1 1d       	adc	r27, r1
 53a:	63 9f       	mul	r22, r19
 53c:	aa 27       	eor	r26, r26
 53e:	f0 0d       	add	r31, r0
 540:	b1 1d       	adc	r27, r1
 542:	aa 1f       	adc	r26, r26
 544:	64 9f       	mul	r22, r20
 546:	66 27       	eor	r22, r22
 548:	b0 0d       	add	r27, r0
 54a:	a1 1d       	adc	r26, r1
 54c:	66 1f       	adc	r22, r22
 54e:	82 9f       	mul	r24, r18
 550:	22 27       	eor	r18, r18
 552:	b0 0d       	add	r27, r0
 554:	a1 1d       	adc	r26, r1
 556:	62 1f       	adc	r22, r18
 558:	73 9f       	mul	r23, r19
 55a:	b0 0d       	add	r27, r0
 55c:	a1 1d       	adc	r26, r1
 55e:	62 1f       	adc	r22, r18
 560:	83 9f       	mul	r24, r19
 562:	a0 0d       	add	r26, r0
 564:	61 1d       	adc	r22, r1
 566:	22 1f       	adc	r18, r18
 568:	74 9f       	mul	r23, r20
 56a:	33 27       	eor	r19, r19
 56c:	a0 0d       	add	r26, r0
 56e:	61 1d       	adc	r22, r1
 570:	23 1f       	adc	r18, r19
 572:	84 9f       	mul	r24, r20
 574:	60 0d       	add	r22, r0
 576:	21 1d       	adc	r18, r1
 578:	82 2f       	mov	r24, r18
 57a:	76 2f       	mov	r23, r22
 57c:	6a 2f       	mov	r22, r26
 57e:	11 24       	eor	r1, r1
 580:	9f 57       	subi	r25, 0x7F	; 127
 582:	50 40       	sbci	r21, 0x00	; 0
 584:	9a f0       	brmi	.+38     	; 0x5ac <__mulsf3_pse+0x88>
 586:	f1 f0       	breq	.+60     	; 0x5c4 <__mulsf3_pse+0xa0>
 588:	88 23       	and	r24, r24
 58a:	4a f0       	brmi	.+18     	; 0x59e <__mulsf3_pse+0x7a>
 58c:	ee 0f       	add	r30, r30
 58e:	ff 1f       	adc	r31, r31
 590:	bb 1f       	adc	r27, r27
 592:	66 1f       	adc	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	88 1f       	adc	r24, r24
 598:	91 50       	subi	r25, 0x01	; 1
 59a:	50 40       	sbci	r21, 0x00	; 0
 59c:	a9 f7       	brne	.-22     	; 0x588 <__mulsf3_pse+0x64>
 59e:	9e 3f       	cpi	r25, 0xFE	; 254
 5a0:	51 05       	cpc	r21, r1
 5a2:	80 f0       	brcs	.+32     	; 0x5c4 <__mulsf3_pse+0xa0>
 5a4:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__fp_inf>
 5a8:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_szero>
 5ac:	5f 3f       	cpi	r21, 0xFF	; 255
 5ae:	e4 f3       	brlt	.-8      	; 0x5a8 <__mulsf3_pse+0x84>
 5b0:	98 3e       	cpi	r25, 0xE8	; 232
 5b2:	d4 f3       	brlt	.-12     	; 0x5a8 <__mulsf3_pse+0x84>
 5b4:	86 95       	lsr	r24
 5b6:	77 95       	ror	r23
 5b8:	67 95       	ror	r22
 5ba:	b7 95       	ror	r27
 5bc:	f7 95       	ror	r31
 5be:	e7 95       	ror	r30
 5c0:	9f 5f       	subi	r25, 0xFF	; 255
 5c2:	c1 f7       	brne	.-16     	; 0x5b4 <__mulsf3_pse+0x90>
 5c4:	fe 2b       	or	r31, r30
 5c6:	88 0f       	add	r24, r24
 5c8:	91 1d       	adc	r25, r1
 5ca:	96 95       	lsr	r25
 5cc:	87 95       	ror	r24
 5ce:	97 f9       	bld	r25, 7
 5d0:	08 95       	ret

000005d2 <__fp_inf>:
 5d2:	97 f9       	bld	r25, 7
 5d4:	9f 67       	ori	r25, 0x7F	; 127
 5d6:	80 e8       	ldi	r24, 0x80	; 128
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	08 95       	ret

000005de <__fp_nan>:
 5de:	9f ef       	ldi	r25, 0xFF	; 255
 5e0:	80 ec       	ldi	r24, 0xC0	; 192
 5e2:	08 95       	ret

000005e4 <__fp_pscA>:
 5e4:	00 24       	eor	r0, r0
 5e6:	0a 94       	dec	r0
 5e8:	16 16       	cp	r1, r22
 5ea:	17 06       	cpc	r1, r23
 5ec:	18 06       	cpc	r1, r24
 5ee:	09 06       	cpc	r0, r25
 5f0:	08 95       	ret

000005f2 <__fp_pscB>:
 5f2:	00 24       	eor	r0, r0
 5f4:	0a 94       	dec	r0
 5f6:	12 16       	cp	r1, r18
 5f8:	13 06       	cpc	r1, r19
 5fa:	14 06       	cpc	r1, r20
 5fc:	05 06       	cpc	r0, r21
 5fe:	08 95       	ret

00000600 <__fp_round>:
 600:	09 2e       	mov	r0, r25
 602:	03 94       	inc	r0
 604:	00 0c       	add	r0, r0
 606:	11 f4       	brne	.+4      	; 0x60c <__fp_round+0xc>
 608:	88 23       	and	r24, r24
 60a:	52 f0       	brmi	.+20     	; 0x620 <__fp_round+0x20>
 60c:	bb 0f       	add	r27, r27
 60e:	40 f4       	brcc	.+16     	; 0x620 <__fp_round+0x20>
 610:	bf 2b       	or	r27, r31
 612:	11 f4       	brne	.+4      	; 0x618 <__fp_round+0x18>
 614:	60 ff       	sbrs	r22, 0
 616:	04 c0       	rjmp	.+8      	; 0x620 <__fp_round+0x20>
 618:	6f 5f       	subi	r22, 0xFF	; 255
 61a:	7f 4f       	sbci	r23, 0xFF	; 255
 61c:	8f 4f       	sbci	r24, 0xFF	; 255
 61e:	9f 4f       	sbci	r25, 0xFF	; 255
 620:	08 95       	ret

00000622 <_exit>:
 622:	f8 94       	cli

00000624 <__stop_program>:
 624:	ff cf       	rjmp	.-2      	; 0x624 <__stop_program>
