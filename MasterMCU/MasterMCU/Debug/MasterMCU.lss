
MasterMCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000107a  0000110e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000107a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800118  00800118  00001126  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001126  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001163  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a73  00000000  00000000  00002447  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bbe  00000000  00000000  00002eba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00003a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005db  00000000  00000000  00003d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a07  00000000  00000000  000042f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004cfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e7       	ldi	r30, 0x7A	; 122
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 31       	cpi	r26, 0x18	; 24
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a8 e1       	ldi	r26, 0x18	; 24
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 32       	cpi	r26, 0x24	; 36
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b9 02 	call	0x572	; 0x572 <main>
      9e:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_SETTING_MASTER>:
	
	address <<= 1;  //Ubica la dirección y
	address |= 0x01; //habilita para reconocer las llamadas generales de I2C
	TWAR = address;
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
      a6:	cf 93       	push	r28
      a8:	c8 2f       	mov	r28, r24
      aa:	9a 01       	movw	r18, r20
      ac:	ab 01       	movw	r20, r22
      ae:	87 b1       	in	r24, 0x07	; 7
      b0:	8f 7c       	andi	r24, 0xCF	; 207
      b2:	87 b9       	out	0x07, r24	; 7
      b4:	60 e0       	ldi	r22, 0x00	; 0
      b6:	74 e2       	ldi	r23, 0x24	; 36
      b8:	84 ef       	ldi	r24, 0xF4	; 244
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__udivmodsi4>
      c0:	ca 01       	movw	r24, r20
      c2:	b9 01       	movw	r22, r18
      c4:	60 51       	subi	r22, 0x10	; 16
      c6:	71 09       	sbc	r23, r1
      c8:	81 09       	sbc	r24, r1
      ca:	91 09       	sbc	r25, r1
      cc:	2c 2f       	mov	r18, r28
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	22 0f       	add	r18, r18
      d2:	33 1f       	adc	r19, r19
      d4:	03 2e       	mov	r0, r19
      d6:	00 0c       	add	r0, r0
      d8:	44 0b       	sbc	r20, r20
      da:	55 0b       	sbc	r21, r21
      dc:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__udivmodsi4>
      e0:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
      e4:	c4 30       	cpi	r28, 0x04	; 4
      e6:	79 f0       	breq	.+30     	; 0x106 <I2C_SETTING_MASTER+0x60>
      e8:	18 f4       	brcc	.+6      	; 0xf0 <I2C_SETTING_MASTER+0x4a>
      ea:	c1 30       	cpi	r28, 0x01	; 1
      ec:	31 f0       	breq	.+12     	; 0xfa <I2C_SETTING_MASTER+0x54>
      ee:	23 c0       	rjmp	.+70     	; 0x136 <I2C_SETTING_MASTER+0x90>
      f0:	c0 31       	cpi	r28, 0x10	; 16
      f2:	91 f0       	breq	.+36     	; 0x118 <I2C_SETTING_MASTER+0x72>
      f4:	c0 34       	cpi	r28, 0x40	; 64
      f6:	c9 f0       	breq	.+50     	; 0x12a <I2C_SETTING_MASTER+0x84>
      f8:	1e c0       	rjmp	.+60     	; 0x136 <I2C_SETTING_MASTER+0x90>
      fa:	e9 eb       	ldi	r30, 0xB9	; 185
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	80 81       	ld	r24, Z
     100:	8c 7f       	andi	r24, 0xFC	; 252
     102:	80 83       	st	Z, r24
     104:	1d c0       	rjmp	.+58     	; 0x140 <I2C_SETTING_MASTER+0x9a>
     106:	e9 eb       	ldi	r30, 0xB9	; 185
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	8d 7f       	andi	r24, 0xFD	; 253
     10e:	80 83       	st	Z, r24
     110:	80 81       	ld	r24, Z
     112:	81 60       	ori	r24, 0x01	; 1
     114:	80 83       	st	Z, r24
     116:	14 c0       	rjmp	.+40     	; 0x140 <I2C_SETTING_MASTER+0x9a>
     118:	e9 eb       	ldi	r30, 0xB9	; 185
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	80 81       	ld	r24, Z
     11e:	8e 7f       	andi	r24, 0xFE	; 254
     120:	80 83       	st	Z, r24
     122:	80 81       	ld	r24, Z
     124:	82 60       	ori	r24, 0x02	; 2
     126:	80 83       	st	Z, r24
     128:	0b c0       	rjmp	.+22     	; 0x140 <I2C_SETTING_MASTER+0x9a>
     12a:	e9 eb       	ldi	r30, 0xB9	; 185
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	8d 6f       	ori	r24, 0xFD	; 253
     132:	80 83       	st	Z, r24
     134:	05 c0       	rjmp	.+10     	; 0x140 <I2C_SETTING_MASTER+0x9a>
     136:	e9 eb       	ldi	r30, 0xB9	; 185
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	8c 7f       	andi	r24, 0xFC	; 252
     13e:	80 83       	st	Z, r24
     140:	84 e0       	ldi	r24, 0x04	; 4
     142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     146:	cf 91       	pop	r28
     148:	08 95       	ret

0000014a <I2C_INIT>:
}


uint8_t I2C_INIT(){
	uint8_t estado;  //Variable que indica que no se consiguió el bus 
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA); //Condición de inicio
     14a:	84 ea       	ldi	r24, 0xA4	; 164
     14c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));  //Espera la bandera TWINT
     150:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     154:	88 23       	and	r24, r24
     156:	e4 f7       	brge	.-8      	; 0x150 <I2C_INIT+0x6>
	estado = TWSR & 0xF8; //Obtiene el estado, 1 condicion de inicio, o 2 inicio repetido
     158:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     15c:	88 7f       	andi	r24, 0xF8	; 248
	
	if (estado == 0x08 || estado == 0x10) 
     15e:	88 30       	cpi	r24, 0x08	; 8
     160:	21 f0       	breq	.+8      	; 0x16a <I2C_INIT+0x20>
     162:	80 31       	cpi	r24, 0x10	; 16
     164:	19 f4       	brne	.+6      	; 0x16c <I2C_INIT+0x22>
	{
		return 1;
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	08 95       	ret
     16a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return estado;  
	
}
     16c:	08 95       	ret

0000016e <I2C_WRITE>:
//Regresa: 0x01 envio sin problemas, edo, si el dato no se envio como se esperaba

uint8_t I2C_WRITE(uint8_t dato){
	uint8_t estado;
	
	TWDR = dato;      //Carga el dato   
     16e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);   //Inicia el envio
     172:	84 e8       	ldi	r24, 0x84	; 132
     174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while (!(TWCR & (1 << TWINT))); //espera la bandera TWINT
     178:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     17c:	88 23       	and	r24, r24
     17e:	e4 f7       	brge	.-8      	; 0x178 <I2C_WRITE+0xa>
	estado = TWSR & 0xF8; //Obtiene el estado
     180:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     184:	88 7f       	andi	r24, 0xF8	; 248
	
	    //Hay 3 posibilidades de éxito:
	if (estado == 0x18 || estado == 0x28 || estado == 0x40)  //Transmitió una SLA+W CON ACK, transimitió una SLA+R con ACK, Transmitió un dato con ACK
     186:	88 31       	cpi	r24, 0x18	; 24
     188:	31 f0       	breq	.+12     	; 0x196 <I2C_WRITE+0x28>
     18a:	88 32       	cpi	r24, 0x28	; 40
     18c:	31 f0       	breq	.+12     	; 0x19a <I2C_WRITE+0x2c>
     18e:	80 34       	cpi	r24, 0x40	; 64
     190:	29 f4       	brne	.+10     	; 0x19c <I2C_WRITE+0x2e>
	{
		return 0x01;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	08 95       	ret
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	08 95       	ret
     19a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return estado;   //So hay algún error
	
}
     19c:	08 95       	ret

0000019e <I2C_STOP>:

void I2C_STOP(){
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);  //Condición de Paro
     19e:	84 e9       	ldi	r24, 0x94	; 148
     1a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (TWCR & (1 << TWSTO));  //El bit se limpia por HW
     1a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1a8:	84 fd       	sbrc	r24, 4
     1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <I2C_STOP+0x6>
}
     1ac:	08 95       	ret

000001ae <I2C_SLAVE>:

void I2C_SLAVE(uint8_t dato, uint8_t address){
     1ae:	cf 93       	push	r28
     1b0:	c8 2f       	mov	r28, r24
	esclavo = address;  //Dirección del esclavo
	esclavo = esclavo << 1;    //Compone la SLA+W*************************************************************************
     1b2:	66 0f       	add	r22, r22
     1b4:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <esclavo>
	
	
	aux = I2C_INIT();   //Condicion de inicio
     1b8:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_INIT>
     1bc:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <aux>
	if (aux != 0x01)  //Si no se establece la conexión
     1c0:	81 30       	cpi	r24, 0x01	; 1
     1c2:	31 f0       	breq	.+12     	; 0x1d0 <I2C_SLAVE+0x22>
	{
		TWCR |= (1 << TWINT);  //Borrar la bandera
     1c4:	ec eb       	ldi	r30, 0xBC	; 188
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	80 68       	ori	r24, 0x80	; 128
     1cc:	80 83       	st	Z, r24
		return;   //No continua
     1ce:	10 c0       	rjmp	.+32     	; 0x1f0 <I2C_SLAVE+0x42>
	}
	
	aux = I2C_WRITE(esclavo);     //Direcciona con la SLA+W
     1d0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <esclavo>
     1d4:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_WRITE>
     1d8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <aux>
	if (aux != 0x01)   //Si hay algun error de comunicación
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	19 f0       	breq	.+6      	; 0x1e6 <I2C_SLAVE+0x38>
	{
		I2C_STOP();  //No continua, termina la comunicación y la cierra
     1e0:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_STOP>
		return;   
     1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <I2C_SLAVE+0x42>
	}
	
	I2C_WRITE(dato);   //Envia el dato al esclavo
     1e6:	8c 2f       	mov	r24, r28
     1e8:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_WRITE>
	I2C_STOP();  //No continua, termina la comunicación y la cierra
     1ec:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_STOP>
	
	
}
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <I2C_READ>:

// Lee un byte de datos del esclavo I2C
uint8_t I2C_READ(uint8_t address, uint8_t *dato) {
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
     1f8:	94 ea       	ldi	r25, 0xA4	; 164
     1fa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
     1fe:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     202:	99 23       	and	r25, r25
     204:	e4 f7       	brge	.-8      	; 0x1fe <I2C_READ+0xa>

	// Verificar condición de START
	if ((TWSR & 0xF8) != TW_START) {
     206:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     20a:	98 7f       	andi	r25, 0xF8	; 248
     20c:	98 30       	cpi	r25, 0x08	; 8
     20e:	b1 f5       	brne	.+108    	; 0x27c <I2C_READ+0x88>
		return 1; // Error: No se pudo iniciar la condición de START
	}

	// Enviar dirección del esclavo con bit de lectura
	TWDR = SLA_R(address);
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	81 60       	ori	r24, 0x01	; 1
     218:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
     21c:	84 e8       	ldi	r24, 0x84	; 132
     21e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete la transmisión de la dirección
     222:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     226:	88 23       	and	r24, r24
     228:	e4 f7       	brge	.-8      	; 0x222 <I2C_READ+0x2e>
     22a:	eb 01       	movw	r28, r22

	// Verificar ACK/NACK de la dirección
	uint8_t twsr_value = TWSR & 0xF8;
     22c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     230:	88 7f       	andi	r24, 0xF8	; 248
	if (twsr_value == TW_MR_SLA_NACK) {
     232:	88 34       	cpi	r24, 0x48	; 72
     234:	21 f4       	brne	.+8      	; 0x23e <I2C_READ+0x4a>
		I2C_STOP(); // Detener si se recibe un NACK
     236:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_STOP>
		return 1; // Error: NACK recibido
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	20 c0       	rjmp	.+64     	; 0x27e <I2C_READ+0x8a>
		} else if (twsr_value != TW_MR_SLA_ACK) {
     23e:	80 34       	cpi	r24, 0x40	; 64
     240:	21 f0       	breq	.+8      	; 0x24a <I2C_READ+0x56>
		I2C_STOP(); // Detener si otro estado inesperado
     242:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_STOP>
		return 1; // Error: Estado inesperado
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	1a c0       	rjmp	.+52     	; 0x27e <I2C_READ+0x8a>
	}

	// Leer un byte del esclavo
	TWCR = (1 << TWEN) | (1 << TWINT); // Leer sin ACK (NACK)
     24a:	84 e8       	ldi	r24, 0x84	; 132
     24c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete la recepción
     250:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     254:	88 23       	and	r24, r24
     256:	e4 f7       	brge	.-8      	; 0x250 <I2C_READ+0x5c>

	// Verificar estado de recepción
	twsr_value = TWSR & 0xF8;
     258:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     25c:	88 7f       	andi	r24, 0xF8	; 248
	if (twsr_value != TW_MR_DATA_NACK && twsr_value != TW_MR_DATA_ACK) {
     25e:	88 35       	cpi	r24, 0x58	; 88
     260:	31 f0       	breq	.+12     	; 0x26e <I2C_READ+0x7a>
     262:	80 35       	cpi	r24, 0x50	; 80
     264:	21 f0       	breq	.+8      	; 0x26e <I2C_READ+0x7a>
		I2C_STOP(); // Detener si hay error en la recepción
     266:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_STOP>
		return 1; // Error en la recepción
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	08 c0       	rjmp	.+16     	; 0x27e <I2C_READ+0x8a>
	}

	// Leer el dato recibido
	*dato = TWDR;
     26e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     272:	88 83       	st	Y, r24

	// Generar condición de STOP
      I2C_STOP();
     274:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_STOP>
  
	return  *dato; // Éxito
     278:	88 81       	ld	r24, Y
     27a:	01 c0       	rjmp	.+2      	; 0x27e <I2C_READ+0x8a>
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete

	// Verificar condición de START
	if ((TWSR & 0xF8) != TW_START) {
		return 1; // Error: No se pudo iniciar la condición de START
     27c:	81 e0       	ldi	r24, 0x01	; 1

	// Generar condición de STOP
      I2C_STOP();
  
	return  *dato; // Éxito
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	08 95       	ret

00000284 <LCD_Port>:
}

//Desplazamiento hacia la izquierda
void LCD_Shift_Left(void){
	LCD_CMD(0x01);
	LCD_CMD(0x08);
     284:	80 ff       	sbrs	r24, 0
     286:	04 c0       	rjmp	.+8      	; 0x290 <LCD_Port+0xc>
     288:	9b b1       	in	r25, 0x0b	; 11
     28a:	90 61       	ori	r25, 0x10	; 16
     28c:	9b b9       	out	0x0b, r25	; 11
     28e:	03 c0       	rjmp	.+6      	; 0x296 <LCD_Port+0x12>
     290:	9b b1       	in	r25, 0x0b	; 11
     292:	9f 7e       	andi	r25, 0xEF	; 239
     294:	9b b9       	out	0x0b, r25	; 11
     296:	81 ff       	sbrs	r24, 1
     298:	04 c0       	rjmp	.+8      	; 0x2a2 <LCD_Port+0x1e>
     29a:	9b b1       	in	r25, 0x0b	; 11
     29c:	90 62       	ori	r25, 0x20	; 32
     29e:	9b b9       	out	0x0b, r25	; 11
     2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <LCD_Port+0x24>
     2a2:	9b b1       	in	r25, 0x0b	; 11
     2a4:	9f 7d       	andi	r25, 0xDF	; 223
     2a6:	9b b9       	out	0x0b, r25	; 11
     2a8:	82 ff       	sbrs	r24, 2
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <LCD_Port+0x30>
     2ac:	9b b1       	in	r25, 0x0b	; 11
     2ae:	90 64       	ori	r25, 0x40	; 64
     2b0:	9b b9       	out	0x0b, r25	; 11
     2b2:	03 c0       	rjmp	.+6      	; 0x2ba <LCD_Port+0x36>
     2b4:	9b b1       	in	r25, 0x0b	; 11
     2b6:	9f 7b       	andi	r25, 0xBF	; 191
     2b8:	9b b9       	out	0x0b, r25	; 11
     2ba:	83 ff       	sbrs	r24, 3
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <LCD_Port+0x42>
     2be:	9b b1       	in	r25, 0x0b	; 11
     2c0:	90 68       	ori	r25, 0x80	; 128
     2c2:	9b b9       	out	0x0b, r25	; 11
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <LCD_Port+0x48>
     2c6:	9b b1       	in	r25, 0x0b	; 11
     2c8:	9f 77       	andi	r25, 0x7F	; 127
     2ca:	9b b9       	out	0x0b, r25	; 11
     2cc:	84 ff       	sbrs	r24, 4
     2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <LCD_Port+0x54>
     2d0:	95 b1       	in	r25, 0x05	; 5
     2d2:	91 60       	ori	r25, 0x01	; 1
     2d4:	95 b9       	out	0x05, r25	; 5
     2d6:	03 c0       	rjmp	.+6      	; 0x2de <LCD_Port+0x5a>
     2d8:	95 b1       	in	r25, 0x05	; 5
     2da:	9e 7f       	andi	r25, 0xFE	; 254
     2dc:	95 b9       	out	0x05, r25	; 5
     2de:	85 ff       	sbrs	r24, 5
     2e0:	04 c0       	rjmp	.+8      	; 0x2ea <LCD_Port+0x66>
     2e2:	95 b1       	in	r25, 0x05	; 5
     2e4:	92 60       	ori	r25, 0x02	; 2
     2e6:	95 b9       	out	0x05, r25	; 5
     2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <LCD_Port+0x6c>
     2ea:	95 b1       	in	r25, 0x05	; 5
     2ec:	9d 7f       	andi	r25, 0xFD	; 253
     2ee:	95 b9       	out	0x05, r25	; 5
     2f0:	86 ff       	sbrs	r24, 6
     2f2:	04 c0       	rjmp	.+8      	; 0x2fc <LCD_Port+0x78>
     2f4:	95 b1       	in	r25, 0x05	; 5
     2f6:	94 60       	ori	r25, 0x04	; 4
     2f8:	95 b9       	out	0x05, r25	; 5
     2fa:	03 c0       	rjmp	.+6      	; 0x302 <LCD_Port+0x7e>
     2fc:	95 b1       	in	r25, 0x05	; 5
     2fe:	9b 7f       	andi	r25, 0xFB	; 251
     300:	95 b9       	out	0x05, r25	; 5
     302:	88 23       	and	r24, r24
     304:	24 f4       	brge	.+8      	; 0x30e <LCD_Port+0x8a>
     306:	85 b1       	in	r24, 0x05	; 5
     308:	88 60       	ori	r24, 0x08	; 8
     30a:	85 b9       	out	0x05, r24	; 5
     30c:	08 95       	ret
     30e:	85 b1       	in	r24, 0x05	; 5
     310:	87 7f       	andi	r24, 0xF7	; 247
     312:	85 b9       	out	0x05, r24	; 5
     314:	08 95       	ret

00000316 <LCD_CMD>:
     316:	9b b1       	in	r25, 0x0b	; 11
     318:	9b 7f       	andi	r25, 0xFB	; 251
     31a:	9b b9       	out	0x0b, r25	; 11
     31c:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Port>
     320:	8b b1       	in	r24, 0x0b	; 11
     322:	88 60       	ori	r24, 0x08	; 8
     324:	8b b9       	out	0x0b, r24	; 11
     326:	8f e7       	ldi	r24, 0x7F	; 127
     328:	9e e3       	ldi	r25, 0x3E	; 62
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_CMD+0x14>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_CMD+0x1a>
     330:	00 00       	nop
     332:	8b b1       	in	r24, 0x0b	; 11
     334:	87 7f       	andi	r24, 0xF7	; 247
     336:	8b b9       	out	0x0b, r24	; 11
     338:	8f e7       	ldi	r24, 0x7F	; 127
     33a:	9e e3       	ldi	r25, 0x3E	; 62
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <LCD_CMD+0x26>
     340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_CMD+0x2c>
     342:	00 00       	nop
     344:	08 95       	ret

00000346 <init_8bits_LCD>:
     346:	84 b1       	in	r24, 0x04	; 4
     348:	8f 60       	ori	r24, 0x0F	; 15
     34a:	84 b9       	out	0x04, r24	; 4
     34c:	15 b8       	out	0x05, r1	; 5
     34e:	8a b1       	in	r24, 0x0a	; 10
     350:	8c 6f       	ori	r24, 0xFC	; 252
     352:	8a b9       	out	0x0a, r24	; 10
     354:	1b b8       	out	0x0b, r1	; 11
     356:	8b b1       	in	r24, 0x0b	; 11
     358:	83 7f       	andi	r24, 0xF3	; 243
     35a:	8b b9       	out	0x0b, r24	; 11
     35c:	2f ef       	ldi	r18, 0xFF	; 255
     35e:	89 ef       	ldi	r24, 0xF9	; 249
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	21 50       	subi	r18, 0x01	; 1
     364:	80 40       	sbci	r24, 0x00	; 0
     366:	90 40       	sbci	r25, 0x00	; 0
     368:	e1 f7       	brne	.-8      	; 0x362 <init_8bits_LCD+0x1c>
     36a:	00 c0       	rjmp	.+0      	; 0x36c <init_8bits_LCD+0x26>
     36c:	00 00       	nop
     36e:	80 e3       	ldi	r24, 0x30	; 48
     370:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_CMD>
     374:	8f e1       	ldi	r24, 0x1F	; 31
     376:	9e e4       	ldi	r25, 0x4E	; 78
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <init_8bits_LCD+0x32>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <init_8bits_LCD+0x38>
     37e:	00 00       	nop
     380:	80 e3       	ldi	r24, 0x30	; 48
     382:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_CMD>
     386:	8f e1       	ldi	r24, 0x1F	; 31
     388:	9e e4       	ldi	r25, 0x4E	; 78
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	f1 f7       	brne	.-4      	; 0x38a <init_8bits_LCD+0x44>
     38e:	00 c0       	rjmp	.+0      	; 0x390 <init_8bits_LCD+0x4a>
     390:	00 00       	nop
     392:	80 e3       	ldi	r24, 0x30	; 48
     394:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_CMD>
     398:	8f e3       	ldi	r24, 0x3F	; 63
     39a:	9c e9       	ldi	r25, 0x9C	; 156
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <init_8bits_LCD+0x56>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <init_8bits_LCD+0x5c>
     3a2:	00 00       	nop
     3a4:	88 e3       	ldi	r24, 0x38	; 56
     3a6:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_CMD>
     3aa:	88 e0       	ldi	r24, 0x08	; 8
     3ac:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_CMD>
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_CMD>
     3b6:	86 e0       	ldi	r24, 0x06	; 6
     3b8:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_CMD>
     3bc:	8c e0       	ldi	r24, 0x0C	; 12
     3be:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_CMD>
     3c2:	08 95       	ret

000003c4 <LCD_Write_Char>:
     3c4:	9b b1       	in	r25, 0x0b	; 11
     3c6:	94 60       	ori	r25, 0x04	; 4
     3c8:	9b b9       	out	0x0b, r25	; 11
     3ca:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Port>
     3ce:	8b b1       	in	r24, 0x0b	; 11
     3d0:	88 60       	ori	r24, 0x08	; 8
     3d2:	8b b9       	out	0x0b, r24	; 11
     3d4:	8f e7       	ldi	r24, 0x7F	; 127
     3d6:	9e e3       	ldi	r25, 0x3E	; 62
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <LCD_Write_Char+0x14>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <LCD_Write_Char+0x1a>
     3de:	00 00       	nop
     3e0:	8b b1       	in	r24, 0x0b	; 11
     3e2:	87 7f       	andi	r24, 0xF7	; 247
     3e4:	8b b9       	out	0x0b, r24	; 11
     3e6:	8f e7       	ldi	r24, 0x7F	; 127
     3e8:	9e e3       	ldi	r25, 0x3E	; 62
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCD_Write_Char+0x26>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCD_Write_Char+0x2c>
     3f0:	00 00       	nop
     3f2:	08 95       	ret

000003f4 <LCD_Write_String>:
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	8c 01       	movw	r16, r24
     3fe:	c0 e0       	ldi	r28, 0x00	; 0
     400:	d0 e0       	ldi	r29, 0x00	; 0
     402:	03 c0       	rjmp	.+6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     404:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_Write_Char>
     408:	21 96       	adiw	r28, 0x01	; 1
     40a:	f8 01       	movw	r30, r16
     40c:	ec 0f       	add	r30, r28
     40e:	fd 1f       	adc	r31, r29
     410:	80 81       	ld	r24, Z
     412:	81 11       	cpse	r24, r1
     414:	f7 cf       	rjmp	.-18     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	08 95       	ret

00000420 <LCD_Set_Cursor>:
		z = temp >> 4;
		y = temp & 0x0F;
		LCD_CMD(z);
		LCD_CMD(y);
	}*/
	if(a == 0)
     420:	81 11       	cpse	r24, r1
     422:	05 c0       	rjmp	.+10     	; 0x42e <LCD_Set_Cursor+0xe>
	LCD_CMD(0x80 + b);  //Posicionarse en la linea 1 y se suma la columna
     424:	80 e8       	ldi	r24, 0x80	; 128
     426:	86 0f       	add	r24, r22
     428:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_CMD>
     42c:	08 95       	ret
	
	else if(a == 1)
     42e:	81 30       	cpi	r24, 0x01	; 1
     430:	21 f4       	brne	.+8      	; 0x43a <LCD_Set_Cursor+0x1a>
	LCD_CMD(0xC0 + b);  //Posicionarse en la linea 2  y se suma la columna
     432:	80 ec       	ldi	r24, 0xC0	; 192
     434:	86 0f       	add	r24, r22
     436:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_CMD>
     43a:	08 95       	ret

0000043c <__vector_18>:
}


// Vector de interrupcion UART
ISR(USART_RX_vect)
{
     43c:	1f 92       	push	r1
     43e:	0f 92       	push	r0
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	0f 92       	push	r0
     444:	11 24       	eor	r1, r1
     446:	2f 93       	push	r18
     448:	3f 93       	push	r19
     44a:	4f 93       	push	r20
     44c:	5f 93       	push	r21
     44e:	6f 93       	push	r22
     450:	7f 93       	push	r23
     452:	8f 93       	push	r24
     454:	9f 93       	push	r25
     456:	af 93       	push	r26
     458:	bf 93       	push	r27
     45a:	ef 93       	push	r30
     45c:	ff 93       	push	r31
	BufferRX = UDR0;
     45e:	e6 ec       	ldi	r30, 0xC6	; 198
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <BufferRX>
	// En funcion de lo que se haya recibido se ejecutara una accion
	if (UDR0 == 'b'){
     468:	80 81       	ld	r24, Z
     46a:	82 36       	cpi	r24, 0x62	; 98
     46c:	21 f4       	brne	.+8      	; 0x476 <__vector_18+0x3a>
		writeUART(BufferSensorHumedad);}
     46e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <BufferSensorHumedad>
     472:	0e 94 4f 03 	call	0x69e	; 0x69e <writeUART>
	if (UDR0 == 'a'){
     476:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     47a:	81 36       	cpi	r24, 0x61	; 97
     47c:	21 f4       	brne	.+8      	; 0x486 <__vector_18+0x4a>
		writeUART(BufferSensorTemperatura);}
     47e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <BufferSensorTemperatura>
     482:	0e 94 4f 03 	call	0x69e	; 0x69e <writeUART>
	if (UDR0 == '1'){
     486:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     48a:	81 33       	cpi	r24, 0x31	; 49
     48c:	21 f4       	brne	.+8      	; 0x496 <__vector_18+0x5a>
		I2C_SLAVE(1,sensorTemperatura);}
     48e:	60 e4       	ldi	r22, 0x40	; 64
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_SLAVE>
	if (UDR0 == '2'){
     496:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     49a:	82 33       	cpi	r24, 0x32	; 50
     49c:	21 f4       	brne	.+8      	; 0x4a6 <__vector_18+0x6a>
		I2C_SLAVE(2,sensorTemperatura);}
     49e:	60 e4       	ldi	r22, 0x40	; 64
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_SLAVE>
}
     4a6:	ff 91       	pop	r31
     4a8:	ef 91       	pop	r30
     4aa:	bf 91       	pop	r27
     4ac:	af 91       	pop	r26
     4ae:	9f 91       	pop	r25
     4b0:	8f 91       	pop	r24
     4b2:	7f 91       	pop	r23
     4b4:	6f 91       	pop	r22
     4b6:	5f 91       	pop	r21
     4b8:	4f 91       	pop	r20
     4ba:	3f 91       	pop	r19
     4bc:	2f 91       	pop	r18
     4be:	0f 90       	pop	r0
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	0f 90       	pop	r0
     4c4:	1f 90       	pop	r1
     4c6:	18 95       	reti

000004c8 <float_to_char_s1>:


// Subrutina para convertir una variable de tipo float (con valores decimales) a una cadena Char
void float_to_char_s1(uint8_t value_adch){
     4c8:	cf 92       	push	r12
     4ca:	df 92       	push	r13
     4cc:	ef 92       	push	r14
     4ce:	ff 92       	push	r15
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
	int a, b;									// Se designa el tipo de variable de a y b
	voltage = (float)value_adch * 100.0f/255.0f;		// Se realizar una regla de 3 para escalar [0-255] a [0.00-100.00]
     4d4:	68 2f       	mov	r22, r24
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__floatunsisf>
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	48 ec       	ldi	r20, 0xC8	; 200
     4e6:	52 e4       	ldi	r21, 0x42	; 66
     4e8:	0e 94 8c 04 	call	0x918	; 0x918 <__mulsf3>
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	4f e7       	ldi	r20, 0x7F	; 127
     4f2:	53 e4       	ldi	r21, 0x43	; 67
     4f4:	0e 94 56 03 	call	0x6ac	; 0x6ac <__divsf3>
     4f8:	6b 01       	movw	r12, r22
     4fa:	7c 01       	movw	r14, r24
     4fc:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <voltage>
     500:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <voltage+0x1>
     504:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <voltage+0x2>
     508:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <voltage+0x3>
	
	a = (int)voltage;							// Se obtienen las cifras enteras de la variable float
     50c:	0e 94 c8 03 	call	0x790	; 0x790 <__fixsfsi>
     510:	c6 2f       	mov	r28, r22
     512:	d7 2f       	mov	r29, r23
	b = ((int)(voltage*100.0f))%100;				// Se obtienen las cifras decimales de la variable float
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	48 ec       	ldi	r20, 0xC8	; 200
     51a:	52 e4       	ldi	r21, 0x42	; 66
     51c:	c7 01       	movw	r24, r14
     51e:	b6 01       	movw	r22, r12
     520:	0e 94 8c 04 	call	0x918	; 0x918 <__mulsf3>
     524:	0e 94 c8 03 	call	0x790	; 0x790 <__fixsfsi>
     528:	cb 01       	movw	r24, r22
     52a:	64 e6       	ldi	r22, 0x64	; 100
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__divmodhi4>
	
	snprintf(buffer_s1, 5, "%d.%02d", a, b);		// Se convierte une todo en una cadena char
     532:	9f 93       	push	r25
     534:	8f 93       	push	r24
     536:	df 93       	push	r29
     538:	cf 93       	push	r28
     53a:	8b e0       	ldi	r24, 0x0B	; 11
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	1f 92       	push	r1
     544:	85 e0       	ldi	r24, 0x05	; 5
     546:	8f 93       	push	r24
     548:	86 e0       	ldi	r24, 0x06	; 6
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	9f 93       	push	r25
     54e:	8f 93       	push	r24
     550:	0e 94 43 05 	call	0xa86	; 0xa86 <snprintf>
     554:	8d b7       	in	r24, 0x3d	; 61
     556:	9e b7       	in	r25, 0x3e	; 62
     558:	0a 96       	adiw	r24, 0x0a	; 10
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	9e bf       	out	0x3e, r25	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	8d bf       	out	0x3d, r24	; 61
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	ff 90       	pop	r15
     56a:	ef 90       	pop	r14
     56c:	df 90       	pop	r13
     56e:	cf 90       	pop	r12
     570:	08 95       	ret

00000572 <main>:
uint8_t receivedChar;


int main(void)
{
	cli();						// Se apagan las interrupciones globales
     572:	f8 94       	cli
	DDRB |= 1<<DDB4;
     574:	84 b1       	in	r24, 0x04	; 4
     576:	80 61       	ori	r24, 0x10	; 16
     578:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~1<<PORTB4;
     57a:	85 b1       	in	r24, 0x05	; 5
     57c:	80 7e       	andi	r24, 0xE0	; 224
     57e:	85 b9       	out	0x05, r24	; 5
	init_8bits_LCD();			// Se inicializa la pantalla LCD
     580:	0e 94 a3 01 	call	0x346	; 0x346 <init_8bits_LCD>
	initUART9600();				// Se inicializa la comunicacion UART
     584:	0e 94 34 03 	call	0x668	; 0x668 <initUART9600>
	I2C_SETTING_MASTER(4, 200);	// Se inicializa el microcontrolador como Master I2C
     588:	48 ec       	ldi	r20, 0xC8	; 200
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	84 e0       	ldi	r24, 0x04	; 4
     592:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_SETTING_MASTER>
	sei();						// Se activan las interrupciones globales
     596:	78 94       	sei
	
	LCD_Set_Cursor(0,1);		// Se establece el cursor en y, x
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	0e 94 10 02 	call	0x420	; 0x420 <LCD_Set_Cursor>
	// Se escriben los siguientes caracteres en la pantalla
	LCD_Write_Char('H');
     5a0:	88 e4       	ldi	r24, 0x48	; 72
     5a2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_Write_Char>
	LCD_Write_Char('U');
     5a6:	85 e5       	ldi	r24, 0x55	; 85
     5a8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_Write_Char>
	LCD_Write_Char('M');
     5ac:	8d e4       	ldi	r24, 0x4D	; 77
     5ae:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_Write_Char>
	LCD_Write_Char('%');
     5b2:	85 e2       	ldi	r24, 0x25	; 37
     5b4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_Write_Char>
	
	LCD_Set_Cursor(0,7);		// Se establece el cursor en y, x
     5b8:	67 e0       	ldi	r22, 0x07	; 7
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	0e 94 10 02 	call	0x420	; 0x420 <LCD_Set_Cursor>
	// Se escriben los siguientes caracteres en la pantalla
	LCD_Write_Char('T');
     5c0:	84 e5       	ldi	r24, 0x54	; 84
     5c2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_Write_Char>
	LCD_Write_Char('M');
     5c6:	8d e4       	ldi	r24, 0x4D	; 77
     5c8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_Write_Char>
	LCD_Write_Char('P');
     5cc:	80 e5       	ldi	r24, 0x50	; 80
     5ce:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_Write_Char>
	
	LCD_Set_Cursor(0,12);		// Se establece el cursor en y, x
     5d2:	6c e0       	ldi	r22, 0x0C	; 12
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	0e 94 10 02 	call	0x420	; 0x420 <LCD_Set_Cursor>
	// Se escriben los siguientes caracteres en la pantalla
	LCD_Write_Char('I');
     5da:	89 e4       	ldi	r24, 0x49	; 73
     5dc:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_Write_Char>
	LCD_Write_Char('2');
     5e0:	82 e3       	ldi	r24, 0x32	; 50
     5e2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_Write_Char>
	LCD_Write_Char('C');
     5e6:	83 e4       	ldi	r24, 0x43	; 67
     5e8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_Write_Char>
	LCD_Write_Char('%');
	*/
	
    while (1) 
    {
		BufferSensorHumedad = I2C_READ(sensorHumedad, &data);
     5ec:	68 e1       	ldi	r22, 0x18	; 24
     5ee:	71 e0       	ldi	r23, 0x01	; 1
     5f0:	80 e3       	ldi	r24, 0x30	; 48
     5f2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <I2C_READ>
     5f6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <BufferSensorHumedad>
		float_to_char_s1(BufferSensorHumedad);
     5fa:	0e 94 64 02 	call	0x4c8	; 0x4c8 <float_to_char_s1>
		LCD_Set_Cursor(1,1);		// Se establece el cursor en y, x
     5fe:	61 e0       	ldi	r22, 0x01	; 1
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	0e 94 10 02 	call	0x420	; 0x420 <LCD_Set_Cursor>
		LCD_Write_String(buffer_s1);
     606:	86 e0       	ldi	r24, 0x06	; 6
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     60e:	8f e3       	ldi	r24, 0x3F	; 63
     610:	9c e9       	ldi	r25, 0x9C	; 156
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <main+0xa0>
     616:	00 c0       	rjmp	.+0      	; 0x618 <main+0xa6>
     618:	00 00       	nop
		
		_delay_ms(10);
		
		BufferSensorTemperatura = I2C_READ(sensorTemperatura, &data);
     61a:	68 e1       	ldi	r22, 0x18	; 24
     61c:	71 e0       	ldi	r23, 0x01	; 1
     61e:	80 e4       	ldi	r24, 0x40	; 64
     620:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <I2C_READ>
     624:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <BufferSensorTemperatura>
		snprintf(buffer_s2, sizeof(buffer_s2), "%dC", BufferSensorTemperatura);
     628:	1f 92       	push	r1
     62a:	8f 93       	push	r24
     62c:	83 e1       	ldi	r24, 0x13	; 19
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	9f 93       	push	r25
     632:	8f 93       	push	r24
     634:	1f 92       	push	r1
     636:	86 e0       	ldi	r24, 0x06	; 6
     638:	8f 93       	push	r24
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	9f 93       	push	r25
     640:	8f 93       	push	r24
     642:	0e 94 43 05 	call	0xa86	; 0xa86 <snprintf>
		LCD_Set_Cursor(1,7);		// Se establece el cursor en y, x
     646:	67 e0       	ldi	r22, 0x07	; 7
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	0e 94 10 02 	call	0x420	; 0x420 <LCD_Set_Cursor>
		LCD_Write_String(buffer_s2);
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_Write_String>
     656:	8d b7       	in	r24, 0x3d	; 61
     658:	9e b7       	in	r25, 0x3e	; 62
     65a:	08 96       	adiw	r24, 0x08	; 8
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	9e bf       	out	0x3e, r25	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	8d bf       	out	0x3d, r24	; 61
     666:	c2 cf       	rjmp	.-124    	; 0x5ec <main+0x7a>

00000668 <initUART9600>:
#include <stdint.h>

void initUART9600(void){
	
	//Paso 1: RX y TX como salida
	DDRD &= ~(1<<DDD0);
     668:	8a b1       	in	r24, 0x0a	; 10
     66a:	8e 7f       	andi	r24, 0xFE	; 254
     66c:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
     66e:	8a b1       	in	r24, 0x0a	; 10
     670:	82 60       	ori	r24, 0x02	; 2
     672:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2:Configurar UCSR0A
	UCSR0A = 0;
     674:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: configurar UCSR0B donde se habilita ISR de recepcion y se habilita RX y TX
	UCSR0B = 0;
     678:	e1 ec       	ldi	r30, 0xC1	; 193
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
     67e:	80 81       	ld	r24, Z
     680:	88 69       	ori	r24, 0x98	; 152
     682:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, asincrono, paridad: none, 1 bit stop, data bits de 8 bits
	UCSR0C = 0;
     684:	e2 ec       	ldi	r30, 0xC2	; 194
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
     68a:	80 81       	ld	r24, Z
     68c:	86 60       	ori	r24, 0x06	; 6
     68e:	80 83       	st	Z, r24
	
	//Paso 5: COnfigurar velocidad de baudrate a 9600
	UBRR0 = 103;
     690:	87 e6       	ldi	r24, 0x67	; 103
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     698:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     69c:	08 95       	ret

0000069e <writeUART>:
	
}

void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  // hasta que la bandera este en 1
     69e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     6a2:	95 ff       	sbrs	r25, 5
     6a4:	fc cf       	rjmp	.-8      	; 0x69e <writeUART>
	UDR0 = Caracter;				// Enviar el caracter al arduino
     6a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     6aa:	08 95       	ret

000006ac <__divsf3>:
     6ac:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__divsf3x>
     6b0:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_round>
     6b4:	0e 94 4b 04 	call	0x896	; 0x896 <__fp_pscB>
     6b8:	58 f0       	brcs	.+22     	; 0x6d0 <__divsf3+0x24>
     6ba:	0e 94 44 04 	call	0x888	; 0x888 <__fp_pscA>
     6be:	40 f0       	brcs	.+16     	; 0x6d0 <__divsf3+0x24>
     6c0:	29 f4       	brne	.+10     	; 0x6cc <__divsf3+0x20>
     6c2:	5f 3f       	cpi	r21, 0xFF	; 255
     6c4:	29 f0       	breq	.+10     	; 0x6d0 <__divsf3+0x24>
     6c6:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>
     6ca:	51 11       	cpse	r21, r1
     6cc:	0c 94 86 04 	jmp	0x90c	; 0x90c <__fp_szero>
     6d0:	0c 94 41 04 	jmp	0x882	; 0x882 <__fp_nan>

000006d4 <__divsf3x>:
     6d4:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_split3>
     6d8:	68 f3       	brcs	.-38     	; 0x6b4 <__divsf3+0x8>

000006da <__divsf3_pse>:
     6da:	99 23       	and	r25, r25
     6dc:	b1 f3       	breq	.-20     	; 0x6ca <__divsf3+0x1e>
     6de:	55 23       	and	r21, r21
     6e0:	91 f3       	breq	.-28     	; 0x6c6 <__divsf3+0x1a>
     6e2:	95 1b       	sub	r25, r21
     6e4:	55 0b       	sbc	r21, r21
     6e6:	bb 27       	eor	r27, r27
     6e8:	aa 27       	eor	r26, r26
     6ea:	62 17       	cp	r22, r18
     6ec:	73 07       	cpc	r23, r19
     6ee:	84 07       	cpc	r24, r20
     6f0:	38 f0       	brcs	.+14     	; 0x700 <__divsf3_pse+0x26>
     6f2:	9f 5f       	subi	r25, 0xFF	; 255
     6f4:	5f 4f       	sbci	r21, 0xFF	; 255
     6f6:	22 0f       	add	r18, r18
     6f8:	33 1f       	adc	r19, r19
     6fa:	44 1f       	adc	r20, r20
     6fc:	aa 1f       	adc	r26, r26
     6fe:	a9 f3       	breq	.-22     	; 0x6ea <__divsf3_pse+0x10>
     700:	35 d0       	rcall	.+106    	; 0x76c <__divsf3_pse+0x92>
     702:	0e 2e       	mov	r0, r30
     704:	3a f0       	brmi	.+14     	; 0x714 <__divsf3_pse+0x3a>
     706:	e0 e8       	ldi	r30, 0x80	; 128
     708:	32 d0       	rcall	.+100    	; 0x76e <__divsf3_pse+0x94>
     70a:	91 50       	subi	r25, 0x01	; 1
     70c:	50 40       	sbci	r21, 0x00	; 0
     70e:	e6 95       	lsr	r30
     710:	00 1c       	adc	r0, r0
     712:	ca f7       	brpl	.-14     	; 0x706 <__divsf3_pse+0x2c>
     714:	2b d0       	rcall	.+86     	; 0x76c <__divsf3_pse+0x92>
     716:	fe 2f       	mov	r31, r30
     718:	29 d0       	rcall	.+82     	; 0x76c <__divsf3_pse+0x92>
     71a:	66 0f       	add	r22, r22
     71c:	77 1f       	adc	r23, r23
     71e:	88 1f       	adc	r24, r24
     720:	bb 1f       	adc	r27, r27
     722:	26 17       	cp	r18, r22
     724:	37 07       	cpc	r19, r23
     726:	48 07       	cpc	r20, r24
     728:	ab 07       	cpc	r26, r27
     72a:	b0 e8       	ldi	r27, 0x80	; 128
     72c:	09 f0       	breq	.+2      	; 0x730 <__divsf3_pse+0x56>
     72e:	bb 0b       	sbc	r27, r27
     730:	80 2d       	mov	r24, r0
     732:	bf 01       	movw	r22, r30
     734:	ff 27       	eor	r31, r31
     736:	93 58       	subi	r25, 0x83	; 131
     738:	5f 4f       	sbci	r21, 0xFF	; 255
     73a:	3a f0       	brmi	.+14     	; 0x74a <__divsf3_pse+0x70>
     73c:	9e 3f       	cpi	r25, 0xFE	; 254
     73e:	51 05       	cpc	r21, r1
     740:	78 f0       	brcs	.+30     	; 0x760 <__divsf3_pse+0x86>
     742:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>
     746:	0c 94 86 04 	jmp	0x90c	; 0x90c <__fp_szero>
     74a:	5f 3f       	cpi	r21, 0xFF	; 255
     74c:	e4 f3       	brlt	.-8      	; 0x746 <__divsf3_pse+0x6c>
     74e:	98 3e       	cpi	r25, 0xE8	; 232
     750:	d4 f3       	brlt	.-12     	; 0x746 <__divsf3_pse+0x6c>
     752:	86 95       	lsr	r24
     754:	77 95       	ror	r23
     756:	67 95       	ror	r22
     758:	b7 95       	ror	r27
     75a:	f7 95       	ror	r31
     75c:	9f 5f       	subi	r25, 0xFF	; 255
     75e:	c9 f7       	brne	.-14     	; 0x752 <__divsf3_pse+0x78>
     760:	88 0f       	add	r24, r24
     762:	91 1d       	adc	r25, r1
     764:	96 95       	lsr	r25
     766:	87 95       	ror	r24
     768:	97 f9       	bld	r25, 7
     76a:	08 95       	ret
     76c:	e1 e0       	ldi	r30, 0x01	; 1
     76e:	66 0f       	add	r22, r22
     770:	77 1f       	adc	r23, r23
     772:	88 1f       	adc	r24, r24
     774:	bb 1f       	adc	r27, r27
     776:	62 17       	cp	r22, r18
     778:	73 07       	cpc	r23, r19
     77a:	84 07       	cpc	r24, r20
     77c:	ba 07       	cpc	r27, r26
     77e:	20 f0       	brcs	.+8      	; 0x788 <__divsf3_pse+0xae>
     780:	62 1b       	sub	r22, r18
     782:	73 0b       	sbc	r23, r19
     784:	84 0b       	sbc	r24, r20
     786:	ba 0b       	sbc	r27, r26
     788:	ee 1f       	adc	r30, r30
     78a:	88 f7       	brcc	.-30     	; 0x76e <__divsf3_pse+0x94>
     78c:	e0 95       	com	r30
     78e:	08 95       	ret

00000790 <__fixsfsi>:
     790:	0e 94 cf 03 	call	0x79e	; 0x79e <__fixunssfsi>
     794:	68 94       	set
     796:	b1 11       	cpse	r27, r1
     798:	0c 94 86 04 	jmp	0x90c	; 0x90c <__fp_szero>
     79c:	08 95       	ret

0000079e <__fixunssfsi>:
     79e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__fp_splitA>
     7a2:	88 f0       	brcs	.+34     	; 0x7c6 <__fixunssfsi+0x28>
     7a4:	9f 57       	subi	r25, 0x7F	; 127
     7a6:	98 f0       	brcs	.+38     	; 0x7ce <__fixunssfsi+0x30>
     7a8:	b9 2f       	mov	r27, r25
     7aa:	99 27       	eor	r25, r25
     7ac:	b7 51       	subi	r27, 0x17	; 23
     7ae:	b0 f0       	brcs	.+44     	; 0x7dc <__fixunssfsi+0x3e>
     7b0:	e1 f0       	breq	.+56     	; 0x7ea <__fixunssfsi+0x4c>
     7b2:	66 0f       	add	r22, r22
     7b4:	77 1f       	adc	r23, r23
     7b6:	88 1f       	adc	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	1a f0       	brmi	.+6      	; 0x7c2 <__fixunssfsi+0x24>
     7bc:	ba 95       	dec	r27
     7be:	c9 f7       	brne	.-14     	; 0x7b2 <__fixunssfsi+0x14>
     7c0:	14 c0       	rjmp	.+40     	; 0x7ea <__fixunssfsi+0x4c>
     7c2:	b1 30       	cpi	r27, 0x01	; 1
     7c4:	91 f0       	breq	.+36     	; 0x7ea <__fixunssfsi+0x4c>
     7c6:	0e 94 85 04 	call	0x90a	; 0x90a <__fp_zero>
     7ca:	b1 e0       	ldi	r27, 0x01	; 1
     7cc:	08 95       	ret
     7ce:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_zero>
     7d2:	67 2f       	mov	r22, r23
     7d4:	78 2f       	mov	r23, r24
     7d6:	88 27       	eor	r24, r24
     7d8:	b8 5f       	subi	r27, 0xF8	; 248
     7da:	39 f0       	breq	.+14     	; 0x7ea <__fixunssfsi+0x4c>
     7dc:	b9 3f       	cpi	r27, 0xF9	; 249
     7de:	cc f3       	brlt	.-14     	; 0x7d2 <__fixunssfsi+0x34>
     7e0:	86 95       	lsr	r24
     7e2:	77 95       	ror	r23
     7e4:	67 95       	ror	r22
     7e6:	b3 95       	inc	r27
     7e8:	d9 f7       	brne	.-10     	; 0x7e0 <__fixunssfsi+0x42>
     7ea:	3e f4       	brtc	.+14     	; 0x7fa <__fixunssfsi+0x5c>
     7ec:	90 95       	com	r25
     7ee:	80 95       	com	r24
     7f0:	70 95       	com	r23
     7f2:	61 95       	neg	r22
     7f4:	7f 4f       	sbci	r23, 0xFF	; 255
     7f6:	8f 4f       	sbci	r24, 0xFF	; 255
     7f8:	9f 4f       	sbci	r25, 0xFF	; 255
     7fa:	08 95       	ret

000007fc <__floatunsisf>:
     7fc:	e8 94       	clt
     7fe:	09 c0       	rjmp	.+18     	; 0x812 <__floatsisf+0x12>

00000800 <__floatsisf>:
     800:	97 fb       	bst	r25, 7
     802:	3e f4       	brtc	.+14     	; 0x812 <__floatsisf+0x12>
     804:	90 95       	com	r25
     806:	80 95       	com	r24
     808:	70 95       	com	r23
     80a:	61 95       	neg	r22
     80c:	7f 4f       	sbci	r23, 0xFF	; 255
     80e:	8f 4f       	sbci	r24, 0xFF	; 255
     810:	9f 4f       	sbci	r25, 0xFF	; 255
     812:	99 23       	and	r25, r25
     814:	a9 f0       	breq	.+42     	; 0x840 <__floatsisf+0x40>
     816:	f9 2f       	mov	r31, r25
     818:	96 e9       	ldi	r25, 0x96	; 150
     81a:	bb 27       	eor	r27, r27
     81c:	93 95       	inc	r25
     81e:	f6 95       	lsr	r31
     820:	87 95       	ror	r24
     822:	77 95       	ror	r23
     824:	67 95       	ror	r22
     826:	b7 95       	ror	r27
     828:	f1 11       	cpse	r31, r1
     82a:	f8 cf       	rjmp	.-16     	; 0x81c <__floatsisf+0x1c>
     82c:	fa f4       	brpl	.+62     	; 0x86c <__floatsisf+0x6c>
     82e:	bb 0f       	add	r27, r27
     830:	11 f4       	brne	.+4      	; 0x836 <__floatsisf+0x36>
     832:	60 ff       	sbrs	r22, 0
     834:	1b c0       	rjmp	.+54     	; 0x86c <__floatsisf+0x6c>
     836:	6f 5f       	subi	r22, 0xFF	; 255
     838:	7f 4f       	sbci	r23, 0xFF	; 255
     83a:	8f 4f       	sbci	r24, 0xFF	; 255
     83c:	9f 4f       	sbci	r25, 0xFF	; 255
     83e:	16 c0       	rjmp	.+44     	; 0x86c <__floatsisf+0x6c>
     840:	88 23       	and	r24, r24
     842:	11 f0       	breq	.+4      	; 0x848 <__floatsisf+0x48>
     844:	96 e9       	ldi	r25, 0x96	; 150
     846:	11 c0       	rjmp	.+34     	; 0x86a <__floatsisf+0x6a>
     848:	77 23       	and	r23, r23
     84a:	21 f0       	breq	.+8      	; 0x854 <__floatsisf+0x54>
     84c:	9e e8       	ldi	r25, 0x8E	; 142
     84e:	87 2f       	mov	r24, r23
     850:	76 2f       	mov	r23, r22
     852:	05 c0       	rjmp	.+10     	; 0x85e <__floatsisf+0x5e>
     854:	66 23       	and	r22, r22
     856:	71 f0       	breq	.+28     	; 0x874 <__floatsisf+0x74>
     858:	96 e8       	ldi	r25, 0x86	; 134
     85a:	86 2f       	mov	r24, r22
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	2a f0       	brmi	.+10     	; 0x86c <__floatsisf+0x6c>
     862:	9a 95       	dec	r25
     864:	66 0f       	add	r22, r22
     866:	77 1f       	adc	r23, r23
     868:	88 1f       	adc	r24, r24
     86a:	da f7       	brpl	.-10     	; 0x862 <__floatsisf+0x62>
     86c:	88 0f       	add	r24, r24
     86e:	96 95       	lsr	r25
     870:	87 95       	ror	r24
     872:	97 f9       	bld	r25, 7
     874:	08 95       	ret

00000876 <__fp_inf>:
     876:	97 f9       	bld	r25, 7
     878:	9f 67       	ori	r25, 0x7F	; 127
     87a:	80 e8       	ldi	r24, 0x80	; 128
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	08 95       	ret

00000882 <__fp_nan>:
     882:	9f ef       	ldi	r25, 0xFF	; 255
     884:	80 ec       	ldi	r24, 0xC0	; 192
     886:	08 95       	ret

00000888 <__fp_pscA>:
     888:	00 24       	eor	r0, r0
     88a:	0a 94       	dec	r0
     88c:	16 16       	cp	r1, r22
     88e:	17 06       	cpc	r1, r23
     890:	18 06       	cpc	r1, r24
     892:	09 06       	cpc	r0, r25
     894:	08 95       	ret

00000896 <__fp_pscB>:
     896:	00 24       	eor	r0, r0
     898:	0a 94       	dec	r0
     89a:	12 16       	cp	r1, r18
     89c:	13 06       	cpc	r1, r19
     89e:	14 06       	cpc	r1, r20
     8a0:	05 06       	cpc	r0, r21
     8a2:	08 95       	ret

000008a4 <__fp_round>:
     8a4:	09 2e       	mov	r0, r25
     8a6:	03 94       	inc	r0
     8a8:	00 0c       	add	r0, r0
     8aa:	11 f4       	brne	.+4      	; 0x8b0 <__fp_round+0xc>
     8ac:	88 23       	and	r24, r24
     8ae:	52 f0       	brmi	.+20     	; 0x8c4 <__fp_round+0x20>
     8b0:	bb 0f       	add	r27, r27
     8b2:	40 f4       	brcc	.+16     	; 0x8c4 <__fp_round+0x20>
     8b4:	bf 2b       	or	r27, r31
     8b6:	11 f4       	brne	.+4      	; 0x8bc <__fp_round+0x18>
     8b8:	60 ff       	sbrs	r22, 0
     8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <__fp_round+0x20>
     8bc:	6f 5f       	subi	r22, 0xFF	; 255
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	8f 4f       	sbci	r24, 0xFF	; 255
     8c2:	9f 4f       	sbci	r25, 0xFF	; 255
     8c4:	08 95       	ret

000008c6 <__fp_split3>:
     8c6:	57 fd       	sbrc	r21, 7
     8c8:	90 58       	subi	r25, 0x80	; 128
     8ca:	44 0f       	add	r20, r20
     8cc:	55 1f       	adc	r21, r21
     8ce:	59 f0       	breq	.+22     	; 0x8e6 <__fp_splitA+0x10>
     8d0:	5f 3f       	cpi	r21, 0xFF	; 255
     8d2:	71 f0       	breq	.+28     	; 0x8f0 <__fp_splitA+0x1a>
     8d4:	47 95       	ror	r20

000008d6 <__fp_splitA>:
     8d6:	88 0f       	add	r24, r24
     8d8:	97 fb       	bst	r25, 7
     8da:	99 1f       	adc	r25, r25
     8dc:	61 f0       	breq	.+24     	; 0x8f6 <__fp_splitA+0x20>
     8de:	9f 3f       	cpi	r25, 0xFF	; 255
     8e0:	79 f0       	breq	.+30     	; 0x900 <__stack+0x1>
     8e2:	87 95       	ror	r24
     8e4:	08 95       	ret
     8e6:	12 16       	cp	r1, r18
     8e8:	13 06       	cpc	r1, r19
     8ea:	14 06       	cpc	r1, r20
     8ec:	55 1f       	adc	r21, r21
     8ee:	f2 cf       	rjmp	.-28     	; 0x8d4 <__fp_split3+0xe>
     8f0:	46 95       	lsr	r20
     8f2:	f1 df       	rcall	.-30     	; 0x8d6 <__fp_splitA>
     8f4:	08 c0       	rjmp	.+16     	; 0x906 <__stack+0x7>
     8f6:	16 16       	cp	r1, r22
     8f8:	17 06       	cpc	r1, r23
     8fa:	18 06       	cpc	r1, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	f1 cf       	rjmp	.-30     	; 0x8e2 <__fp_splitA+0xc>
     900:	86 95       	lsr	r24
     902:	71 05       	cpc	r23, r1
     904:	61 05       	cpc	r22, r1
     906:	08 94       	sec
     908:	08 95       	ret

0000090a <__fp_zero>:
     90a:	e8 94       	clt

0000090c <__fp_szero>:
     90c:	bb 27       	eor	r27, r27
     90e:	66 27       	eor	r22, r22
     910:	77 27       	eor	r23, r23
     912:	cb 01       	movw	r24, r22
     914:	97 f9       	bld	r25, 7
     916:	08 95       	ret

00000918 <__mulsf3>:
     918:	0e 94 9f 04 	call	0x93e	; 0x93e <__mulsf3x>
     91c:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_round>
     920:	0e 94 44 04 	call	0x888	; 0x888 <__fp_pscA>
     924:	38 f0       	brcs	.+14     	; 0x934 <__mulsf3+0x1c>
     926:	0e 94 4b 04 	call	0x896	; 0x896 <__fp_pscB>
     92a:	20 f0       	brcs	.+8      	; 0x934 <__mulsf3+0x1c>
     92c:	95 23       	and	r25, r21
     92e:	11 f0       	breq	.+4      	; 0x934 <__mulsf3+0x1c>
     930:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>
     934:	0c 94 41 04 	jmp	0x882	; 0x882 <__fp_nan>
     938:	11 24       	eor	r1, r1
     93a:	0c 94 86 04 	jmp	0x90c	; 0x90c <__fp_szero>

0000093e <__mulsf3x>:
     93e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_split3>
     942:	70 f3       	brcs	.-36     	; 0x920 <__mulsf3+0x8>

00000944 <__mulsf3_pse>:
     944:	95 9f       	mul	r25, r21
     946:	c1 f3       	breq	.-16     	; 0x938 <__mulsf3+0x20>
     948:	95 0f       	add	r25, r21
     94a:	50 e0       	ldi	r21, 0x00	; 0
     94c:	55 1f       	adc	r21, r21
     94e:	62 9f       	mul	r22, r18
     950:	f0 01       	movw	r30, r0
     952:	72 9f       	mul	r23, r18
     954:	bb 27       	eor	r27, r27
     956:	f0 0d       	add	r31, r0
     958:	b1 1d       	adc	r27, r1
     95a:	63 9f       	mul	r22, r19
     95c:	aa 27       	eor	r26, r26
     95e:	f0 0d       	add	r31, r0
     960:	b1 1d       	adc	r27, r1
     962:	aa 1f       	adc	r26, r26
     964:	64 9f       	mul	r22, r20
     966:	66 27       	eor	r22, r22
     968:	b0 0d       	add	r27, r0
     96a:	a1 1d       	adc	r26, r1
     96c:	66 1f       	adc	r22, r22
     96e:	82 9f       	mul	r24, r18
     970:	22 27       	eor	r18, r18
     972:	b0 0d       	add	r27, r0
     974:	a1 1d       	adc	r26, r1
     976:	62 1f       	adc	r22, r18
     978:	73 9f       	mul	r23, r19
     97a:	b0 0d       	add	r27, r0
     97c:	a1 1d       	adc	r26, r1
     97e:	62 1f       	adc	r22, r18
     980:	83 9f       	mul	r24, r19
     982:	a0 0d       	add	r26, r0
     984:	61 1d       	adc	r22, r1
     986:	22 1f       	adc	r18, r18
     988:	74 9f       	mul	r23, r20
     98a:	33 27       	eor	r19, r19
     98c:	a0 0d       	add	r26, r0
     98e:	61 1d       	adc	r22, r1
     990:	23 1f       	adc	r18, r19
     992:	84 9f       	mul	r24, r20
     994:	60 0d       	add	r22, r0
     996:	21 1d       	adc	r18, r1
     998:	82 2f       	mov	r24, r18
     99a:	76 2f       	mov	r23, r22
     99c:	6a 2f       	mov	r22, r26
     99e:	11 24       	eor	r1, r1
     9a0:	9f 57       	subi	r25, 0x7F	; 127
     9a2:	50 40       	sbci	r21, 0x00	; 0
     9a4:	9a f0       	brmi	.+38     	; 0x9cc <__mulsf3_pse+0x88>
     9a6:	f1 f0       	breq	.+60     	; 0x9e4 <__mulsf3_pse+0xa0>
     9a8:	88 23       	and	r24, r24
     9aa:	4a f0       	brmi	.+18     	; 0x9be <__mulsf3_pse+0x7a>
     9ac:	ee 0f       	add	r30, r30
     9ae:	ff 1f       	adc	r31, r31
     9b0:	bb 1f       	adc	r27, r27
     9b2:	66 1f       	adc	r22, r22
     9b4:	77 1f       	adc	r23, r23
     9b6:	88 1f       	adc	r24, r24
     9b8:	91 50       	subi	r25, 0x01	; 1
     9ba:	50 40       	sbci	r21, 0x00	; 0
     9bc:	a9 f7       	brne	.-22     	; 0x9a8 <__mulsf3_pse+0x64>
     9be:	9e 3f       	cpi	r25, 0xFE	; 254
     9c0:	51 05       	cpc	r21, r1
     9c2:	80 f0       	brcs	.+32     	; 0x9e4 <__mulsf3_pse+0xa0>
     9c4:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>
     9c8:	0c 94 86 04 	jmp	0x90c	; 0x90c <__fp_szero>
     9cc:	5f 3f       	cpi	r21, 0xFF	; 255
     9ce:	e4 f3       	brlt	.-8      	; 0x9c8 <__mulsf3_pse+0x84>
     9d0:	98 3e       	cpi	r25, 0xE8	; 232
     9d2:	d4 f3       	brlt	.-12     	; 0x9c8 <__mulsf3_pse+0x84>
     9d4:	86 95       	lsr	r24
     9d6:	77 95       	ror	r23
     9d8:	67 95       	ror	r22
     9da:	b7 95       	ror	r27
     9dc:	f7 95       	ror	r31
     9de:	e7 95       	ror	r30
     9e0:	9f 5f       	subi	r25, 0xFF	; 255
     9e2:	c1 f7       	brne	.-16     	; 0x9d4 <__mulsf3_pse+0x90>
     9e4:	fe 2b       	or	r31, r30
     9e6:	88 0f       	add	r24, r24
     9e8:	91 1d       	adc	r25, r1
     9ea:	96 95       	lsr	r25
     9ec:	87 95       	ror	r24
     9ee:	97 f9       	bld	r25, 7
     9f0:	08 95       	ret

000009f2 <__divmodhi4>:
     9f2:	97 fb       	bst	r25, 7
     9f4:	07 2e       	mov	r0, r23
     9f6:	16 f4       	brtc	.+4      	; 0x9fc <__divmodhi4+0xa>
     9f8:	00 94       	com	r0
     9fa:	07 d0       	rcall	.+14     	; 0xa0a <__divmodhi4_neg1>
     9fc:	77 fd       	sbrc	r23, 7
     9fe:	09 d0       	rcall	.+18     	; 0xa12 <__divmodhi4_neg2>
     a00:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__udivmodhi4>
     a04:	07 fc       	sbrc	r0, 7
     a06:	05 d0       	rcall	.+10     	; 0xa12 <__divmodhi4_neg2>
     a08:	3e f4       	brtc	.+14     	; 0xa18 <__divmodhi4_exit>

00000a0a <__divmodhi4_neg1>:
     a0a:	90 95       	com	r25
     a0c:	81 95       	neg	r24
     a0e:	9f 4f       	sbci	r25, 0xFF	; 255
     a10:	08 95       	ret

00000a12 <__divmodhi4_neg2>:
     a12:	70 95       	com	r23
     a14:	61 95       	neg	r22
     a16:	7f 4f       	sbci	r23, 0xFF	; 255

00000a18 <__divmodhi4_exit>:
     a18:	08 95       	ret

00000a1a <__udivmodsi4>:
     a1a:	a1 e2       	ldi	r26, 0x21	; 33
     a1c:	1a 2e       	mov	r1, r26
     a1e:	aa 1b       	sub	r26, r26
     a20:	bb 1b       	sub	r27, r27
     a22:	fd 01       	movw	r30, r26
     a24:	0d c0       	rjmp	.+26     	; 0xa40 <__udivmodsi4_ep>

00000a26 <__udivmodsi4_loop>:
     a26:	aa 1f       	adc	r26, r26
     a28:	bb 1f       	adc	r27, r27
     a2a:	ee 1f       	adc	r30, r30
     a2c:	ff 1f       	adc	r31, r31
     a2e:	a2 17       	cp	r26, r18
     a30:	b3 07       	cpc	r27, r19
     a32:	e4 07       	cpc	r30, r20
     a34:	f5 07       	cpc	r31, r21
     a36:	20 f0       	brcs	.+8      	; 0xa40 <__udivmodsi4_ep>
     a38:	a2 1b       	sub	r26, r18
     a3a:	b3 0b       	sbc	r27, r19
     a3c:	e4 0b       	sbc	r30, r20
     a3e:	f5 0b       	sbc	r31, r21

00000a40 <__udivmodsi4_ep>:
     a40:	66 1f       	adc	r22, r22
     a42:	77 1f       	adc	r23, r23
     a44:	88 1f       	adc	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	1a 94       	dec	r1
     a4a:	69 f7       	brne	.-38     	; 0xa26 <__udivmodsi4_loop>
     a4c:	60 95       	com	r22
     a4e:	70 95       	com	r23
     a50:	80 95       	com	r24
     a52:	90 95       	com	r25
     a54:	9b 01       	movw	r18, r22
     a56:	ac 01       	movw	r20, r24
     a58:	bd 01       	movw	r22, r26
     a5a:	cf 01       	movw	r24, r30
     a5c:	08 95       	ret

00000a5e <__udivmodhi4>:
     a5e:	aa 1b       	sub	r26, r26
     a60:	bb 1b       	sub	r27, r27
     a62:	51 e1       	ldi	r21, 0x11	; 17
     a64:	07 c0       	rjmp	.+14     	; 0xa74 <__udivmodhi4_ep>

00000a66 <__udivmodhi4_loop>:
     a66:	aa 1f       	adc	r26, r26
     a68:	bb 1f       	adc	r27, r27
     a6a:	a6 17       	cp	r26, r22
     a6c:	b7 07       	cpc	r27, r23
     a6e:	10 f0       	brcs	.+4      	; 0xa74 <__udivmodhi4_ep>
     a70:	a6 1b       	sub	r26, r22
     a72:	b7 0b       	sbc	r27, r23

00000a74 <__udivmodhi4_ep>:
     a74:	88 1f       	adc	r24, r24
     a76:	99 1f       	adc	r25, r25
     a78:	5a 95       	dec	r21
     a7a:	a9 f7       	brne	.-22     	; 0xa66 <__udivmodhi4_loop>
     a7c:	80 95       	com	r24
     a7e:	90 95       	com	r25
     a80:	bc 01       	movw	r22, r24
     a82:	cd 01       	movw	r24, r26
     a84:	08 95       	ret

00000a86 <snprintf>:
     a86:	ae e0       	ldi	r26, 0x0E	; 14
     a88:	b0 e0       	ldi	r27, 0x00	; 0
     a8a:	e9 e4       	ldi	r30, 0x49	; 73
     a8c:	f5 e0       	ldi	r31, 0x05	; 5
     a8e:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__prologue_saves__+0x1c>
     a92:	0d 89       	ldd	r16, Y+21	; 0x15
     a94:	1e 89       	ldd	r17, Y+22	; 0x16
     a96:	8f 89       	ldd	r24, Y+23	; 0x17
     a98:	98 8d       	ldd	r25, Y+24	; 0x18
     a9a:	26 e0       	ldi	r18, 0x06	; 6
     a9c:	2c 83       	std	Y+4, r18	; 0x04
     a9e:	1a 83       	std	Y+2, r17	; 0x02
     aa0:	09 83       	std	Y+1, r16	; 0x01
     aa2:	97 ff       	sbrs	r25, 7
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <snprintf+0x24>
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e8       	ldi	r25, 0x80	; 128
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	ae 01       	movw	r20, r28
     ab2:	45 5e       	subi	r20, 0xE5	; 229
     ab4:	5f 4f       	sbci	r21, 0xFF	; 255
     ab6:	69 8d       	ldd	r22, Y+25	; 0x19
     ab8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     aba:	ce 01       	movw	r24, r28
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	0e 94 73 05 	call	0xae6	; 0xae6 <vfprintf>
     ac2:	4d 81       	ldd	r20, Y+5	; 0x05
     ac4:	5e 81       	ldd	r21, Y+6	; 0x06
     ac6:	57 fd       	sbrc	r21, 7
     ac8:	0a c0       	rjmp	.+20     	; 0xade <snprintf+0x58>
     aca:	2f 81       	ldd	r18, Y+7	; 0x07
     acc:	38 85       	ldd	r19, Y+8	; 0x08
     ace:	42 17       	cp	r20, r18
     ad0:	53 07       	cpc	r21, r19
     ad2:	0c f4       	brge	.+2      	; 0xad6 <snprintf+0x50>
     ad4:	9a 01       	movw	r18, r20
     ad6:	f8 01       	movw	r30, r16
     ad8:	e2 0f       	add	r30, r18
     ada:	f3 1f       	adc	r31, r19
     adc:	10 82       	st	Z, r1
     ade:	2e 96       	adiw	r28, 0x0e	; 14
     ae0:	e4 e0       	ldi	r30, 0x04	; 4
     ae2:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__epilogue_restores__+0x1c>

00000ae6 <vfprintf>:
     ae6:	ab e0       	ldi	r26, 0x0B	; 11
     ae8:	b0 e0       	ldi	r27, 0x00	; 0
     aea:	e9 e7       	ldi	r30, 0x79	; 121
     aec:	f5 e0       	ldi	r31, 0x05	; 5
     aee:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__prologue_saves__>
     af2:	6c 01       	movw	r12, r24
     af4:	7b 01       	movw	r14, r22
     af6:	8a 01       	movw	r16, r20
     af8:	fc 01       	movw	r30, r24
     afa:	17 82       	std	Z+7, r1	; 0x07
     afc:	16 82       	std	Z+6, r1	; 0x06
     afe:	83 81       	ldd	r24, Z+3	; 0x03
     b00:	81 ff       	sbrs	r24, 1
     b02:	cc c1       	rjmp	.+920    	; 0xe9c <vfprintf+0x3b6>
     b04:	ce 01       	movw	r24, r28
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	3c 01       	movw	r6, r24
     b0a:	f6 01       	movw	r30, r12
     b0c:	93 81       	ldd	r25, Z+3	; 0x03
     b0e:	f7 01       	movw	r30, r14
     b10:	93 fd       	sbrc	r25, 3
     b12:	85 91       	lpm	r24, Z+
     b14:	93 ff       	sbrs	r25, 3
     b16:	81 91       	ld	r24, Z+
     b18:	7f 01       	movw	r14, r30
     b1a:	88 23       	and	r24, r24
     b1c:	09 f4       	brne	.+2      	; 0xb20 <vfprintf+0x3a>
     b1e:	ba c1       	rjmp	.+884    	; 0xe94 <vfprintf+0x3ae>
     b20:	85 32       	cpi	r24, 0x25	; 37
     b22:	39 f4       	brne	.+14     	; 0xb32 <vfprintf+0x4c>
     b24:	93 fd       	sbrc	r25, 3
     b26:	85 91       	lpm	r24, Z+
     b28:	93 ff       	sbrs	r25, 3
     b2a:	81 91       	ld	r24, Z+
     b2c:	7f 01       	movw	r14, r30
     b2e:	85 32       	cpi	r24, 0x25	; 37
     b30:	29 f4       	brne	.+10     	; 0xb3c <vfprintf+0x56>
     b32:	b6 01       	movw	r22, r12
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     b3a:	e7 cf       	rjmp	.-50     	; 0xb0a <vfprintf+0x24>
     b3c:	91 2c       	mov	r9, r1
     b3e:	21 2c       	mov	r2, r1
     b40:	31 2c       	mov	r3, r1
     b42:	ff e1       	ldi	r31, 0x1F	; 31
     b44:	f3 15       	cp	r31, r3
     b46:	d8 f0       	brcs	.+54     	; 0xb7e <vfprintf+0x98>
     b48:	8b 32       	cpi	r24, 0x2B	; 43
     b4a:	79 f0       	breq	.+30     	; 0xb6a <vfprintf+0x84>
     b4c:	38 f4       	brcc	.+14     	; 0xb5c <vfprintf+0x76>
     b4e:	80 32       	cpi	r24, 0x20	; 32
     b50:	79 f0       	breq	.+30     	; 0xb70 <vfprintf+0x8a>
     b52:	83 32       	cpi	r24, 0x23	; 35
     b54:	a1 f4       	brne	.+40     	; 0xb7e <vfprintf+0x98>
     b56:	23 2d       	mov	r18, r3
     b58:	20 61       	ori	r18, 0x10	; 16
     b5a:	1d c0       	rjmp	.+58     	; 0xb96 <vfprintf+0xb0>
     b5c:	8d 32       	cpi	r24, 0x2D	; 45
     b5e:	61 f0       	breq	.+24     	; 0xb78 <vfprintf+0x92>
     b60:	80 33       	cpi	r24, 0x30	; 48
     b62:	69 f4       	brne	.+26     	; 0xb7e <vfprintf+0x98>
     b64:	23 2d       	mov	r18, r3
     b66:	21 60       	ori	r18, 0x01	; 1
     b68:	16 c0       	rjmp	.+44     	; 0xb96 <vfprintf+0xb0>
     b6a:	83 2d       	mov	r24, r3
     b6c:	82 60       	ori	r24, 0x02	; 2
     b6e:	38 2e       	mov	r3, r24
     b70:	e3 2d       	mov	r30, r3
     b72:	e4 60       	ori	r30, 0x04	; 4
     b74:	3e 2e       	mov	r3, r30
     b76:	2a c0       	rjmp	.+84     	; 0xbcc <vfprintf+0xe6>
     b78:	f3 2d       	mov	r31, r3
     b7a:	f8 60       	ori	r31, 0x08	; 8
     b7c:	1d c0       	rjmp	.+58     	; 0xbb8 <vfprintf+0xd2>
     b7e:	37 fc       	sbrc	r3, 7
     b80:	2d c0       	rjmp	.+90     	; 0xbdc <vfprintf+0xf6>
     b82:	20 ed       	ldi	r18, 0xD0	; 208
     b84:	28 0f       	add	r18, r24
     b86:	2a 30       	cpi	r18, 0x0A	; 10
     b88:	40 f0       	brcs	.+16     	; 0xb9a <vfprintf+0xb4>
     b8a:	8e 32       	cpi	r24, 0x2E	; 46
     b8c:	b9 f4       	brne	.+46     	; 0xbbc <vfprintf+0xd6>
     b8e:	36 fc       	sbrc	r3, 6
     b90:	81 c1       	rjmp	.+770    	; 0xe94 <vfprintf+0x3ae>
     b92:	23 2d       	mov	r18, r3
     b94:	20 64       	ori	r18, 0x40	; 64
     b96:	32 2e       	mov	r3, r18
     b98:	19 c0       	rjmp	.+50     	; 0xbcc <vfprintf+0xe6>
     b9a:	36 fe       	sbrs	r3, 6
     b9c:	06 c0       	rjmp	.+12     	; 0xbaa <vfprintf+0xc4>
     b9e:	8a e0       	ldi	r24, 0x0A	; 10
     ba0:	98 9e       	mul	r9, r24
     ba2:	20 0d       	add	r18, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	92 2e       	mov	r9, r18
     ba8:	11 c0       	rjmp	.+34     	; 0xbcc <vfprintf+0xe6>
     baa:	ea e0       	ldi	r30, 0x0A	; 10
     bac:	2e 9e       	mul	r2, r30
     bae:	20 0d       	add	r18, r0
     bb0:	11 24       	eor	r1, r1
     bb2:	22 2e       	mov	r2, r18
     bb4:	f3 2d       	mov	r31, r3
     bb6:	f0 62       	ori	r31, 0x20	; 32
     bb8:	3f 2e       	mov	r3, r31
     bba:	08 c0       	rjmp	.+16     	; 0xbcc <vfprintf+0xe6>
     bbc:	8c 36       	cpi	r24, 0x6C	; 108
     bbe:	21 f4       	brne	.+8      	; 0xbc8 <vfprintf+0xe2>
     bc0:	83 2d       	mov	r24, r3
     bc2:	80 68       	ori	r24, 0x80	; 128
     bc4:	38 2e       	mov	r3, r24
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <vfprintf+0xe6>
     bc8:	88 36       	cpi	r24, 0x68	; 104
     bca:	41 f4       	brne	.+16     	; 0xbdc <vfprintf+0xf6>
     bcc:	f7 01       	movw	r30, r14
     bce:	93 fd       	sbrc	r25, 3
     bd0:	85 91       	lpm	r24, Z+
     bd2:	93 ff       	sbrs	r25, 3
     bd4:	81 91       	ld	r24, Z+
     bd6:	7f 01       	movw	r14, r30
     bd8:	81 11       	cpse	r24, r1
     bda:	b3 cf       	rjmp	.-154    	; 0xb42 <vfprintf+0x5c>
     bdc:	98 2f       	mov	r25, r24
     bde:	9f 7d       	andi	r25, 0xDF	; 223
     be0:	95 54       	subi	r25, 0x45	; 69
     be2:	93 30       	cpi	r25, 0x03	; 3
     be4:	28 f4       	brcc	.+10     	; 0xbf0 <vfprintf+0x10a>
     be6:	0c 5f       	subi	r16, 0xFC	; 252
     be8:	1f 4f       	sbci	r17, 0xFF	; 255
     bea:	9f e3       	ldi	r25, 0x3F	; 63
     bec:	99 83       	std	Y+1, r25	; 0x01
     bee:	0d c0       	rjmp	.+26     	; 0xc0a <vfprintf+0x124>
     bf0:	83 36       	cpi	r24, 0x63	; 99
     bf2:	31 f0       	breq	.+12     	; 0xc00 <vfprintf+0x11a>
     bf4:	83 37       	cpi	r24, 0x73	; 115
     bf6:	71 f0       	breq	.+28     	; 0xc14 <vfprintf+0x12e>
     bf8:	83 35       	cpi	r24, 0x53	; 83
     bfa:	09 f0       	breq	.+2      	; 0xbfe <vfprintf+0x118>
     bfc:	59 c0       	rjmp	.+178    	; 0xcb0 <vfprintf+0x1ca>
     bfe:	21 c0       	rjmp	.+66     	; 0xc42 <vfprintf+0x15c>
     c00:	f8 01       	movw	r30, r16
     c02:	80 81       	ld	r24, Z
     c04:	89 83       	std	Y+1, r24	; 0x01
     c06:	0e 5f       	subi	r16, 0xFE	; 254
     c08:	1f 4f       	sbci	r17, 0xFF	; 255
     c0a:	88 24       	eor	r8, r8
     c0c:	83 94       	inc	r8
     c0e:	91 2c       	mov	r9, r1
     c10:	53 01       	movw	r10, r6
     c12:	13 c0       	rjmp	.+38     	; 0xc3a <vfprintf+0x154>
     c14:	28 01       	movw	r4, r16
     c16:	f2 e0       	ldi	r31, 0x02	; 2
     c18:	4f 0e       	add	r4, r31
     c1a:	51 1c       	adc	r5, r1
     c1c:	f8 01       	movw	r30, r16
     c1e:	a0 80       	ld	r10, Z
     c20:	b1 80       	ldd	r11, Z+1	; 0x01
     c22:	36 fe       	sbrs	r3, 6
     c24:	03 c0       	rjmp	.+6      	; 0xc2c <vfprintf+0x146>
     c26:	69 2d       	mov	r22, r9
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <vfprintf+0x14a>
     c2c:	6f ef       	ldi	r22, 0xFF	; 255
     c2e:	7f ef       	ldi	r23, 0xFF	; 255
     c30:	c5 01       	movw	r24, r10
     c32:	0e 94 5f 07 	call	0xebe	; 0xebe <strnlen>
     c36:	4c 01       	movw	r8, r24
     c38:	82 01       	movw	r16, r4
     c3a:	f3 2d       	mov	r31, r3
     c3c:	ff 77       	andi	r31, 0x7F	; 127
     c3e:	3f 2e       	mov	r3, r31
     c40:	16 c0       	rjmp	.+44     	; 0xc6e <vfprintf+0x188>
     c42:	28 01       	movw	r4, r16
     c44:	22 e0       	ldi	r18, 0x02	; 2
     c46:	42 0e       	add	r4, r18
     c48:	51 1c       	adc	r5, r1
     c4a:	f8 01       	movw	r30, r16
     c4c:	a0 80       	ld	r10, Z
     c4e:	b1 80       	ldd	r11, Z+1	; 0x01
     c50:	36 fe       	sbrs	r3, 6
     c52:	03 c0       	rjmp	.+6      	; 0xc5a <vfprintf+0x174>
     c54:	69 2d       	mov	r22, r9
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <vfprintf+0x178>
     c5a:	6f ef       	ldi	r22, 0xFF	; 255
     c5c:	7f ef       	ldi	r23, 0xFF	; 255
     c5e:	c5 01       	movw	r24, r10
     c60:	0e 94 54 07 	call	0xea8	; 0xea8 <strnlen_P>
     c64:	4c 01       	movw	r8, r24
     c66:	f3 2d       	mov	r31, r3
     c68:	f0 68       	ori	r31, 0x80	; 128
     c6a:	3f 2e       	mov	r3, r31
     c6c:	82 01       	movw	r16, r4
     c6e:	33 fc       	sbrc	r3, 3
     c70:	1b c0       	rjmp	.+54     	; 0xca8 <vfprintf+0x1c2>
     c72:	82 2d       	mov	r24, r2
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	88 16       	cp	r8, r24
     c78:	99 06       	cpc	r9, r25
     c7a:	b0 f4       	brcc	.+44     	; 0xca8 <vfprintf+0x1c2>
     c7c:	b6 01       	movw	r22, r12
     c7e:	80 e2       	ldi	r24, 0x20	; 32
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     c86:	2a 94       	dec	r2
     c88:	f4 cf       	rjmp	.-24     	; 0xc72 <vfprintf+0x18c>
     c8a:	f5 01       	movw	r30, r10
     c8c:	37 fc       	sbrc	r3, 7
     c8e:	85 91       	lpm	r24, Z+
     c90:	37 fe       	sbrs	r3, 7
     c92:	81 91       	ld	r24, Z+
     c94:	5f 01       	movw	r10, r30
     c96:	b6 01       	movw	r22, r12
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     c9e:	21 10       	cpse	r2, r1
     ca0:	2a 94       	dec	r2
     ca2:	21 e0       	ldi	r18, 0x01	; 1
     ca4:	82 1a       	sub	r8, r18
     ca6:	91 08       	sbc	r9, r1
     ca8:	81 14       	cp	r8, r1
     caa:	91 04       	cpc	r9, r1
     cac:	71 f7       	brne	.-36     	; 0xc8a <vfprintf+0x1a4>
     cae:	e8 c0       	rjmp	.+464    	; 0xe80 <vfprintf+0x39a>
     cb0:	84 36       	cpi	r24, 0x64	; 100
     cb2:	11 f0       	breq	.+4      	; 0xcb8 <vfprintf+0x1d2>
     cb4:	89 36       	cpi	r24, 0x69	; 105
     cb6:	41 f5       	brne	.+80     	; 0xd08 <vfprintf+0x222>
     cb8:	f8 01       	movw	r30, r16
     cba:	37 fe       	sbrs	r3, 7
     cbc:	07 c0       	rjmp	.+14     	; 0xccc <vfprintf+0x1e6>
     cbe:	60 81       	ld	r22, Z
     cc0:	71 81       	ldd	r23, Z+1	; 0x01
     cc2:	82 81       	ldd	r24, Z+2	; 0x02
     cc4:	93 81       	ldd	r25, Z+3	; 0x03
     cc6:	0c 5f       	subi	r16, 0xFC	; 252
     cc8:	1f 4f       	sbci	r17, 0xFF	; 255
     cca:	08 c0       	rjmp	.+16     	; 0xcdc <vfprintf+0x1f6>
     ccc:	60 81       	ld	r22, Z
     cce:	71 81       	ldd	r23, Z+1	; 0x01
     cd0:	07 2e       	mov	r0, r23
     cd2:	00 0c       	add	r0, r0
     cd4:	88 0b       	sbc	r24, r24
     cd6:	99 0b       	sbc	r25, r25
     cd8:	0e 5f       	subi	r16, 0xFE	; 254
     cda:	1f 4f       	sbci	r17, 0xFF	; 255
     cdc:	f3 2d       	mov	r31, r3
     cde:	ff 76       	andi	r31, 0x6F	; 111
     ce0:	3f 2e       	mov	r3, r31
     ce2:	97 ff       	sbrs	r25, 7
     ce4:	09 c0       	rjmp	.+18     	; 0xcf8 <vfprintf+0x212>
     ce6:	90 95       	com	r25
     ce8:	80 95       	com	r24
     cea:	70 95       	com	r23
     cec:	61 95       	neg	r22
     cee:	7f 4f       	sbci	r23, 0xFF	; 255
     cf0:	8f 4f       	sbci	r24, 0xFF	; 255
     cf2:	9f 4f       	sbci	r25, 0xFF	; 255
     cf4:	f0 68       	ori	r31, 0x80	; 128
     cf6:	3f 2e       	mov	r3, r31
     cf8:	2a e0       	ldi	r18, 0x0A	; 10
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	a3 01       	movw	r20, r6
     cfe:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__ultoa_invert>
     d02:	88 2e       	mov	r8, r24
     d04:	86 18       	sub	r8, r6
     d06:	45 c0       	rjmp	.+138    	; 0xd92 <vfprintf+0x2ac>
     d08:	85 37       	cpi	r24, 0x75	; 117
     d0a:	31 f4       	brne	.+12     	; 0xd18 <vfprintf+0x232>
     d0c:	23 2d       	mov	r18, r3
     d0e:	2f 7e       	andi	r18, 0xEF	; 239
     d10:	b2 2e       	mov	r11, r18
     d12:	2a e0       	ldi	r18, 0x0A	; 10
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	25 c0       	rjmp	.+74     	; 0xd62 <vfprintf+0x27c>
     d18:	93 2d       	mov	r25, r3
     d1a:	99 7f       	andi	r25, 0xF9	; 249
     d1c:	b9 2e       	mov	r11, r25
     d1e:	8f 36       	cpi	r24, 0x6F	; 111
     d20:	c1 f0       	breq	.+48     	; 0xd52 <vfprintf+0x26c>
     d22:	18 f4       	brcc	.+6      	; 0xd2a <vfprintf+0x244>
     d24:	88 35       	cpi	r24, 0x58	; 88
     d26:	79 f0       	breq	.+30     	; 0xd46 <vfprintf+0x260>
     d28:	b5 c0       	rjmp	.+362    	; 0xe94 <vfprintf+0x3ae>
     d2a:	80 37       	cpi	r24, 0x70	; 112
     d2c:	19 f0       	breq	.+6      	; 0xd34 <vfprintf+0x24e>
     d2e:	88 37       	cpi	r24, 0x78	; 120
     d30:	21 f0       	breq	.+8      	; 0xd3a <vfprintf+0x254>
     d32:	b0 c0       	rjmp	.+352    	; 0xe94 <vfprintf+0x3ae>
     d34:	e9 2f       	mov	r30, r25
     d36:	e0 61       	ori	r30, 0x10	; 16
     d38:	be 2e       	mov	r11, r30
     d3a:	b4 fe       	sbrs	r11, 4
     d3c:	0d c0       	rjmp	.+26     	; 0xd58 <vfprintf+0x272>
     d3e:	fb 2d       	mov	r31, r11
     d40:	f4 60       	ori	r31, 0x04	; 4
     d42:	bf 2e       	mov	r11, r31
     d44:	09 c0       	rjmp	.+18     	; 0xd58 <vfprintf+0x272>
     d46:	34 fe       	sbrs	r3, 4
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <vfprintf+0x278>
     d4a:	29 2f       	mov	r18, r25
     d4c:	26 60       	ori	r18, 0x06	; 6
     d4e:	b2 2e       	mov	r11, r18
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <vfprintf+0x278>
     d52:	28 e0       	ldi	r18, 0x08	; 8
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	05 c0       	rjmp	.+10     	; 0xd62 <vfprintf+0x27c>
     d58:	20 e1       	ldi	r18, 0x10	; 16
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <vfprintf+0x27c>
     d5e:	20 e1       	ldi	r18, 0x10	; 16
     d60:	32 e0       	ldi	r19, 0x02	; 2
     d62:	f8 01       	movw	r30, r16
     d64:	b7 fe       	sbrs	r11, 7
     d66:	07 c0       	rjmp	.+14     	; 0xd76 <vfprintf+0x290>
     d68:	60 81       	ld	r22, Z
     d6a:	71 81       	ldd	r23, Z+1	; 0x01
     d6c:	82 81       	ldd	r24, Z+2	; 0x02
     d6e:	93 81       	ldd	r25, Z+3	; 0x03
     d70:	0c 5f       	subi	r16, 0xFC	; 252
     d72:	1f 4f       	sbci	r17, 0xFF	; 255
     d74:	06 c0       	rjmp	.+12     	; 0xd82 <vfprintf+0x29c>
     d76:	60 81       	ld	r22, Z
     d78:	71 81       	ldd	r23, Z+1	; 0x01
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 5f       	subi	r16, 0xFE	; 254
     d80:	1f 4f       	sbci	r17, 0xFF	; 255
     d82:	a3 01       	movw	r20, r6
     d84:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__ultoa_invert>
     d88:	88 2e       	mov	r8, r24
     d8a:	86 18       	sub	r8, r6
     d8c:	fb 2d       	mov	r31, r11
     d8e:	ff 77       	andi	r31, 0x7F	; 127
     d90:	3f 2e       	mov	r3, r31
     d92:	36 fe       	sbrs	r3, 6
     d94:	0d c0       	rjmp	.+26     	; 0xdb0 <vfprintf+0x2ca>
     d96:	23 2d       	mov	r18, r3
     d98:	2e 7f       	andi	r18, 0xFE	; 254
     d9a:	a2 2e       	mov	r10, r18
     d9c:	89 14       	cp	r8, r9
     d9e:	58 f4       	brcc	.+22     	; 0xdb6 <vfprintf+0x2d0>
     da0:	34 fe       	sbrs	r3, 4
     da2:	0b c0       	rjmp	.+22     	; 0xdba <vfprintf+0x2d4>
     da4:	32 fc       	sbrc	r3, 2
     da6:	09 c0       	rjmp	.+18     	; 0xdba <vfprintf+0x2d4>
     da8:	83 2d       	mov	r24, r3
     daa:	8e 7e       	andi	r24, 0xEE	; 238
     dac:	a8 2e       	mov	r10, r24
     dae:	05 c0       	rjmp	.+10     	; 0xdba <vfprintf+0x2d4>
     db0:	b8 2c       	mov	r11, r8
     db2:	a3 2c       	mov	r10, r3
     db4:	03 c0       	rjmp	.+6      	; 0xdbc <vfprintf+0x2d6>
     db6:	b8 2c       	mov	r11, r8
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <vfprintf+0x2d6>
     dba:	b9 2c       	mov	r11, r9
     dbc:	a4 fe       	sbrs	r10, 4
     dbe:	0f c0       	rjmp	.+30     	; 0xdde <vfprintf+0x2f8>
     dc0:	fe 01       	movw	r30, r28
     dc2:	e8 0d       	add	r30, r8
     dc4:	f1 1d       	adc	r31, r1
     dc6:	80 81       	ld	r24, Z
     dc8:	80 33       	cpi	r24, 0x30	; 48
     dca:	21 f4       	brne	.+8      	; 0xdd4 <vfprintf+0x2ee>
     dcc:	9a 2d       	mov	r25, r10
     dce:	99 7e       	andi	r25, 0xE9	; 233
     dd0:	a9 2e       	mov	r10, r25
     dd2:	09 c0       	rjmp	.+18     	; 0xde6 <vfprintf+0x300>
     dd4:	a2 fe       	sbrs	r10, 2
     dd6:	06 c0       	rjmp	.+12     	; 0xde4 <vfprintf+0x2fe>
     dd8:	b3 94       	inc	r11
     dda:	b3 94       	inc	r11
     ddc:	04 c0       	rjmp	.+8      	; 0xde6 <vfprintf+0x300>
     dde:	8a 2d       	mov	r24, r10
     de0:	86 78       	andi	r24, 0x86	; 134
     de2:	09 f0       	breq	.+2      	; 0xde6 <vfprintf+0x300>
     de4:	b3 94       	inc	r11
     de6:	a3 fc       	sbrc	r10, 3
     de8:	11 c0       	rjmp	.+34     	; 0xe0c <vfprintf+0x326>
     dea:	a0 fe       	sbrs	r10, 0
     dec:	06 c0       	rjmp	.+12     	; 0xdfa <vfprintf+0x314>
     dee:	b2 14       	cp	r11, r2
     df0:	88 f4       	brcc	.+34     	; 0xe14 <vfprintf+0x32e>
     df2:	28 0c       	add	r2, r8
     df4:	92 2c       	mov	r9, r2
     df6:	9b 18       	sub	r9, r11
     df8:	0e c0       	rjmp	.+28     	; 0xe16 <vfprintf+0x330>
     dfa:	b2 14       	cp	r11, r2
     dfc:	60 f4       	brcc	.+24     	; 0xe16 <vfprintf+0x330>
     dfe:	b6 01       	movw	r22, r12
     e00:	80 e2       	ldi	r24, 0x20	; 32
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     e08:	b3 94       	inc	r11
     e0a:	f7 cf       	rjmp	.-18     	; 0xdfa <vfprintf+0x314>
     e0c:	b2 14       	cp	r11, r2
     e0e:	18 f4       	brcc	.+6      	; 0xe16 <vfprintf+0x330>
     e10:	2b 18       	sub	r2, r11
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <vfprintf+0x332>
     e14:	98 2c       	mov	r9, r8
     e16:	21 2c       	mov	r2, r1
     e18:	a4 fe       	sbrs	r10, 4
     e1a:	10 c0       	rjmp	.+32     	; 0xe3c <vfprintf+0x356>
     e1c:	b6 01       	movw	r22, r12
     e1e:	80 e3       	ldi	r24, 0x30	; 48
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     e26:	a2 fe       	sbrs	r10, 2
     e28:	17 c0       	rjmp	.+46     	; 0xe58 <vfprintf+0x372>
     e2a:	a1 fc       	sbrc	r10, 1
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <vfprintf+0x34e>
     e2e:	88 e7       	ldi	r24, 0x78	; 120
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <vfprintf+0x352>
     e34:	88 e5       	ldi	r24, 0x58	; 88
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	b6 01       	movw	r22, r12
     e3a:	0c c0       	rjmp	.+24     	; 0xe54 <vfprintf+0x36e>
     e3c:	8a 2d       	mov	r24, r10
     e3e:	86 78       	andi	r24, 0x86	; 134
     e40:	59 f0       	breq	.+22     	; 0xe58 <vfprintf+0x372>
     e42:	a1 fe       	sbrs	r10, 1
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <vfprintf+0x364>
     e46:	8b e2       	ldi	r24, 0x2B	; 43
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <vfprintf+0x366>
     e4a:	80 e2       	ldi	r24, 0x20	; 32
     e4c:	a7 fc       	sbrc	r10, 7
     e4e:	8d e2       	ldi	r24, 0x2D	; 45
     e50:	b6 01       	movw	r22, r12
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     e58:	89 14       	cp	r8, r9
     e5a:	38 f4       	brcc	.+14     	; 0xe6a <vfprintf+0x384>
     e5c:	b6 01       	movw	r22, r12
     e5e:	80 e3       	ldi	r24, 0x30	; 48
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     e66:	9a 94       	dec	r9
     e68:	f7 cf       	rjmp	.-18     	; 0xe58 <vfprintf+0x372>
     e6a:	8a 94       	dec	r8
     e6c:	f3 01       	movw	r30, r6
     e6e:	e8 0d       	add	r30, r8
     e70:	f1 1d       	adc	r31, r1
     e72:	80 81       	ld	r24, Z
     e74:	b6 01       	movw	r22, r12
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     e7c:	81 10       	cpse	r8, r1
     e7e:	f5 cf       	rjmp	.-22     	; 0xe6a <vfprintf+0x384>
     e80:	22 20       	and	r2, r2
     e82:	09 f4       	brne	.+2      	; 0xe86 <vfprintf+0x3a0>
     e84:	42 ce       	rjmp	.-892    	; 0xb0a <vfprintf+0x24>
     e86:	b6 01       	movw	r22, r12
     e88:	80 e2       	ldi	r24, 0x20	; 32
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 6a 07 	call	0xed4	; 0xed4 <fputc>
     e90:	2a 94       	dec	r2
     e92:	f6 cf       	rjmp	.-20     	; 0xe80 <vfprintf+0x39a>
     e94:	f6 01       	movw	r30, r12
     e96:	86 81       	ldd	r24, Z+6	; 0x06
     e98:	97 81       	ldd	r25, Z+7	; 0x07
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <vfprintf+0x3ba>
     e9c:	8f ef       	ldi	r24, 0xFF	; 255
     e9e:	9f ef       	ldi	r25, 0xFF	; 255
     ea0:	2b 96       	adiw	r28, 0x0b	; 11
     ea2:	e2 e1       	ldi	r30, 0x12	; 18
     ea4:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__epilogue_restores__>

00000ea8 <strnlen_P>:
     ea8:	fc 01       	movw	r30, r24
     eaa:	05 90       	lpm	r0, Z+
     eac:	61 50       	subi	r22, 0x01	; 1
     eae:	70 40       	sbci	r23, 0x00	; 0
     eb0:	01 10       	cpse	r0, r1
     eb2:	d8 f7       	brcc	.-10     	; 0xeaa <strnlen_P+0x2>
     eb4:	80 95       	com	r24
     eb6:	90 95       	com	r25
     eb8:	8e 0f       	add	r24, r30
     eba:	9f 1f       	adc	r25, r31
     ebc:	08 95       	ret

00000ebe <strnlen>:
     ebe:	fc 01       	movw	r30, r24
     ec0:	61 50       	subi	r22, 0x01	; 1
     ec2:	70 40       	sbci	r23, 0x00	; 0
     ec4:	01 90       	ld	r0, Z+
     ec6:	01 10       	cpse	r0, r1
     ec8:	d8 f7       	brcc	.-10     	; 0xec0 <strnlen+0x2>
     eca:	80 95       	com	r24
     ecc:	90 95       	com	r25
     ece:	8e 0f       	add	r24, r30
     ed0:	9f 1f       	adc	r25, r31
     ed2:	08 95       	ret

00000ed4 <fputc>:
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	fb 01       	movw	r30, r22
     ede:	23 81       	ldd	r18, Z+3	; 0x03
     ee0:	21 fd       	sbrc	r18, 1
     ee2:	03 c0       	rjmp	.+6      	; 0xeea <fputc+0x16>
     ee4:	8f ef       	ldi	r24, 0xFF	; 255
     ee6:	9f ef       	ldi	r25, 0xFF	; 255
     ee8:	2c c0       	rjmp	.+88     	; 0xf42 <fputc+0x6e>
     eea:	22 ff       	sbrs	r18, 2
     eec:	16 c0       	rjmp	.+44     	; 0xf1a <fputc+0x46>
     eee:	46 81       	ldd	r20, Z+6	; 0x06
     ef0:	57 81       	ldd	r21, Z+7	; 0x07
     ef2:	24 81       	ldd	r18, Z+4	; 0x04
     ef4:	35 81       	ldd	r19, Z+5	; 0x05
     ef6:	42 17       	cp	r20, r18
     ef8:	53 07       	cpc	r21, r19
     efa:	44 f4       	brge	.+16     	; 0xf0c <fputc+0x38>
     efc:	a0 81       	ld	r26, Z
     efe:	b1 81       	ldd	r27, Z+1	; 0x01
     f00:	9d 01       	movw	r18, r26
     f02:	2f 5f       	subi	r18, 0xFF	; 255
     f04:	3f 4f       	sbci	r19, 0xFF	; 255
     f06:	31 83       	std	Z+1, r19	; 0x01
     f08:	20 83       	st	Z, r18
     f0a:	8c 93       	st	X, r24
     f0c:	26 81       	ldd	r18, Z+6	; 0x06
     f0e:	37 81       	ldd	r19, Z+7	; 0x07
     f10:	2f 5f       	subi	r18, 0xFF	; 255
     f12:	3f 4f       	sbci	r19, 0xFF	; 255
     f14:	37 83       	std	Z+7, r19	; 0x07
     f16:	26 83       	std	Z+6, r18	; 0x06
     f18:	14 c0       	rjmp	.+40     	; 0xf42 <fputc+0x6e>
     f1a:	8b 01       	movw	r16, r22
     f1c:	ec 01       	movw	r28, r24
     f1e:	fb 01       	movw	r30, r22
     f20:	00 84       	ldd	r0, Z+8	; 0x08
     f22:	f1 85       	ldd	r31, Z+9	; 0x09
     f24:	e0 2d       	mov	r30, r0
     f26:	09 95       	icall
     f28:	89 2b       	or	r24, r25
     f2a:	e1 f6       	brne	.-72     	; 0xee4 <fputc+0x10>
     f2c:	d8 01       	movw	r26, r16
     f2e:	16 96       	adiw	r26, 0x06	; 6
     f30:	8d 91       	ld	r24, X+
     f32:	9c 91       	ld	r25, X
     f34:	17 97       	sbiw	r26, 0x07	; 7
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	17 96       	adiw	r26, 0x07	; 7
     f3a:	9c 93       	st	X, r25
     f3c:	8e 93       	st	-X, r24
     f3e:	16 97       	sbiw	r26, 0x06	; 6
     f40:	ce 01       	movw	r24, r28
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	08 95       	ret

00000f4c <__ultoa_invert>:
     f4c:	fa 01       	movw	r30, r20
     f4e:	aa 27       	eor	r26, r26
     f50:	28 30       	cpi	r18, 0x08	; 8
     f52:	51 f1       	breq	.+84     	; 0xfa8 <__ultoa_invert+0x5c>
     f54:	20 31       	cpi	r18, 0x10	; 16
     f56:	81 f1       	breq	.+96     	; 0xfb8 <__ultoa_invert+0x6c>
     f58:	e8 94       	clt
     f5a:	6f 93       	push	r22
     f5c:	6e 7f       	andi	r22, 0xFE	; 254
     f5e:	6e 5f       	subi	r22, 0xFE	; 254
     f60:	7f 4f       	sbci	r23, 0xFF	; 255
     f62:	8f 4f       	sbci	r24, 0xFF	; 255
     f64:	9f 4f       	sbci	r25, 0xFF	; 255
     f66:	af 4f       	sbci	r26, 0xFF	; 255
     f68:	b1 e0       	ldi	r27, 0x01	; 1
     f6a:	3e d0       	rcall	.+124    	; 0xfe8 <__ultoa_invert+0x9c>
     f6c:	b4 e0       	ldi	r27, 0x04	; 4
     f6e:	3c d0       	rcall	.+120    	; 0xfe8 <__ultoa_invert+0x9c>
     f70:	67 0f       	add	r22, r23
     f72:	78 1f       	adc	r23, r24
     f74:	89 1f       	adc	r24, r25
     f76:	9a 1f       	adc	r25, r26
     f78:	a1 1d       	adc	r26, r1
     f7a:	68 0f       	add	r22, r24
     f7c:	79 1f       	adc	r23, r25
     f7e:	8a 1f       	adc	r24, r26
     f80:	91 1d       	adc	r25, r1
     f82:	a1 1d       	adc	r26, r1
     f84:	6a 0f       	add	r22, r26
     f86:	71 1d       	adc	r23, r1
     f88:	81 1d       	adc	r24, r1
     f8a:	91 1d       	adc	r25, r1
     f8c:	a1 1d       	adc	r26, r1
     f8e:	20 d0       	rcall	.+64     	; 0xfd0 <__ultoa_invert+0x84>
     f90:	09 f4       	brne	.+2      	; 0xf94 <__ultoa_invert+0x48>
     f92:	68 94       	set
     f94:	3f 91       	pop	r19
     f96:	2a e0       	ldi	r18, 0x0A	; 10
     f98:	26 9f       	mul	r18, r22
     f9a:	11 24       	eor	r1, r1
     f9c:	30 19       	sub	r19, r0
     f9e:	30 5d       	subi	r19, 0xD0	; 208
     fa0:	31 93       	st	Z+, r19
     fa2:	de f6       	brtc	.-74     	; 0xf5a <__ultoa_invert+0xe>
     fa4:	cf 01       	movw	r24, r30
     fa6:	08 95       	ret
     fa8:	46 2f       	mov	r20, r22
     faa:	47 70       	andi	r20, 0x07	; 7
     fac:	40 5d       	subi	r20, 0xD0	; 208
     fae:	41 93       	st	Z+, r20
     fb0:	b3 e0       	ldi	r27, 0x03	; 3
     fb2:	0f d0       	rcall	.+30     	; 0xfd2 <__ultoa_invert+0x86>
     fb4:	c9 f7       	brne	.-14     	; 0xfa8 <__ultoa_invert+0x5c>
     fb6:	f6 cf       	rjmp	.-20     	; 0xfa4 <__ultoa_invert+0x58>
     fb8:	46 2f       	mov	r20, r22
     fba:	4f 70       	andi	r20, 0x0F	; 15
     fbc:	40 5d       	subi	r20, 0xD0	; 208
     fbe:	4a 33       	cpi	r20, 0x3A	; 58
     fc0:	18 f0       	brcs	.+6      	; 0xfc8 <__ultoa_invert+0x7c>
     fc2:	49 5d       	subi	r20, 0xD9	; 217
     fc4:	31 fd       	sbrc	r19, 1
     fc6:	40 52       	subi	r20, 0x20	; 32
     fc8:	41 93       	st	Z+, r20
     fca:	02 d0       	rcall	.+4      	; 0xfd0 <__ultoa_invert+0x84>
     fcc:	a9 f7       	brne	.-22     	; 0xfb8 <__ultoa_invert+0x6c>
     fce:	ea cf       	rjmp	.-44     	; 0xfa4 <__ultoa_invert+0x58>
     fd0:	b4 e0       	ldi	r27, 0x04	; 4
     fd2:	a6 95       	lsr	r26
     fd4:	97 95       	ror	r25
     fd6:	87 95       	ror	r24
     fd8:	77 95       	ror	r23
     fda:	67 95       	ror	r22
     fdc:	ba 95       	dec	r27
     fde:	c9 f7       	brne	.-14     	; 0xfd2 <__ultoa_invert+0x86>
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	61 05       	cpc	r22, r1
     fe4:	71 05       	cpc	r23, r1
     fe6:	08 95       	ret
     fe8:	9b 01       	movw	r18, r22
     fea:	ac 01       	movw	r20, r24
     fec:	0a 2e       	mov	r0, r26
     fee:	06 94       	lsr	r0
     ff0:	57 95       	ror	r21
     ff2:	47 95       	ror	r20
     ff4:	37 95       	ror	r19
     ff6:	27 95       	ror	r18
     ff8:	ba 95       	dec	r27
     ffa:	c9 f7       	brne	.-14     	; 0xfee <__ultoa_invert+0xa2>
     ffc:	62 0f       	add	r22, r18
     ffe:	73 1f       	adc	r23, r19
    1000:	84 1f       	adc	r24, r20
    1002:	95 1f       	adc	r25, r21
    1004:	a0 1d       	adc	r26, r0
    1006:	08 95       	ret

00001008 <__prologue_saves__>:
    1008:	2f 92       	push	r2
    100a:	3f 92       	push	r3
    100c:	4f 92       	push	r4
    100e:	5f 92       	push	r5
    1010:	6f 92       	push	r6
    1012:	7f 92       	push	r7
    1014:	8f 92       	push	r8
    1016:	9f 92       	push	r9
    1018:	af 92       	push	r10
    101a:	bf 92       	push	r11
    101c:	cf 92       	push	r12
    101e:	df 92       	push	r13
    1020:	ef 92       	push	r14
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	ca 1b       	sub	r28, r26
    1032:	db 0b       	sbc	r29, r27
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	09 94       	ijmp

00001040 <__epilogue_restores__>:
    1040:	2a 88       	ldd	r2, Y+18	; 0x12
    1042:	39 88       	ldd	r3, Y+17	; 0x11
    1044:	48 88       	ldd	r4, Y+16	; 0x10
    1046:	5f 84       	ldd	r5, Y+15	; 0x0f
    1048:	6e 84       	ldd	r6, Y+14	; 0x0e
    104a:	7d 84       	ldd	r7, Y+13	; 0x0d
    104c:	8c 84       	ldd	r8, Y+12	; 0x0c
    104e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1050:	aa 84       	ldd	r10, Y+10	; 0x0a
    1052:	b9 84       	ldd	r11, Y+9	; 0x09
    1054:	c8 84       	ldd	r12, Y+8	; 0x08
    1056:	df 80       	ldd	r13, Y+7	; 0x07
    1058:	ee 80       	ldd	r14, Y+6	; 0x06
    105a:	fd 80       	ldd	r15, Y+5	; 0x05
    105c:	0c 81       	ldd	r16, Y+4	; 0x04
    105e:	1b 81       	ldd	r17, Y+3	; 0x03
    1060:	aa 81       	ldd	r26, Y+2	; 0x02
    1062:	b9 81       	ldd	r27, Y+1	; 0x01
    1064:	ce 0f       	add	r28, r30
    1066:	d1 1d       	adc	r29, r1
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	ed 01       	movw	r28, r26
    1074:	08 95       	ret

00001076 <_exit>:
    1076:	f8 94       	cli

00001078 <__stop_program>:
    1078:	ff cf       	rjmp	.-2      	; 0x1078 <__stop_program>
