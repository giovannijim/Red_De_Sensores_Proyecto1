
MasterMCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000eb0  00000f44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080011c  0080011c  00000f60  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a6  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009eb  00000000  00000000  000021c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b08  00000000  00000000  00002bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  000036b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005db  00000000  00000000  00003964  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a21  00000000  00000000  00003f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004960  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
  9e:	0c 94 56 07 	jmp	0xeac	; 0xeac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_SETTING_MASTER>:
	
	I2C_WRITE(dato);   //Envia el dato al esclavo
	I2C_STOP();  //No continua, termina la comunicación y la cierra
	
	
}
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	9a 01       	movw	r18, r20
  ac:	ab 01       	movw	r20, r22
  ae:	87 b1       	in	r24, 0x07	; 7
  b0:	8f 7c       	andi	r24, 0xCF	; 207
  b2:	87 b9       	out	0x07, r24	; 7
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	74 e2       	ldi	r23, 0x24	; 36
  b8:	84 ef       	ldi	r24, 0xF4	; 244
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 28 04 	call	0x850	; 0x850 <__udivmodsi4>
  c0:	ca 01       	movw	r24, r20
  c2:	b9 01       	movw	r22, r18
  c4:	60 51       	subi	r22, 0x10	; 16
  c6:	71 09       	sbc	r23, r1
  c8:	81 09       	sbc	r24, r1
  ca:	91 09       	sbc	r25, r1
  cc:	2c 2f       	mov	r18, r28
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	03 2e       	mov	r0, r19
  d6:	00 0c       	add	r0, r0
  d8:	44 0b       	sbc	r20, r20
  da:	55 0b       	sbc	r21, r21
  dc:	0e 94 28 04 	call	0x850	; 0x850 <__udivmodsi4>
  e0:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  e4:	c4 30       	cpi	r28, 0x04	; 4
  e6:	79 f0       	breq	.+30     	; 0x106 <I2C_SETTING_MASTER+0x60>
  e8:	18 f4       	brcc	.+6      	; 0xf0 <I2C_SETTING_MASTER+0x4a>
  ea:	c1 30       	cpi	r28, 0x01	; 1
  ec:	31 f0       	breq	.+12     	; 0xfa <I2C_SETTING_MASTER+0x54>
  ee:	23 c0       	rjmp	.+70     	; 0x136 <I2C_SETTING_MASTER+0x90>
  f0:	c0 31       	cpi	r28, 0x10	; 16
  f2:	91 f0       	breq	.+36     	; 0x118 <I2C_SETTING_MASTER+0x72>
  f4:	c0 34       	cpi	r28, 0x40	; 64
  f6:	c9 f0       	breq	.+50     	; 0x12a <I2C_SETTING_MASTER+0x84>
  f8:	1e c0       	rjmp	.+60     	; 0x136 <I2C_SETTING_MASTER+0x90>
  fa:	e9 eb       	ldi	r30, 0xB9	; 185
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8c 7f       	andi	r24, 0xFC	; 252
 102:	80 83       	st	Z, r24
 104:	1d c0       	rjmp	.+58     	; 0x140 <I2C_SETTING_MASTER+0x9a>
 106:	e9 eb       	ldi	r30, 0xB9	; 185
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	80 83       	st	Z, r24
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
 116:	14 c0       	rjmp	.+40     	; 0x140 <I2C_SETTING_MASTER+0x9a>
 118:	e9 eb       	ldi	r30, 0xB9	; 185
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	8e 7f       	andi	r24, 0xFE	; 254
 120:	80 83       	st	Z, r24
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	80 83       	st	Z, r24
 128:	0b c0       	rjmp	.+22     	; 0x140 <I2C_SETTING_MASTER+0x9a>
 12a:	e9 eb       	ldi	r30, 0xB9	; 185
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8d 6f       	ori	r24, 0xFD	; 253
 132:	80 83       	st	Z, r24
 134:	05 c0       	rjmp	.+10     	; 0x140 <I2C_SETTING_MASTER+0x9a>
 136:	e9 eb       	ldi	r30, 0xB9	; 185
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8c 7f       	andi	r24, 0xFC	; 252
 13e:	80 83       	st	Z, r24
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <I2C_STOP>:
 14a:	84 e9       	ldi	r24, 0x94	; 148
 14c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 150:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 154:	84 fd       	sbrc	r24, 4
 156:	fc cf       	rjmp	.-8      	; 0x150 <I2C_STOP+0x6>
 158:	08 95       	ret

0000015a <I2C_READ>:

// Lee un byte de datos del esclavo I2C
uint8_t I2C_READ(uint8_t address, uint8_t *dato) {
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 15e:	94 ea       	ldi	r25, 0xA4	; 164
 160:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 164:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 168:	99 23       	and	r25, r25
 16a:	e4 f7       	brge	.-8      	; 0x164 <I2C_READ+0xa>

	// Verificar condición de START
	if ((TWSR & 0xF8) != TW_START) {
 16c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 170:	98 7f       	andi	r25, 0xF8	; 248
 172:	98 30       	cpi	r25, 0x08	; 8
 174:	b1 f5       	brne	.+108    	; 0x1e2 <I2C_READ+0x88>
		return 1; // Error: No se pudo iniciar la condición de START
	}

	// Enviar dirección del esclavo con bit de lectura
	TWDR = SLA_R(address);
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 182:	84 e8       	ldi	r24, 0x84	; 132
 184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete la transmisión de la dirección
 188:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 18c:	88 23       	and	r24, r24
 18e:	e4 f7       	brge	.-8      	; 0x188 <I2C_READ+0x2e>
 190:	eb 01       	movw	r28, r22

	// Verificar ACK/NACK de la dirección
	uint8_t twsr_value = TWSR & 0xF8;
 192:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 196:	88 7f       	andi	r24, 0xF8	; 248
	if (twsr_value == TW_MR_SLA_NACK) {
 198:	88 34       	cpi	r24, 0x48	; 72
 19a:	21 f4       	brne	.+8      	; 0x1a4 <I2C_READ+0x4a>
		I2C_STOP(); // Detener si se recibe un NACK
 19c:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_STOP>
		return 1; // Error: NACK recibido
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	20 c0       	rjmp	.+64     	; 0x1e4 <I2C_READ+0x8a>
		} else if (twsr_value != TW_MR_SLA_ACK) {
 1a4:	80 34       	cpi	r24, 0x40	; 64
 1a6:	21 f0       	breq	.+8      	; 0x1b0 <I2C_READ+0x56>
		I2C_STOP(); // Detener si otro estado inesperado
 1a8:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_STOP>
		return 1; // Error: Estado inesperado
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	1a c0       	rjmp	.+52     	; 0x1e4 <I2C_READ+0x8a>
	}

	// Leer un byte del esclavo
	TWCR = (1 << TWEN) | (1 << TWINT); // Leer sin ACK (NACK)
 1b0:	84 e8       	ldi	r24, 0x84	; 132
 1b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete la recepción
 1b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ba:	88 23       	and	r24, r24
 1bc:	e4 f7       	brge	.-8      	; 0x1b6 <I2C_READ+0x5c>

	// Verificar estado de recepción
	twsr_value = TWSR & 0xF8;
 1be:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1c2:	88 7f       	andi	r24, 0xF8	; 248
	if (twsr_value != TW_MR_DATA_NACK && twsr_value != TW_MR_DATA_ACK) {
 1c4:	88 35       	cpi	r24, 0x58	; 88
 1c6:	31 f0       	breq	.+12     	; 0x1d4 <I2C_READ+0x7a>
 1c8:	80 35       	cpi	r24, 0x50	; 80
 1ca:	21 f0       	breq	.+8      	; 0x1d4 <I2C_READ+0x7a>
		I2C_STOP(); // Detener si hay error en la recepción
 1cc:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_STOP>
		return 1; // Error en la recepción
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	08 c0       	rjmp	.+16     	; 0x1e4 <I2C_READ+0x8a>
	}

	// Leer el dato recibido
	*dato = TWDR;
 1d4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1d8:	88 83       	st	Y, r24

	// Generar condición de STOP
      I2C_STOP();
 1da:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_STOP>
  
	return  *dato; // Éxito
 1de:	88 81       	ld	r24, Y
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <I2C_READ+0x8a>
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete

	// Verificar condición de START
	if ((TWSR & 0xF8) != TW_START) {
		return 1; // Error: No se pudo iniciar la condición de START
 1e2:	81 e0       	ldi	r24, 0x01	; 1

	// Generar condición de STOP
      I2C_STOP();
  
	return  *dato; // Éxito
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <LCD_Port>:
}

//Desplazamiento hacia la izquierda
void LCD_Shift_Left(void){
	LCD_CMD(0x01);
	LCD_CMD(0x08);
 1ea:	80 ff       	sbrs	r24, 0
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <LCD_Port+0xc>
 1ee:	9b b1       	in	r25, 0x0b	; 11
 1f0:	90 61       	ori	r25, 0x10	; 16
 1f2:	9b b9       	out	0x0b, r25	; 11
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <LCD_Port+0x12>
 1f6:	9b b1       	in	r25, 0x0b	; 11
 1f8:	9f 7e       	andi	r25, 0xEF	; 239
 1fa:	9b b9       	out	0x0b, r25	; 11
 1fc:	81 ff       	sbrs	r24, 1
 1fe:	04 c0       	rjmp	.+8      	; 0x208 <LCD_Port+0x1e>
 200:	9b b1       	in	r25, 0x0b	; 11
 202:	90 62       	ori	r25, 0x20	; 32
 204:	9b b9       	out	0x0b, r25	; 11
 206:	03 c0       	rjmp	.+6      	; 0x20e <LCD_Port+0x24>
 208:	9b b1       	in	r25, 0x0b	; 11
 20a:	9f 7d       	andi	r25, 0xDF	; 223
 20c:	9b b9       	out	0x0b, r25	; 11
 20e:	82 ff       	sbrs	r24, 2
 210:	04 c0       	rjmp	.+8      	; 0x21a <LCD_Port+0x30>
 212:	9b b1       	in	r25, 0x0b	; 11
 214:	90 64       	ori	r25, 0x40	; 64
 216:	9b b9       	out	0x0b, r25	; 11
 218:	03 c0       	rjmp	.+6      	; 0x220 <LCD_Port+0x36>
 21a:	9b b1       	in	r25, 0x0b	; 11
 21c:	9f 7b       	andi	r25, 0xBF	; 191
 21e:	9b b9       	out	0x0b, r25	; 11
 220:	83 ff       	sbrs	r24, 3
 222:	04 c0       	rjmp	.+8      	; 0x22c <LCD_Port+0x42>
 224:	9b b1       	in	r25, 0x0b	; 11
 226:	90 68       	ori	r25, 0x80	; 128
 228:	9b b9       	out	0x0b, r25	; 11
 22a:	03 c0       	rjmp	.+6      	; 0x232 <LCD_Port+0x48>
 22c:	9b b1       	in	r25, 0x0b	; 11
 22e:	9f 77       	andi	r25, 0x7F	; 127
 230:	9b b9       	out	0x0b, r25	; 11
 232:	84 ff       	sbrs	r24, 4
 234:	04 c0       	rjmp	.+8      	; 0x23e <LCD_Port+0x54>
 236:	95 b1       	in	r25, 0x05	; 5
 238:	91 60       	ori	r25, 0x01	; 1
 23a:	95 b9       	out	0x05, r25	; 5
 23c:	03 c0       	rjmp	.+6      	; 0x244 <LCD_Port+0x5a>
 23e:	95 b1       	in	r25, 0x05	; 5
 240:	9e 7f       	andi	r25, 0xFE	; 254
 242:	95 b9       	out	0x05, r25	; 5
 244:	85 ff       	sbrs	r24, 5
 246:	04 c0       	rjmp	.+8      	; 0x250 <LCD_Port+0x66>
 248:	95 b1       	in	r25, 0x05	; 5
 24a:	92 60       	ori	r25, 0x02	; 2
 24c:	95 b9       	out	0x05, r25	; 5
 24e:	03 c0       	rjmp	.+6      	; 0x256 <LCD_Port+0x6c>
 250:	95 b1       	in	r25, 0x05	; 5
 252:	9d 7f       	andi	r25, 0xFD	; 253
 254:	95 b9       	out	0x05, r25	; 5
 256:	86 ff       	sbrs	r24, 6
 258:	04 c0       	rjmp	.+8      	; 0x262 <LCD_Port+0x78>
 25a:	95 b1       	in	r25, 0x05	; 5
 25c:	94 60       	ori	r25, 0x04	; 4
 25e:	95 b9       	out	0x05, r25	; 5
 260:	03 c0       	rjmp	.+6      	; 0x268 <LCD_Port+0x7e>
 262:	95 b1       	in	r25, 0x05	; 5
 264:	9b 7f       	andi	r25, 0xFB	; 251
 266:	95 b9       	out	0x05, r25	; 5
 268:	88 23       	and	r24, r24
 26a:	24 f4       	brge	.+8      	; 0x274 <LCD_Port+0x8a>
 26c:	85 b1       	in	r24, 0x05	; 5
 26e:	88 60       	ori	r24, 0x08	; 8
 270:	85 b9       	out	0x05, r24	; 5
 272:	08 95       	ret
 274:	85 b1       	in	r24, 0x05	; 5
 276:	87 7f       	andi	r24, 0xF7	; 247
 278:	85 b9       	out	0x05, r24	; 5
 27a:	08 95       	ret

0000027c <LCD_CMD>:
 27c:	9b b1       	in	r25, 0x0b	; 11
 27e:	9b 7f       	andi	r25, 0xFB	; 251
 280:	9b b9       	out	0x0b, r25	; 11
 282:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Port>
 286:	8b b1       	in	r24, 0x0b	; 11
 288:	88 60       	ori	r24, 0x08	; 8
 28a:	8b b9       	out	0x0b, r24	; 11
 28c:	8f e7       	ldi	r24, 0x7F	; 127
 28e:	9e e3       	ldi	r25, 0x3E	; 62
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <LCD_CMD+0x14>
 294:	00 c0       	rjmp	.+0      	; 0x296 <LCD_CMD+0x1a>
 296:	00 00       	nop
 298:	8b b1       	in	r24, 0x0b	; 11
 29a:	87 7f       	andi	r24, 0xF7	; 247
 29c:	8b b9       	out	0x0b, r24	; 11
 29e:	8f e7       	ldi	r24, 0x7F	; 127
 2a0:	9e e3       	ldi	r25, 0x3E	; 62
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_CMD+0x26>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_CMD+0x2c>
 2a8:	00 00       	nop
 2aa:	08 95       	ret

000002ac <init_8bits_LCD>:
 2ac:	84 b1       	in	r24, 0x04	; 4
 2ae:	8f 60       	ori	r24, 0x0F	; 15
 2b0:	84 b9       	out	0x04, r24	; 4
 2b2:	15 b8       	out	0x05, r1	; 5
 2b4:	8a b1       	in	r24, 0x0a	; 10
 2b6:	8c 6f       	ori	r24, 0xFC	; 252
 2b8:	8a b9       	out	0x0a, r24	; 10
 2ba:	1b b8       	out	0x0b, r1	; 11
 2bc:	8b b1       	in	r24, 0x0b	; 11
 2be:	83 7f       	andi	r24, 0xF3	; 243
 2c0:	8b b9       	out	0x0b, r24	; 11
 2c2:	2f ef       	ldi	r18, 0xFF	; 255
 2c4:	89 ef       	ldi	r24, 0xF9	; 249
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <init_8bits_LCD+0x1c>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <init_8bits_LCD+0x26>
 2d2:	00 00       	nop
 2d4:	80 e3       	ldi	r24, 0x30	; 48
 2d6:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_CMD>
 2da:	8f e1       	ldi	r24, 0x1F	; 31
 2dc:	9e e4       	ldi	r25, 0x4E	; 78
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <init_8bits_LCD+0x32>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <init_8bits_LCD+0x38>
 2e4:	00 00       	nop
 2e6:	80 e3       	ldi	r24, 0x30	; 48
 2e8:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_CMD>
 2ec:	8f e1       	ldi	r24, 0x1F	; 31
 2ee:	9e e4       	ldi	r25, 0x4E	; 78
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <init_8bits_LCD+0x44>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <init_8bits_LCD+0x4a>
 2f6:	00 00       	nop
 2f8:	80 e3       	ldi	r24, 0x30	; 48
 2fa:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_CMD>
 2fe:	8f e3       	ldi	r24, 0x3F	; 63
 300:	9c e9       	ldi	r25, 0x9C	; 156
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <init_8bits_LCD+0x56>
 306:	00 c0       	rjmp	.+0      	; 0x308 <init_8bits_LCD+0x5c>
 308:	00 00       	nop
 30a:	88 e3       	ldi	r24, 0x38	; 56
 30c:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_CMD>
 310:	88 e0       	ldi	r24, 0x08	; 8
 312:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_CMD>
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_CMD>
 31c:	86 e0       	ldi	r24, 0x06	; 6
 31e:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_CMD>
 322:	8c e0       	ldi	r24, 0x0C	; 12
 324:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_CMD>
 328:	08 95       	ret

0000032a <LCD_Write_Char>:
 32a:	9b b1       	in	r25, 0x0b	; 11
 32c:	94 60       	ori	r25, 0x04	; 4
 32e:	9b b9       	out	0x0b, r25	; 11
 330:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Port>
 334:	8b b1       	in	r24, 0x0b	; 11
 336:	88 60       	ori	r24, 0x08	; 8
 338:	8b b9       	out	0x0b, r24	; 11
 33a:	8f e7       	ldi	r24, 0x7F	; 127
 33c:	9e e3       	ldi	r25, 0x3E	; 62
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <LCD_Write_Char+0x14>
 342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_Write_Char+0x1a>
 344:	00 00       	nop
 346:	8b b1       	in	r24, 0x0b	; 11
 348:	87 7f       	andi	r24, 0xF7	; 247
 34a:	8b b9       	out	0x0b, r24	; 11
 34c:	8f e7       	ldi	r24, 0x7F	; 127
 34e:	9e e3       	ldi	r25, 0x3E	; 62
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <LCD_Write_Char+0x26>
 354:	00 c0       	rjmp	.+0      	; 0x356 <LCD_Write_Char+0x2c>
 356:	00 00       	nop
 358:	08 95       	ret

0000035a <LCD_Write_String>:
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	8c 01       	movw	r16, r24
 364:	c0 e0       	ldi	r28, 0x00	; 0
 366:	d0 e0       	ldi	r29, 0x00	; 0
 368:	03 c0       	rjmp	.+6      	; 0x370 <LCD_Write_String+0x16>
 36a:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write_Char>
 36e:	21 96       	adiw	r28, 0x01	; 1
 370:	f8 01       	movw	r30, r16
 372:	ec 0f       	add	r30, r28
 374:	fd 1f       	adc	r31, r29
 376:	80 81       	ld	r24, Z
 378:	81 11       	cpse	r24, r1
 37a:	f7 cf       	rjmp	.-18     	; 0x36a <LCD_Write_String+0x10>
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	08 95       	ret

00000386 <LCD_Set_Cursor>:
		z = temp >> 4;
		y = temp & 0x0F;
		LCD_CMD(z);
		LCD_CMD(y);
	}*/
	if(a == 0)
 386:	81 11       	cpse	r24, r1
 388:	05 c0       	rjmp	.+10     	; 0x394 <LCD_Set_Cursor+0xe>
	LCD_CMD(0x80 + b);  //Posicionarse en la linea 1 y se suma la columna
 38a:	80 e8       	ldi	r24, 0x80	; 128
 38c:	86 0f       	add	r24, r22
 38e:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_CMD>
 392:	08 95       	ret
	
	else if(a == 1)
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	21 f4       	brne	.+8      	; 0x3a0 <LCD_Set_Cursor+0x1a>
	LCD_CMD(0xC0 + b);  //Posicionarse en la linea 2  y se suma la columna
 398:	80 ec       	ldi	r24, 0xC0	; 192
 39a:	86 0f       	add	r24, r22
 39c:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_CMD>
 3a0:	08 95       	ret

000003a2 <__vector_18>:
}


// Vector de interrupcion UART
ISR(USART_RX_vect)
{
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	4f 93       	push	r20
 3b2:	5f 93       	push	r21
 3b4:	6f 93       	push	r22
 3b6:	7f 93       	push	r23
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	af 93       	push	r26
 3be:	bf 93       	push	r27
 3c0:	ef 93       	push	r30
 3c2:	ff 93       	push	r31
	BufferRX = UDR0;
 3c4:	e6 ec       	ldi	r30, 0xC6	; 198
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <BufferRX>
	if (UDR0 == 'a')
 3ce:	80 81       	ld	r24, Z
 3d0:	81 36       	cpi	r24, 0x61	; 97
 3d2:	41 f4       	brne	.+16     	; 0x3e4 <__vector_18+0x42>
	{
		PORTB |= 1<<PORTB5;
 3d4:	85 b1       	in	r24, 0x05	; 5
 3d6:	80 62       	ori	r24, 0x20	; 32
 3d8:	85 b9       	out	0x05, r24	; 5
		writeUART(BufferSensorHumedad);
 3da:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <BufferSensorHumedad>
 3de:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <writeUART>
 3e2:	03 c0       	rjmp	.+6      	; 0x3ea <__vector_18+0x48>
	}
	else{
		PORTB &= ~1<<PORTB5;
 3e4:	85 b1       	in	r24, 0x05	; 5
 3e6:	80 7c       	andi	r24, 0xC0	; 192
 3e8:	85 b9       	out	0x05, r24	; 5
	}
}
 3ea:	ff 91       	pop	r31
 3ec:	ef 91       	pop	r30
 3ee:	bf 91       	pop	r27
 3f0:	af 91       	pop	r26
 3f2:	9f 91       	pop	r25
 3f4:	8f 91       	pop	r24
 3f6:	7f 91       	pop	r23
 3f8:	6f 91       	pop	r22
 3fa:	5f 91       	pop	r21
 3fc:	4f 91       	pop	r20
 3fe:	3f 91       	pop	r19
 400:	2f 91       	pop	r18
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

0000040c <float_to_char_s1>:


// Subrutina para convertir una variable de tipo float (con valores decimales) a una cadena Char
void float_to_char_s1(uint8_t value_adch){
 40c:	cf 92       	push	r12
 40e:	df 92       	push	r13
 410:	ef 92       	push	r14
 412:	ff 92       	push	r15
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
	int a, b;									// Se designa el tipo de variable de a y b
	voltage = value_adch * 0.01960784314;		// Se realizar una regla de 3 para escalar [0-255] a [0.00-5.00]
 418:	68 2f       	mov	r22, r24
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 1b 03 	call	0x636	; 0x636 <__floatsisf>
 424:	21 ea       	ldi	r18, 0xA1	; 161
 426:	30 ea       	ldi	r19, 0xA0	; 160
 428:	40 ea       	ldi	r20, 0xA0	; 160
 42a:	5c e3       	ldi	r21, 0x3C	; 60
 42c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__mulsf3>
 430:	6b 01       	movw	r12, r22
 432:	7c 01       	movw	r14, r24
 434:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <voltage>
 438:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <voltage+0x1>
 43c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <voltage+0x2>
 440:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <voltage+0x3>
	
	a = (int)voltage;							// Se obtienen las cifras enteras de la variable float
 444:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__fixsfsi>
 448:	c6 2f       	mov	r28, r22
 44a:	d7 2f       	mov	r29, r23
	b = ((int)(voltage*1000))%1000;				// Se obtienen las cifras decimales de la variable float
 44c:	20 e0       	ldi	r18, 0x00	; 0
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	4a e7       	ldi	r20, 0x7A	; 122
 452:	54 e4       	ldi	r21, 0x44	; 68
 454:	c7 01       	movw	r24, r14
 456:	b6 01       	movw	r22, r12
 458:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__mulsf3>
 45c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__fixsfsi>
 460:	cb 01       	movw	r24, r22
 462:	68 ee       	ldi	r22, 0xE8	; 232
 464:	73 e0       	ldi	r23, 0x03	; 3
 466:	0e 94 14 04 	call	0x828	; 0x828 <__divmodhi4>
	
	snprintf(buffer_s1, 5, "%d.%2.2d", a, b);		// Se convierte une todo en una cadena char
 46a:	9f 93       	push	r25
 46c:	8f 93       	push	r24
 46e:	df 93       	push	r29
 470:	cf 93       	push	r28
 472:	8b e0       	ldi	r24, 0x0B	; 11
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	9f 93       	push	r25
 478:	8f 93       	push	r24
 47a:	1f 92       	push	r1
 47c:	85 e0       	ldi	r24, 0x05	; 5
 47e:	8f 93       	push	r24
 480:	86 e0       	ldi	r24, 0x06	; 6
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	9f 93       	push	r25
 486:	8f 93       	push	r24
 488:	0e 94 5e 04 	call	0x8bc	; 0x8bc <snprintf>
 48c:	8d b7       	in	r24, 0x3d	; 61
 48e:	9e b7       	in	r25, 0x3e	; 62
 490:	0a 96       	adiw	r24, 0x0a	; 10
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	f8 94       	cli
 496:	9e bf       	out	0x3e, r25	; 62
 498:	0f be       	out	0x3f, r0	; 63
 49a:	8d bf       	out	0x3d, r24	; 61
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	ff 90       	pop	r15
 4a2:	ef 90       	pop	r14
 4a4:	df 90       	pop	r13
 4a6:	cf 90       	pop	r12
 4a8:	08 95       	ret

000004aa <main>:
char buffer_s2[6] = {'0'};
uint8_t receivedChar;

int main(void)
{
	cli();
 4aa:	f8 94       	cli
	init_8bits_LCD();
 4ac:	0e 94 56 01 	call	0x2ac	; 0x2ac <init_8bits_LCD>
	initUART9600();
 4b0:	0e 94 c1 02 	call	0x582	; 0x582 <initUART9600>
	I2C_SETTING_MASTER(4, 200);
 4b4:	48 ec       	ldi	r20, 0xC8	; 200
 4b6:	50 e0       	ldi	r21, 0x00	; 0
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	84 e0       	ldi	r24, 0x04	; 4
 4be:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_SETTING_MASTER>
	sei();
 4c2:	78 94       	sei
	
	LCD_Set_Cursor(0,1);		// Se establece el cursor en y, x
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Set_Cursor>
	// Se escriben los siguientes caracteres en la pantalla
	LCD_Write_Char('H');
 4cc:	88 e4       	ldi	r24, 0x48	; 72
 4ce:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write_Char>
	LCD_Write_Char('U');
 4d2:	85 e5       	ldi	r24, 0x55	; 85
 4d4:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write_Char>
	LCD_Write_Char('M');
 4d8:	8d e4       	ldi	r24, 0x4D	; 77
 4da:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write_Char>
	LCD_Set_Cursor(0,7);		// Se establece el cursor en y, x
 4de:	67 e0       	ldi	r22, 0x07	; 7
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Set_Cursor>
	// Se escriben los siguientes caracteres en la pantalla
	LCD_Write_Char('T');
 4e6:	84 e5       	ldi	r24, 0x54	; 84
 4e8:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write_Char>
	LCD_Write_Char('M');
 4ec:	8d e4       	ldi	r24, 0x4D	; 77
 4ee:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write_Char>
	LCD_Write_Char('P');
 4f2:	80 e5       	ldi	r24, 0x50	; 80
 4f4:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write_Char>
	
	LCD_Set_Cursor(0,12);		// Se establece el cursor en y, x
 4f8:	6c e0       	ldi	r22, 0x0C	; 12
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Set_Cursor>
	// Se escriben los siguientes caracteres en la pantalla
	LCD_Write_Char('I');
 500:	89 e4       	ldi	r24, 0x49	; 73
 502:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write_Char>
	LCD_Write_Char('2');
 506:	82 e3       	ldi	r24, 0x32	; 50
 508:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write_Char>
	LCD_Write_Char('C');
 50c:	83 e4       	ldi	r24, 0x43	; 67
 50e:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write_Char>
			receivedChar = UDR0;
			// Procesa el dato recibido
		}*/
		//char receivedChar = uart_receive();
		
		BufferSensorHumedad = I2C_READ(sensorHumedad, &data);
 512:	6c e1       	ldi	r22, 0x1C	; 28
 514:	71 e0       	ldi	r23, 0x01	; 1
 516:	80 e3       	ldi	r24, 0x30	; 48
 518:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_READ>
 51c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <BufferSensorHumedad>
		float_to_char_s1(BufferSensorHumedad);
 520:	0e 94 06 02 	call	0x40c	; 0x40c <float_to_char_s1>
		LCD_Set_Cursor(1,1);		// Se establece el cursor en y, x
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Set_Cursor>
		LCD_Write_String(buffer_s1);
 52c:	86 e0       	ldi	r24, 0x06	; 6
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_Write_String>
			// Enviar de vuelta el dato para verificar la recepción
			while (!(UCSR0A & (1 << UDRE0)));  // Esperar a que el buffer de transmisión esté vacío
			UDR0 = BufferSensorHumedad;
		}*/
		
		BufferSensorTemperatura = 255;
 534:	8f ef       	ldi	r24, 0xFF	; 255
 536:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <BufferSensorTemperatura>
		snprintf(buffer_s2, sizeof(buffer_s2), "%d.%d C", BufferSensorTemperatura / 8, (BufferSensorTemperatura % 8) * 100 / 8);
 53a:	1f 92       	push	r1
 53c:	87 e5       	ldi	r24, 0x57	; 87
 53e:	8f 93       	push	r24
 540:	1f 92       	push	r1
 542:	8f e1       	ldi	r24, 0x1F	; 31
 544:	8f 93       	push	r24
 546:	84 e1       	ldi	r24, 0x14	; 20
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	9f 93       	push	r25
 54c:	8f 93       	push	r24
 54e:	1f 92       	push	r1
 550:	86 e0       	ldi	r24, 0x06	; 6
 552:	8f 93       	push	r24
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	9f 93       	push	r25
 55a:	8f 93       	push	r24
 55c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <snprintf>
		LCD_Set_Cursor(1,6);		// Se establece el cursor en y, x
 560:	66 e0       	ldi	r22, 0x06	; 6
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Set_Cursor>
		LCD_Write_String(buffer_s2);
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_Write_String>
 570:	8d b7       	in	r24, 0x3d	; 61
 572:	9e b7       	in	r25, 0x3e	; 62
 574:	0a 96       	adiw	r24, 0x0a	; 10
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	f8 94       	cli
 57a:	9e bf       	out	0x3e, r25	; 62
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	8d bf       	out	0x3d, r24	; 61
 580:	c8 cf       	rjmp	.-112    	; 0x512 <main+0x68>

00000582 <initUART9600>:
#include <stdint.h>

void initUART9600(void){
	
	//Paso 1: RX y TX como salida
	DDRD &= ~(1<<DDD0);
 582:	8a b1       	in	r24, 0x0a	; 10
 584:	8e 7f       	andi	r24, 0xFE	; 254
 586:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
 588:	8a b1       	in	r24, 0x0a	; 10
 58a:	82 60       	ori	r24, 0x02	; 2
 58c:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2:Configurar UCSR0A
	UCSR0A = 0;
 58e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: configurar UCSR0B donde se habilita ISR de recepcion y se habilita RX y TX
	UCSR0B = 0;
 592:	e1 ec       	ldi	r30, 0xC1	; 193
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
 598:	80 81       	ld	r24, Z
 59a:	88 69       	ori	r24, 0x98	; 152
 59c:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, asincrono, paridad: none, 1 bit stop, data bits de 8 bits
	UCSR0C = 0;
 59e:	e2 ec       	ldi	r30, 0xC2	; 194
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 5a4:	80 81       	ld	r24, Z
 5a6:	86 60       	ori	r24, 0x06	; 6
 5a8:	80 83       	st	Z, r24
	
	//Paso 5: COnfigurar velocidad de baudrate a 9600
	UBRR0 = 103;
 5aa:	87 e6       	ldi	r24, 0x67	; 103
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 5b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 5b6:	08 95       	ret

000005b8 <writeUART>:
	
}

void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  // hasta que la bandera este en 1
 5b8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 5bc:	95 ff       	sbrs	r25, 5
 5be:	fc cf       	rjmp	.-8      	; 0x5b8 <writeUART>
	UDR0 = Caracter;				// Enviar el caracter al arduino
 5c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 5c4:	08 95       	ret

000005c6 <__fixsfsi>:
 5c6:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__fixunssfsi>
 5ca:	68 94       	set
 5cc:	b1 11       	cpse	r27, r1
 5ce:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_szero>
 5d2:	08 95       	ret

000005d4 <__fixunssfsi>:
 5d4:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fp_splitA>
 5d8:	88 f0       	brcs	.+34     	; 0x5fc <__fixunssfsi+0x28>
 5da:	9f 57       	subi	r25, 0x7F	; 127
 5dc:	98 f0       	brcs	.+38     	; 0x604 <__fixunssfsi+0x30>
 5de:	b9 2f       	mov	r27, r25
 5e0:	99 27       	eor	r25, r25
 5e2:	b7 51       	subi	r27, 0x17	; 23
 5e4:	b0 f0       	brcs	.+44     	; 0x612 <__fixunssfsi+0x3e>
 5e6:	e1 f0       	breq	.+56     	; 0x620 <__fixunssfsi+0x4c>
 5e8:	66 0f       	add	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	88 1f       	adc	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	1a f0       	brmi	.+6      	; 0x5f8 <__fixunssfsi+0x24>
 5f2:	ba 95       	dec	r27
 5f4:	c9 f7       	brne	.-14     	; 0x5e8 <__fixunssfsi+0x14>
 5f6:	14 c0       	rjmp	.+40     	; 0x620 <__fixunssfsi+0x4c>
 5f8:	b1 30       	cpi	r27, 0x01	; 1
 5fa:	91 f0       	breq	.+36     	; 0x620 <__fixunssfsi+0x4c>
 5fc:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_zero>
 600:	b1 e0       	ldi	r27, 0x01	; 1
 602:	08 95       	ret
 604:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__fp_zero>
 608:	67 2f       	mov	r22, r23
 60a:	78 2f       	mov	r23, r24
 60c:	88 27       	eor	r24, r24
 60e:	b8 5f       	subi	r27, 0xF8	; 248
 610:	39 f0       	breq	.+14     	; 0x620 <__fixunssfsi+0x4c>
 612:	b9 3f       	cpi	r27, 0xF9	; 249
 614:	cc f3       	brlt	.-14     	; 0x608 <__fixunssfsi+0x34>
 616:	86 95       	lsr	r24
 618:	77 95       	ror	r23
 61a:	67 95       	ror	r22
 61c:	b3 95       	inc	r27
 61e:	d9 f7       	brne	.-10     	; 0x616 <__fixunssfsi+0x42>
 620:	3e f4       	brtc	.+14     	; 0x630 <__fixunssfsi+0x5c>
 622:	90 95       	com	r25
 624:	80 95       	com	r24
 626:	70 95       	com	r23
 628:	61 95       	neg	r22
 62a:	7f 4f       	sbci	r23, 0xFF	; 255
 62c:	8f 4f       	sbci	r24, 0xFF	; 255
 62e:	9f 4f       	sbci	r25, 0xFF	; 255
 630:	08 95       	ret

00000632 <__floatunsisf>:
 632:	e8 94       	clt
 634:	09 c0       	rjmp	.+18     	; 0x648 <__floatsisf+0x12>

00000636 <__floatsisf>:
 636:	97 fb       	bst	r25, 7
 638:	3e f4       	brtc	.+14     	; 0x648 <__floatsisf+0x12>
 63a:	90 95       	com	r25
 63c:	80 95       	com	r24
 63e:	70 95       	com	r23
 640:	61 95       	neg	r22
 642:	7f 4f       	sbci	r23, 0xFF	; 255
 644:	8f 4f       	sbci	r24, 0xFF	; 255
 646:	9f 4f       	sbci	r25, 0xFF	; 255
 648:	99 23       	and	r25, r25
 64a:	a9 f0       	breq	.+42     	; 0x676 <__floatsisf+0x40>
 64c:	f9 2f       	mov	r31, r25
 64e:	96 e9       	ldi	r25, 0x96	; 150
 650:	bb 27       	eor	r27, r27
 652:	93 95       	inc	r25
 654:	f6 95       	lsr	r31
 656:	87 95       	ror	r24
 658:	77 95       	ror	r23
 65a:	67 95       	ror	r22
 65c:	b7 95       	ror	r27
 65e:	f1 11       	cpse	r31, r1
 660:	f8 cf       	rjmp	.-16     	; 0x652 <__floatsisf+0x1c>
 662:	fa f4       	brpl	.+62     	; 0x6a2 <__floatsisf+0x6c>
 664:	bb 0f       	add	r27, r27
 666:	11 f4       	brne	.+4      	; 0x66c <__floatsisf+0x36>
 668:	60 ff       	sbrs	r22, 0
 66a:	1b c0       	rjmp	.+54     	; 0x6a2 <__floatsisf+0x6c>
 66c:	6f 5f       	subi	r22, 0xFF	; 255
 66e:	7f 4f       	sbci	r23, 0xFF	; 255
 670:	8f 4f       	sbci	r24, 0xFF	; 255
 672:	9f 4f       	sbci	r25, 0xFF	; 255
 674:	16 c0       	rjmp	.+44     	; 0x6a2 <__floatsisf+0x6c>
 676:	88 23       	and	r24, r24
 678:	11 f0       	breq	.+4      	; 0x67e <__floatsisf+0x48>
 67a:	96 e9       	ldi	r25, 0x96	; 150
 67c:	11 c0       	rjmp	.+34     	; 0x6a0 <__floatsisf+0x6a>
 67e:	77 23       	and	r23, r23
 680:	21 f0       	breq	.+8      	; 0x68a <__floatsisf+0x54>
 682:	9e e8       	ldi	r25, 0x8E	; 142
 684:	87 2f       	mov	r24, r23
 686:	76 2f       	mov	r23, r22
 688:	05 c0       	rjmp	.+10     	; 0x694 <__floatsisf+0x5e>
 68a:	66 23       	and	r22, r22
 68c:	71 f0       	breq	.+28     	; 0x6aa <__floatsisf+0x74>
 68e:	96 e8       	ldi	r25, 0x86	; 134
 690:	86 2f       	mov	r24, r22
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	2a f0       	brmi	.+10     	; 0x6a2 <__floatsisf+0x6c>
 698:	9a 95       	dec	r25
 69a:	66 0f       	add	r22, r22
 69c:	77 1f       	adc	r23, r23
 69e:	88 1f       	adc	r24, r24
 6a0:	da f7       	brpl	.-10     	; 0x698 <__floatsisf+0x62>
 6a2:	88 0f       	add	r24, r24
 6a4:	96 95       	lsr	r25
 6a6:	87 95       	ror	r24
 6a8:	97 f9       	bld	r25, 7
 6aa:	08 95       	ret

000006ac <__fp_split3>:
 6ac:	57 fd       	sbrc	r21, 7
 6ae:	90 58       	subi	r25, 0x80	; 128
 6b0:	44 0f       	add	r20, r20
 6b2:	55 1f       	adc	r21, r21
 6b4:	59 f0       	breq	.+22     	; 0x6cc <__fp_splitA+0x10>
 6b6:	5f 3f       	cpi	r21, 0xFF	; 255
 6b8:	71 f0       	breq	.+28     	; 0x6d6 <__fp_splitA+0x1a>
 6ba:	47 95       	ror	r20

000006bc <__fp_splitA>:
 6bc:	88 0f       	add	r24, r24
 6be:	97 fb       	bst	r25, 7
 6c0:	99 1f       	adc	r25, r25
 6c2:	61 f0       	breq	.+24     	; 0x6dc <__fp_splitA+0x20>
 6c4:	9f 3f       	cpi	r25, 0xFF	; 255
 6c6:	79 f0       	breq	.+30     	; 0x6e6 <__fp_splitA+0x2a>
 6c8:	87 95       	ror	r24
 6ca:	08 95       	ret
 6cc:	12 16       	cp	r1, r18
 6ce:	13 06       	cpc	r1, r19
 6d0:	14 06       	cpc	r1, r20
 6d2:	55 1f       	adc	r21, r21
 6d4:	f2 cf       	rjmp	.-28     	; 0x6ba <__fp_split3+0xe>
 6d6:	46 95       	lsr	r20
 6d8:	f1 df       	rcall	.-30     	; 0x6bc <__fp_splitA>
 6da:	08 c0       	rjmp	.+16     	; 0x6ec <__fp_splitA+0x30>
 6dc:	16 16       	cp	r1, r22
 6de:	17 06       	cpc	r1, r23
 6e0:	18 06       	cpc	r1, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	f1 cf       	rjmp	.-30     	; 0x6c8 <__fp_splitA+0xc>
 6e6:	86 95       	lsr	r24
 6e8:	71 05       	cpc	r23, r1
 6ea:	61 05       	cpc	r22, r1
 6ec:	08 94       	sec
 6ee:	08 95       	ret

000006f0 <__fp_zero>:
 6f0:	e8 94       	clt

000006f2 <__fp_szero>:
 6f2:	bb 27       	eor	r27, r27
 6f4:	66 27       	eor	r22, r22
 6f6:	77 27       	eor	r23, r23
 6f8:	cb 01       	movw	r24, r22
 6fa:	97 f9       	bld	r25, 7
 6fc:	08 95       	ret

000006fe <__mulsf3>:
 6fe:	0e 94 92 03 	call	0x724	; 0x724 <__mulsf3x>
 702:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_round>
 706:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_pscA>
 70a:	38 f0       	brcs	.+14     	; 0x71a <__mulsf3+0x1c>
 70c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__fp_pscB>
 710:	20 f0       	brcs	.+8      	; 0x71a <__mulsf3+0x1c>
 712:	95 23       	and	r25, r21
 714:	11 f0       	breq	.+4      	; 0x71a <__mulsf3+0x1c>
 716:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_inf>
 71a:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__fp_nan>
 71e:	11 24       	eor	r1, r1
 720:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_szero>

00000724 <__mulsf3x>:
 724:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_split3>
 728:	70 f3       	brcs	.-36     	; 0x706 <__mulsf3+0x8>

0000072a <__mulsf3_pse>:
 72a:	95 9f       	mul	r25, r21
 72c:	c1 f3       	breq	.-16     	; 0x71e <__mulsf3+0x20>
 72e:	95 0f       	add	r25, r21
 730:	50 e0       	ldi	r21, 0x00	; 0
 732:	55 1f       	adc	r21, r21
 734:	62 9f       	mul	r22, r18
 736:	f0 01       	movw	r30, r0
 738:	72 9f       	mul	r23, r18
 73a:	bb 27       	eor	r27, r27
 73c:	f0 0d       	add	r31, r0
 73e:	b1 1d       	adc	r27, r1
 740:	63 9f       	mul	r22, r19
 742:	aa 27       	eor	r26, r26
 744:	f0 0d       	add	r31, r0
 746:	b1 1d       	adc	r27, r1
 748:	aa 1f       	adc	r26, r26
 74a:	64 9f       	mul	r22, r20
 74c:	66 27       	eor	r22, r22
 74e:	b0 0d       	add	r27, r0
 750:	a1 1d       	adc	r26, r1
 752:	66 1f       	adc	r22, r22
 754:	82 9f       	mul	r24, r18
 756:	22 27       	eor	r18, r18
 758:	b0 0d       	add	r27, r0
 75a:	a1 1d       	adc	r26, r1
 75c:	62 1f       	adc	r22, r18
 75e:	73 9f       	mul	r23, r19
 760:	b0 0d       	add	r27, r0
 762:	a1 1d       	adc	r26, r1
 764:	62 1f       	adc	r22, r18
 766:	83 9f       	mul	r24, r19
 768:	a0 0d       	add	r26, r0
 76a:	61 1d       	adc	r22, r1
 76c:	22 1f       	adc	r18, r18
 76e:	74 9f       	mul	r23, r20
 770:	33 27       	eor	r19, r19
 772:	a0 0d       	add	r26, r0
 774:	61 1d       	adc	r22, r1
 776:	23 1f       	adc	r18, r19
 778:	84 9f       	mul	r24, r20
 77a:	60 0d       	add	r22, r0
 77c:	21 1d       	adc	r18, r1
 77e:	82 2f       	mov	r24, r18
 780:	76 2f       	mov	r23, r22
 782:	6a 2f       	mov	r22, r26
 784:	11 24       	eor	r1, r1
 786:	9f 57       	subi	r25, 0x7F	; 127
 788:	50 40       	sbci	r21, 0x00	; 0
 78a:	9a f0       	brmi	.+38     	; 0x7b2 <__mulsf3_pse+0x88>
 78c:	f1 f0       	breq	.+60     	; 0x7ca <__mulsf3_pse+0xa0>
 78e:	88 23       	and	r24, r24
 790:	4a f0       	brmi	.+18     	; 0x7a4 <__mulsf3_pse+0x7a>
 792:	ee 0f       	add	r30, r30
 794:	ff 1f       	adc	r31, r31
 796:	bb 1f       	adc	r27, r27
 798:	66 1f       	adc	r22, r22
 79a:	77 1f       	adc	r23, r23
 79c:	88 1f       	adc	r24, r24
 79e:	91 50       	subi	r25, 0x01	; 1
 7a0:	50 40       	sbci	r21, 0x00	; 0
 7a2:	a9 f7       	brne	.-22     	; 0x78e <__mulsf3_pse+0x64>
 7a4:	9e 3f       	cpi	r25, 0xFE	; 254
 7a6:	51 05       	cpc	r21, r1
 7a8:	80 f0       	brcs	.+32     	; 0x7ca <__mulsf3_pse+0xa0>
 7aa:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_inf>
 7ae:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_szero>
 7b2:	5f 3f       	cpi	r21, 0xFF	; 255
 7b4:	e4 f3       	brlt	.-8      	; 0x7ae <__mulsf3_pse+0x84>
 7b6:	98 3e       	cpi	r25, 0xE8	; 232
 7b8:	d4 f3       	brlt	.-12     	; 0x7ae <__mulsf3_pse+0x84>
 7ba:	86 95       	lsr	r24
 7bc:	77 95       	ror	r23
 7be:	67 95       	ror	r22
 7c0:	b7 95       	ror	r27
 7c2:	f7 95       	ror	r31
 7c4:	e7 95       	ror	r30
 7c6:	9f 5f       	subi	r25, 0xFF	; 255
 7c8:	c1 f7       	brne	.-16     	; 0x7ba <__mulsf3_pse+0x90>
 7ca:	fe 2b       	or	r31, r30
 7cc:	88 0f       	add	r24, r24
 7ce:	91 1d       	adc	r25, r1
 7d0:	96 95       	lsr	r25
 7d2:	87 95       	ror	r24
 7d4:	97 f9       	bld	r25, 7
 7d6:	08 95       	ret

000007d8 <__fp_inf>:
 7d8:	97 f9       	bld	r25, 7
 7da:	9f 67       	ori	r25, 0x7F	; 127
 7dc:	80 e8       	ldi	r24, 0x80	; 128
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	08 95       	ret

000007e4 <__fp_nan>:
 7e4:	9f ef       	ldi	r25, 0xFF	; 255
 7e6:	80 ec       	ldi	r24, 0xC0	; 192
 7e8:	08 95       	ret

000007ea <__fp_pscA>:
 7ea:	00 24       	eor	r0, r0
 7ec:	0a 94       	dec	r0
 7ee:	16 16       	cp	r1, r22
 7f0:	17 06       	cpc	r1, r23
 7f2:	18 06       	cpc	r1, r24
 7f4:	09 06       	cpc	r0, r25
 7f6:	08 95       	ret

000007f8 <__fp_pscB>:
 7f8:	00 24       	eor	r0, r0
 7fa:	0a 94       	dec	r0
 7fc:	12 16       	cp	r1, r18
 7fe:	13 06       	cpc	r1, r19
 800:	14 06       	cpc	r1, r20
 802:	05 06       	cpc	r0, r21
 804:	08 95       	ret

00000806 <__fp_round>:
 806:	09 2e       	mov	r0, r25
 808:	03 94       	inc	r0
 80a:	00 0c       	add	r0, r0
 80c:	11 f4       	brne	.+4      	; 0x812 <__fp_round+0xc>
 80e:	88 23       	and	r24, r24
 810:	52 f0       	brmi	.+20     	; 0x826 <__fp_round+0x20>
 812:	bb 0f       	add	r27, r27
 814:	40 f4       	brcc	.+16     	; 0x826 <__fp_round+0x20>
 816:	bf 2b       	or	r27, r31
 818:	11 f4       	brne	.+4      	; 0x81e <__fp_round+0x18>
 81a:	60 ff       	sbrs	r22, 0
 81c:	04 c0       	rjmp	.+8      	; 0x826 <__fp_round+0x20>
 81e:	6f 5f       	subi	r22, 0xFF	; 255
 820:	7f 4f       	sbci	r23, 0xFF	; 255
 822:	8f 4f       	sbci	r24, 0xFF	; 255
 824:	9f 4f       	sbci	r25, 0xFF	; 255
 826:	08 95       	ret

00000828 <__divmodhi4>:
 828:	97 fb       	bst	r25, 7
 82a:	07 2e       	mov	r0, r23
 82c:	16 f4       	brtc	.+4      	; 0x832 <__divmodhi4+0xa>
 82e:	00 94       	com	r0
 830:	07 d0       	rcall	.+14     	; 0x840 <__divmodhi4_neg1>
 832:	77 fd       	sbrc	r23, 7
 834:	09 d0       	rcall	.+18     	; 0x848 <__divmodhi4_neg2>
 836:	0e 94 4a 04 	call	0x894	; 0x894 <__udivmodhi4>
 83a:	07 fc       	sbrc	r0, 7
 83c:	05 d0       	rcall	.+10     	; 0x848 <__divmodhi4_neg2>
 83e:	3e f4       	brtc	.+14     	; 0x84e <__divmodhi4_exit>

00000840 <__divmodhi4_neg1>:
 840:	90 95       	com	r25
 842:	81 95       	neg	r24
 844:	9f 4f       	sbci	r25, 0xFF	; 255
 846:	08 95       	ret

00000848 <__divmodhi4_neg2>:
 848:	70 95       	com	r23
 84a:	61 95       	neg	r22
 84c:	7f 4f       	sbci	r23, 0xFF	; 255

0000084e <__divmodhi4_exit>:
 84e:	08 95       	ret

00000850 <__udivmodsi4>:
 850:	a1 e2       	ldi	r26, 0x21	; 33
 852:	1a 2e       	mov	r1, r26
 854:	aa 1b       	sub	r26, r26
 856:	bb 1b       	sub	r27, r27
 858:	fd 01       	movw	r30, r26
 85a:	0d c0       	rjmp	.+26     	; 0x876 <__udivmodsi4_ep>

0000085c <__udivmodsi4_loop>:
 85c:	aa 1f       	adc	r26, r26
 85e:	bb 1f       	adc	r27, r27
 860:	ee 1f       	adc	r30, r30
 862:	ff 1f       	adc	r31, r31
 864:	a2 17       	cp	r26, r18
 866:	b3 07       	cpc	r27, r19
 868:	e4 07       	cpc	r30, r20
 86a:	f5 07       	cpc	r31, r21
 86c:	20 f0       	brcs	.+8      	; 0x876 <__udivmodsi4_ep>
 86e:	a2 1b       	sub	r26, r18
 870:	b3 0b       	sbc	r27, r19
 872:	e4 0b       	sbc	r30, r20
 874:	f5 0b       	sbc	r31, r21

00000876 <__udivmodsi4_ep>:
 876:	66 1f       	adc	r22, r22
 878:	77 1f       	adc	r23, r23
 87a:	88 1f       	adc	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	1a 94       	dec	r1
 880:	69 f7       	brne	.-38     	; 0x85c <__udivmodsi4_loop>
 882:	60 95       	com	r22
 884:	70 95       	com	r23
 886:	80 95       	com	r24
 888:	90 95       	com	r25
 88a:	9b 01       	movw	r18, r22
 88c:	ac 01       	movw	r20, r24
 88e:	bd 01       	movw	r22, r26
 890:	cf 01       	movw	r24, r30
 892:	08 95       	ret

00000894 <__udivmodhi4>:
 894:	aa 1b       	sub	r26, r26
 896:	bb 1b       	sub	r27, r27
 898:	51 e1       	ldi	r21, 0x11	; 17
 89a:	07 c0       	rjmp	.+14     	; 0x8aa <__udivmodhi4_ep>

0000089c <__udivmodhi4_loop>:
 89c:	aa 1f       	adc	r26, r26
 89e:	bb 1f       	adc	r27, r27
 8a0:	a6 17       	cp	r26, r22
 8a2:	b7 07       	cpc	r27, r23
 8a4:	10 f0       	brcs	.+4      	; 0x8aa <__udivmodhi4_ep>
 8a6:	a6 1b       	sub	r26, r22
 8a8:	b7 0b       	sbc	r27, r23

000008aa <__udivmodhi4_ep>:
 8aa:	88 1f       	adc	r24, r24
 8ac:	99 1f       	adc	r25, r25
 8ae:	5a 95       	dec	r21
 8b0:	a9 f7       	brne	.-22     	; 0x89c <__udivmodhi4_loop>
 8b2:	80 95       	com	r24
 8b4:	90 95       	com	r25
 8b6:	bc 01       	movw	r22, r24
 8b8:	cd 01       	movw	r24, r26
 8ba:	08 95       	ret

000008bc <snprintf>:
 8bc:	ae e0       	ldi	r26, 0x0E	; 14
 8be:	b0 e0       	ldi	r27, 0x00	; 0
 8c0:	e4 e6       	ldi	r30, 0x64	; 100
 8c2:	f4 e0       	ldi	r31, 0x04	; 4
 8c4:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__prologue_saves__+0x1c>
 8c8:	0d 89       	ldd	r16, Y+21	; 0x15
 8ca:	1e 89       	ldd	r17, Y+22	; 0x16
 8cc:	8f 89       	ldd	r24, Y+23	; 0x17
 8ce:	98 8d       	ldd	r25, Y+24	; 0x18
 8d0:	26 e0       	ldi	r18, 0x06	; 6
 8d2:	2c 83       	std	Y+4, r18	; 0x04
 8d4:	1a 83       	std	Y+2, r17	; 0x02
 8d6:	09 83       	std	Y+1, r16	; 0x01
 8d8:	97 ff       	sbrs	r25, 7
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <snprintf+0x24>
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	90 e8       	ldi	r25, 0x80	; 128
 8e0:	01 97       	sbiw	r24, 0x01	; 1
 8e2:	9e 83       	std	Y+6, r25	; 0x06
 8e4:	8d 83       	std	Y+5, r24	; 0x05
 8e6:	ae 01       	movw	r20, r28
 8e8:	45 5e       	subi	r20, 0xE5	; 229
 8ea:	5f 4f       	sbci	r21, 0xFF	; 255
 8ec:	69 8d       	ldd	r22, Y+25	; 0x19
 8ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
 8f0:	ce 01       	movw	r24, r28
 8f2:	01 96       	adiw	r24, 0x01	; 1
 8f4:	0e 94 8e 04 	call	0x91c	; 0x91c <vfprintf>
 8f8:	4d 81       	ldd	r20, Y+5	; 0x05
 8fa:	5e 81       	ldd	r21, Y+6	; 0x06
 8fc:	57 fd       	sbrc	r21, 7
 8fe:	0a c0       	rjmp	.+20     	; 0x914 <__stack+0x15>
 900:	2f 81       	ldd	r18, Y+7	; 0x07
 902:	38 85       	ldd	r19, Y+8	; 0x08
 904:	42 17       	cp	r20, r18
 906:	53 07       	cpc	r21, r19
 908:	0c f4       	brge	.+2      	; 0x90c <__stack+0xd>
 90a:	9a 01       	movw	r18, r20
 90c:	f8 01       	movw	r30, r16
 90e:	e2 0f       	add	r30, r18
 910:	f3 1f       	adc	r31, r19
 912:	10 82       	st	Z, r1
 914:	2e 96       	adiw	r28, 0x0e	; 14
 916:	e4 e0       	ldi	r30, 0x04	; 4
 918:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__epilogue_restores__+0x1c>

0000091c <vfprintf>:
 91c:	ab e0       	ldi	r26, 0x0B	; 11
 91e:	b0 e0       	ldi	r27, 0x00	; 0
 920:	e4 e9       	ldi	r30, 0x94	; 148
 922:	f4 e0       	ldi	r31, 0x04	; 4
 924:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__prologue_saves__>
 928:	6c 01       	movw	r12, r24
 92a:	7b 01       	movw	r14, r22
 92c:	8a 01       	movw	r16, r20
 92e:	fc 01       	movw	r30, r24
 930:	17 82       	std	Z+7, r1	; 0x07
 932:	16 82       	std	Z+6, r1	; 0x06
 934:	83 81       	ldd	r24, Z+3	; 0x03
 936:	81 ff       	sbrs	r24, 1
 938:	cc c1       	rjmp	.+920    	; 0xcd2 <vfprintf+0x3b6>
 93a:	ce 01       	movw	r24, r28
 93c:	01 96       	adiw	r24, 0x01	; 1
 93e:	3c 01       	movw	r6, r24
 940:	f6 01       	movw	r30, r12
 942:	93 81       	ldd	r25, Z+3	; 0x03
 944:	f7 01       	movw	r30, r14
 946:	93 fd       	sbrc	r25, 3
 948:	85 91       	lpm	r24, Z+
 94a:	93 ff       	sbrs	r25, 3
 94c:	81 91       	ld	r24, Z+
 94e:	7f 01       	movw	r14, r30
 950:	88 23       	and	r24, r24
 952:	09 f4       	brne	.+2      	; 0x956 <vfprintf+0x3a>
 954:	ba c1       	rjmp	.+884    	; 0xcca <vfprintf+0x3ae>
 956:	85 32       	cpi	r24, 0x25	; 37
 958:	39 f4       	brne	.+14     	; 0x968 <vfprintf+0x4c>
 95a:	93 fd       	sbrc	r25, 3
 95c:	85 91       	lpm	r24, Z+
 95e:	93 ff       	sbrs	r25, 3
 960:	81 91       	ld	r24, Z+
 962:	7f 01       	movw	r14, r30
 964:	85 32       	cpi	r24, 0x25	; 37
 966:	29 f4       	brne	.+10     	; 0x972 <vfprintf+0x56>
 968:	b6 01       	movw	r22, r12
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	0e 94 85 06 	call	0xd0a	; 0xd0a <fputc>
 970:	e7 cf       	rjmp	.-50     	; 0x940 <vfprintf+0x24>
 972:	91 2c       	mov	r9, r1
 974:	21 2c       	mov	r2, r1
 976:	31 2c       	mov	r3, r1
 978:	ff e1       	ldi	r31, 0x1F	; 31
 97a:	f3 15       	cp	r31, r3
 97c:	d8 f0       	brcs	.+54     	; 0x9b4 <vfprintf+0x98>
 97e:	8b 32       	cpi	r24, 0x2B	; 43
 980:	79 f0       	breq	.+30     	; 0x9a0 <vfprintf+0x84>
 982:	38 f4       	brcc	.+14     	; 0x992 <vfprintf+0x76>
 984:	80 32       	cpi	r24, 0x20	; 32
 986:	79 f0       	breq	.+30     	; 0x9a6 <vfprintf+0x8a>
 988:	83 32       	cpi	r24, 0x23	; 35
 98a:	a1 f4       	brne	.+40     	; 0x9b4 <vfprintf+0x98>
 98c:	23 2d       	mov	r18, r3
 98e:	20 61       	ori	r18, 0x10	; 16
 990:	1d c0       	rjmp	.+58     	; 0x9cc <vfprintf+0xb0>
 992:	8d 32       	cpi	r24, 0x2D	; 45
 994:	61 f0       	breq	.+24     	; 0x9ae <vfprintf+0x92>
 996:	80 33       	cpi	r24, 0x30	; 48
 998:	69 f4       	brne	.+26     	; 0x9b4 <vfprintf+0x98>
 99a:	23 2d       	mov	r18, r3
 99c:	21 60       	ori	r18, 0x01	; 1
 99e:	16 c0       	rjmp	.+44     	; 0x9cc <vfprintf+0xb0>
 9a0:	83 2d       	mov	r24, r3
 9a2:	82 60       	ori	r24, 0x02	; 2
 9a4:	38 2e       	mov	r3, r24
 9a6:	e3 2d       	mov	r30, r3
 9a8:	e4 60       	ori	r30, 0x04	; 4
 9aa:	3e 2e       	mov	r3, r30
 9ac:	2a c0       	rjmp	.+84     	; 0xa02 <vfprintf+0xe6>
 9ae:	f3 2d       	mov	r31, r3
 9b0:	f8 60       	ori	r31, 0x08	; 8
 9b2:	1d c0       	rjmp	.+58     	; 0x9ee <vfprintf+0xd2>
 9b4:	37 fc       	sbrc	r3, 7
 9b6:	2d c0       	rjmp	.+90     	; 0xa12 <vfprintf+0xf6>
 9b8:	20 ed       	ldi	r18, 0xD0	; 208
 9ba:	28 0f       	add	r18, r24
 9bc:	2a 30       	cpi	r18, 0x0A	; 10
 9be:	40 f0       	brcs	.+16     	; 0x9d0 <vfprintf+0xb4>
 9c0:	8e 32       	cpi	r24, 0x2E	; 46
 9c2:	b9 f4       	brne	.+46     	; 0x9f2 <vfprintf+0xd6>
 9c4:	36 fc       	sbrc	r3, 6
 9c6:	81 c1       	rjmp	.+770    	; 0xcca <vfprintf+0x3ae>
 9c8:	23 2d       	mov	r18, r3
 9ca:	20 64       	ori	r18, 0x40	; 64
 9cc:	32 2e       	mov	r3, r18
 9ce:	19 c0       	rjmp	.+50     	; 0xa02 <vfprintf+0xe6>
 9d0:	36 fe       	sbrs	r3, 6
 9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <vfprintf+0xc4>
 9d4:	8a e0       	ldi	r24, 0x0A	; 10
 9d6:	98 9e       	mul	r9, r24
 9d8:	20 0d       	add	r18, r0
 9da:	11 24       	eor	r1, r1
 9dc:	92 2e       	mov	r9, r18
 9de:	11 c0       	rjmp	.+34     	; 0xa02 <vfprintf+0xe6>
 9e0:	ea e0       	ldi	r30, 0x0A	; 10
 9e2:	2e 9e       	mul	r2, r30
 9e4:	20 0d       	add	r18, r0
 9e6:	11 24       	eor	r1, r1
 9e8:	22 2e       	mov	r2, r18
 9ea:	f3 2d       	mov	r31, r3
 9ec:	f0 62       	ori	r31, 0x20	; 32
 9ee:	3f 2e       	mov	r3, r31
 9f0:	08 c0       	rjmp	.+16     	; 0xa02 <vfprintf+0xe6>
 9f2:	8c 36       	cpi	r24, 0x6C	; 108
 9f4:	21 f4       	brne	.+8      	; 0x9fe <vfprintf+0xe2>
 9f6:	83 2d       	mov	r24, r3
 9f8:	80 68       	ori	r24, 0x80	; 128
 9fa:	38 2e       	mov	r3, r24
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <vfprintf+0xe6>
 9fe:	88 36       	cpi	r24, 0x68	; 104
 a00:	41 f4       	brne	.+16     	; 0xa12 <vfprintf+0xf6>
 a02:	f7 01       	movw	r30, r14
 a04:	93 fd       	sbrc	r25, 3
 a06:	85 91       	lpm	r24, Z+
 a08:	93 ff       	sbrs	r25, 3
 a0a:	81 91       	ld	r24, Z+
 a0c:	7f 01       	movw	r14, r30
 a0e:	81 11       	cpse	r24, r1
 a10:	b3 cf       	rjmp	.-154    	; 0x978 <vfprintf+0x5c>
 a12:	98 2f       	mov	r25, r24
 a14:	9f 7d       	andi	r25, 0xDF	; 223
 a16:	95 54       	subi	r25, 0x45	; 69
 a18:	93 30       	cpi	r25, 0x03	; 3
 a1a:	28 f4       	brcc	.+10     	; 0xa26 <vfprintf+0x10a>
 a1c:	0c 5f       	subi	r16, 0xFC	; 252
 a1e:	1f 4f       	sbci	r17, 0xFF	; 255
 a20:	9f e3       	ldi	r25, 0x3F	; 63
 a22:	99 83       	std	Y+1, r25	; 0x01
 a24:	0d c0       	rjmp	.+26     	; 0xa40 <vfprintf+0x124>
 a26:	83 36       	cpi	r24, 0x63	; 99
 a28:	31 f0       	breq	.+12     	; 0xa36 <vfprintf+0x11a>
 a2a:	83 37       	cpi	r24, 0x73	; 115
 a2c:	71 f0       	breq	.+28     	; 0xa4a <vfprintf+0x12e>
 a2e:	83 35       	cpi	r24, 0x53	; 83
 a30:	09 f0       	breq	.+2      	; 0xa34 <vfprintf+0x118>
 a32:	59 c0       	rjmp	.+178    	; 0xae6 <vfprintf+0x1ca>
 a34:	21 c0       	rjmp	.+66     	; 0xa78 <vfprintf+0x15c>
 a36:	f8 01       	movw	r30, r16
 a38:	80 81       	ld	r24, Z
 a3a:	89 83       	std	Y+1, r24	; 0x01
 a3c:	0e 5f       	subi	r16, 0xFE	; 254
 a3e:	1f 4f       	sbci	r17, 0xFF	; 255
 a40:	88 24       	eor	r8, r8
 a42:	83 94       	inc	r8
 a44:	91 2c       	mov	r9, r1
 a46:	53 01       	movw	r10, r6
 a48:	13 c0       	rjmp	.+38     	; 0xa70 <vfprintf+0x154>
 a4a:	28 01       	movw	r4, r16
 a4c:	f2 e0       	ldi	r31, 0x02	; 2
 a4e:	4f 0e       	add	r4, r31
 a50:	51 1c       	adc	r5, r1
 a52:	f8 01       	movw	r30, r16
 a54:	a0 80       	ld	r10, Z
 a56:	b1 80       	ldd	r11, Z+1	; 0x01
 a58:	36 fe       	sbrs	r3, 6
 a5a:	03 c0       	rjmp	.+6      	; 0xa62 <vfprintf+0x146>
 a5c:	69 2d       	mov	r22, r9
 a5e:	70 e0       	ldi	r23, 0x00	; 0
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <vfprintf+0x14a>
 a62:	6f ef       	ldi	r22, 0xFF	; 255
 a64:	7f ef       	ldi	r23, 0xFF	; 255
 a66:	c5 01       	movw	r24, r10
 a68:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <strnlen>
 a6c:	4c 01       	movw	r8, r24
 a6e:	82 01       	movw	r16, r4
 a70:	f3 2d       	mov	r31, r3
 a72:	ff 77       	andi	r31, 0x7F	; 127
 a74:	3f 2e       	mov	r3, r31
 a76:	16 c0       	rjmp	.+44     	; 0xaa4 <vfprintf+0x188>
 a78:	28 01       	movw	r4, r16
 a7a:	22 e0       	ldi	r18, 0x02	; 2
 a7c:	42 0e       	add	r4, r18
 a7e:	51 1c       	adc	r5, r1
 a80:	f8 01       	movw	r30, r16
 a82:	a0 80       	ld	r10, Z
 a84:	b1 80       	ldd	r11, Z+1	; 0x01
 a86:	36 fe       	sbrs	r3, 6
 a88:	03 c0       	rjmp	.+6      	; 0xa90 <vfprintf+0x174>
 a8a:	69 2d       	mov	r22, r9
 a8c:	70 e0       	ldi	r23, 0x00	; 0
 a8e:	02 c0       	rjmp	.+4      	; 0xa94 <vfprintf+0x178>
 a90:	6f ef       	ldi	r22, 0xFF	; 255
 a92:	7f ef       	ldi	r23, 0xFF	; 255
 a94:	c5 01       	movw	r24, r10
 a96:	0e 94 6f 06 	call	0xcde	; 0xcde <strnlen_P>
 a9a:	4c 01       	movw	r8, r24
 a9c:	f3 2d       	mov	r31, r3
 a9e:	f0 68       	ori	r31, 0x80	; 128
 aa0:	3f 2e       	mov	r3, r31
 aa2:	82 01       	movw	r16, r4
 aa4:	33 fc       	sbrc	r3, 3
 aa6:	1b c0       	rjmp	.+54     	; 0xade <vfprintf+0x1c2>
 aa8:	82 2d       	mov	r24, r2
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	88 16       	cp	r8, r24
 aae:	99 06       	cpc	r9, r25
 ab0:	b0 f4       	brcc	.+44     	; 0xade <vfprintf+0x1c2>
 ab2:	b6 01       	movw	r22, r12
 ab4:	80 e2       	ldi	r24, 0x20	; 32
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	0e 94 85 06 	call	0xd0a	; 0xd0a <fputc>
 abc:	2a 94       	dec	r2
 abe:	f4 cf       	rjmp	.-24     	; 0xaa8 <vfprintf+0x18c>
 ac0:	f5 01       	movw	r30, r10
 ac2:	37 fc       	sbrc	r3, 7
 ac4:	85 91       	lpm	r24, Z+
 ac6:	37 fe       	sbrs	r3, 7
 ac8:	81 91       	ld	r24, Z+
 aca:	5f 01       	movw	r10, r30
 acc:	b6 01       	movw	r22, r12
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	0e 94 85 06 	call	0xd0a	; 0xd0a <fputc>
 ad4:	21 10       	cpse	r2, r1
 ad6:	2a 94       	dec	r2
 ad8:	21 e0       	ldi	r18, 0x01	; 1
 ada:	82 1a       	sub	r8, r18
 adc:	91 08       	sbc	r9, r1
 ade:	81 14       	cp	r8, r1
 ae0:	91 04       	cpc	r9, r1
 ae2:	71 f7       	brne	.-36     	; 0xac0 <vfprintf+0x1a4>
 ae4:	e8 c0       	rjmp	.+464    	; 0xcb6 <vfprintf+0x39a>
 ae6:	84 36       	cpi	r24, 0x64	; 100
 ae8:	11 f0       	breq	.+4      	; 0xaee <vfprintf+0x1d2>
 aea:	89 36       	cpi	r24, 0x69	; 105
 aec:	41 f5       	brne	.+80     	; 0xb3e <vfprintf+0x222>
 aee:	f8 01       	movw	r30, r16
 af0:	37 fe       	sbrs	r3, 7
 af2:	07 c0       	rjmp	.+14     	; 0xb02 <vfprintf+0x1e6>
 af4:	60 81       	ld	r22, Z
 af6:	71 81       	ldd	r23, Z+1	; 0x01
 af8:	82 81       	ldd	r24, Z+2	; 0x02
 afa:	93 81       	ldd	r25, Z+3	; 0x03
 afc:	0c 5f       	subi	r16, 0xFC	; 252
 afe:	1f 4f       	sbci	r17, 0xFF	; 255
 b00:	08 c0       	rjmp	.+16     	; 0xb12 <vfprintf+0x1f6>
 b02:	60 81       	ld	r22, Z
 b04:	71 81       	ldd	r23, Z+1	; 0x01
 b06:	07 2e       	mov	r0, r23
 b08:	00 0c       	add	r0, r0
 b0a:	88 0b       	sbc	r24, r24
 b0c:	99 0b       	sbc	r25, r25
 b0e:	0e 5f       	subi	r16, 0xFE	; 254
 b10:	1f 4f       	sbci	r17, 0xFF	; 255
 b12:	f3 2d       	mov	r31, r3
 b14:	ff 76       	andi	r31, 0x6F	; 111
 b16:	3f 2e       	mov	r3, r31
 b18:	97 ff       	sbrs	r25, 7
 b1a:	09 c0       	rjmp	.+18     	; 0xb2e <vfprintf+0x212>
 b1c:	90 95       	com	r25
 b1e:	80 95       	com	r24
 b20:	70 95       	com	r23
 b22:	61 95       	neg	r22
 b24:	7f 4f       	sbci	r23, 0xFF	; 255
 b26:	8f 4f       	sbci	r24, 0xFF	; 255
 b28:	9f 4f       	sbci	r25, 0xFF	; 255
 b2a:	f0 68       	ori	r31, 0x80	; 128
 b2c:	3f 2e       	mov	r3, r31
 b2e:	2a e0       	ldi	r18, 0x0A	; 10
 b30:	30 e0       	ldi	r19, 0x00	; 0
 b32:	a3 01       	movw	r20, r6
 b34:	0e 94 c1 06 	call	0xd82	; 0xd82 <__ultoa_invert>
 b38:	88 2e       	mov	r8, r24
 b3a:	86 18       	sub	r8, r6
 b3c:	45 c0       	rjmp	.+138    	; 0xbc8 <vfprintf+0x2ac>
 b3e:	85 37       	cpi	r24, 0x75	; 117
 b40:	31 f4       	brne	.+12     	; 0xb4e <vfprintf+0x232>
 b42:	23 2d       	mov	r18, r3
 b44:	2f 7e       	andi	r18, 0xEF	; 239
 b46:	b2 2e       	mov	r11, r18
 b48:	2a e0       	ldi	r18, 0x0A	; 10
 b4a:	30 e0       	ldi	r19, 0x00	; 0
 b4c:	25 c0       	rjmp	.+74     	; 0xb98 <vfprintf+0x27c>
 b4e:	93 2d       	mov	r25, r3
 b50:	99 7f       	andi	r25, 0xF9	; 249
 b52:	b9 2e       	mov	r11, r25
 b54:	8f 36       	cpi	r24, 0x6F	; 111
 b56:	c1 f0       	breq	.+48     	; 0xb88 <vfprintf+0x26c>
 b58:	18 f4       	brcc	.+6      	; 0xb60 <vfprintf+0x244>
 b5a:	88 35       	cpi	r24, 0x58	; 88
 b5c:	79 f0       	breq	.+30     	; 0xb7c <vfprintf+0x260>
 b5e:	b5 c0       	rjmp	.+362    	; 0xcca <vfprintf+0x3ae>
 b60:	80 37       	cpi	r24, 0x70	; 112
 b62:	19 f0       	breq	.+6      	; 0xb6a <vfprintf+0x24e>
 b64:	88 37       	cpi	r24, 0x78	; 120
 b66:	21 f0       	breq	.+8      	; 0xb70 <vfprintf+0x254>
 b68:	b0 c0       	rjmp	.+352    	; 0xcca <vfprintf+0x3ae>
 b6a:	e9 2f       	mov	r30, r25
 b6c:	e0 61       	ori	r30, 0x10	; 16
 b6e:	be 2e       	mov	r11, r30
 b70:	b4 fe       	sbrs	r11, 4
 b72:	0d c0       	rjmp	.+26     	; 0xb8e <vfprintf+0x272>
 b74:	fb 2d       	mov	r31, r11
 b76:	f4 60       	ori	r31, 0x04	; 4
 b78:	bf 2e       	mov	r11, r31
 b7a:	09 c0       	rjmp	.+18     	; 0xb8e <vfprintf+0x272>
 b7c:	34 fe       	sbrs	r3, 4
 b7e:	0a c0       	rjmp	.+20     	; 0xb94 <vfprintf+0x278>
 b80:	29 2f       	mov	r18, r25
 b82:	26 60       	ori	r18, 0x06	; 6
 b84:	b2 2e       	mov	r11, r18
 b86:	06 c0       	rjmp	.+12     	; 0xb94 <vfprintf+0x278>
 b88:	28 e0       	ldi	r18, 0x08	; 8
 b8a:	30 e0       	ldi	r19, 0x00	; 0
 b8c:	05 c0       	rjmp	.+10     	; 0xb98 <vfprintf+0x27c>
 b8e:	20 e1       	ldi	r18, 0x10	; 16
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	02 c0       	rjmp	.+4      	; 0xb98 <vfprintf+0x27c>
 b94:	20 e1       	ldi	r18, 0x10	; 16
 b96:	32 e0       	ldi	r19, 0x02	; 2
 b98:	f8 01       	movw	r30, r16
 b9a:	b7 fe       	sbrs	r11, 7
 b9c:	07 c0       	rjmp	.+14     	; 0xbac <vfprintf+0x290>
 b9e:	60 81       	ld	r22, Z
 ba0:	71 81       	ldd	r23, Z+1	; 0x01
 ba2:	82 81       	ldd	r24, Z+2	; 0x02
 ba4:	93 81       	ldd	r25, Z+3	; 0x03
 ba6:	0c 5f       	subi	r16, 0xFC	; 252
 ba8:	1f 4f       	sbci	r17, 0xFF	; 255
 baa:	06 c0       	rjmp	.+12     	; 0xbb8 <vfprintf+0x29c>
 bac:	60 81       	ld	r22, Z
 bae:	71 81       	ldd	r23, Z+1	; 0x01
 bb0:	80 e0       	ldi	r24, 0x00	; 0
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	0e 5f       	subi	r16, 0xFE	; 254
 bb6:	1f 4f       	sbci	r17, 0xFF	; 255
 bb8:	a3 01       	movw	r20, r6
 bba:	0e 94 c1 06 	call	0xd82	; 0xd82 <__ultoa_invert>
 bbe:	88 2e       	mov	r8, r24
 bc0:	86 18       	sub	r8, r6
 bc2:	fb 2d       	mov	r31, r11
 bc4:	ff 77       	andi	r31, 0x7F	; 127
 bc6:	3f 2e       	mov	r3, r31
 bc8:	36 fe       	sbrs	r3, 6
 bca:	0d c0       	rjmp	.+26     	; 0xbe6 <vfprintf+0x2ca>
 bcc:	23 2d       	mov	r18, r3
 bce:	2e 7f       	andi	r18, 0xFE	; 254
 bd0:	a2 2e       	mov	r10, r18
 bd2:	89 14       	cp	r8, r9
 bd4:	58 f4       	brcc	.+22     	; 0xbec <vfprintf+0x2d0>
 bd6:	34 fe       	sbrs	r3, 4
 bd8:	0b c0       	rjmp	.+22     	; 0xbf0 <vfprintf+0x2d4>
 bda:	32 fc       	sbrc	r3, 2
 bdc:	09 c0       	rjmp	.+18     	; 0xbf0 <vfprintf+0x2d4>
 bde:	83 2d       	mov	r24, r3
 be0:	8e 7e       	andi	r24, 0xEE	; 238
 be2:	a8 2e       	mov	r10, r24
 be4:	05 c0       	rjmp	.+10     	; 0xbf0 <vfprintf+0x2d4>
 be6:	b8 2c       	mov	r11, r8
 be8:	a3 2c       	mov	r10, r3
 bea:	03 c0       	rjmp	.+6      	; 0xbf2 <vfprintf+0x2d6>
 bec:	b8 2c       	mov	r11, r8
 bee:	01 c0       	rjmp	.+2      	; 0xbf2 <vfprintf+0x2d6>
 bf0:	b9 2c       	mov	r11, r9
 bf2:	a4 fe       	sbrs	r10, 4
 bf4:	0f c0       	rjmp	.+30     	; 0xc14 <vfprintf+0x2f8>
 bf6:	fe 01       	movw	r30, r28
 bf8:	e8 0d       	add	r30, r8
 bfa:	f1 1d       	adc	r31, r1
 bfc:	80 81       	ld	r24, Z
 bfe:	80 33       	cpi	r24, 0x30	; 48
 c00:	21 f4       	brne	.+8      	; 0xc0a <vfprintf+0x2ee>
 c02:	9a 2d       	mov	r25, r10
 c04:	99 7e       	andi	r25, 0xE9	; 233
 c06:	a9 2e       	mov	r10, r25
 c08:	09 c0       	rjmp	.+18     	; 0xc1c <vfprintf+0x300>
 c0a:	a2 fe       	sbrs	r10, 2
 c0c:	06 c0       	rjmp	.+12     	; 0xc1a <vfprintf+0x2fe>
 c0e:	b3 94       	inc	r11
 c10:	b3 94       	inc	r11
 c12:	04 c0       	rjmp	.+8      	; 0xc1c <vfprintf+0x300>
 c14:	8a 2d       	mov	r24, r10
 c16:	86 78       	andi	r24, 0x86	; 134
 c18:	09 f0       	breq	.+2      	; 0xc1c <vfprintf+0x300>
 c1a:	b3 94       	inc	r11
 c1c:	a3 fc       	sbrc	r10, 3
 c1e:	11 c0       	rjmp	.+34     	; 0xc42 <vfprintf+0x326>
 c20:	a0 fe       	sbrs	r10, 0
 c22:	06 c0       	rjmp	.+12     	; 0xc30 <vfprintf+0x314>
 c24:	b2 14       	cp	r11, r2
 c26:	88 f4       	brcc	.+34     	; 0xc4a <vfprintf+0x32e>
 c28:	28 0c       	add	r2, r8
 c2a:	92 2c       	mov	r9, r2
 c2c:	9b 18       	sub	r9, r11
 c2e:	0e c0       	rjmp	.+28     	; 0xc4c <vfprintf+0x330>
 c30:	b2 14       	cp	r11, r2
 c32:	60 f4       	brcc	.+24     	; 0xc4c <vfprintf+0x330>
 c34:	b6 01       	movw	r22, r12
 c36:	80 e2       	ldi	r24, 0x20	; 32
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	0e 94 85 06 	call	0xd0a	; 0xd0a <fputc>
 c3e:	b3 94       	inc	r11
 c40:	f7 cf       	rjmp	.-18     	; 0xc30 <vfprintf+0x314>
 c42:	b2 14       	cp	r11, r2
 c44:	18 f4       	brcc	.+6      	; 0xc4c <vfprintf+0x330>
 c46:	2b 18       	sub	r2, r11
 c48:	02 c0       	rjmp	.+4      	; 0xc4e <vfprintf+0x332>
 c4a:	98 2c       	mov	r9, r8
 c4c:	21 2c       	mov	r2, r1
 c4e:	a4 fe       	sbrs	r10, 4
 c50:	10 c0       	rjmp	.+32     	; 0xc72 <vfprintf+0x356>
 c52:	b6 01       	movw	r22, r12
 c54:	80 e3       	ldi	r24, 0x30	; 48
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	0e 94 85 06 	call	0xd0a	; 0xd0a <fputc>
 c5c:	a2 fe       	sbrs	r10, 2
 c5e:	17 c0       	rjmp	.+46     	; 0xc8e <vfprintf+0x372>
 c60:	a1 fc       	sbrc	r10, 1
 c62:	03 c0       	rjmp	.+6      	; 0xc6a <vfprintf+0x34e>
 c64:	88 e7       	ldi	r24, 0x78	; 120
 c66:	90 e0       	ldi	r25, 0x00	; 0
 c68:	02 c0       	rjmp	.+4      	; 0xc6e <vfprintf+0x352>
 c6a:	88 e5       	ldi	r24, 0x58	; 88
 c6c:	90 e0       	ldi	r25, 0x00	; 0
 c6e:	b6 01       	movw	r22, r12
 c70:	0c c0       	rjmp	.+24     	; 0xc8a <vfprintf+0x36e>
 c72:	8a 2d       	mov	r24, r10
 c74:	86 78       	andi	r24, 0x86	; 134
 c76:	59 f0       	breq	.+22     	; 0xc8e <vfprintf+0x372>
 c78:	a1 fe       	sbrs	r10, 1
 c7a:	02 c0       	rjmp	.+4      	; 0xc80 <vfprintf+0x364>
 c7c:	8b e2       	ldi	r24, 0x2B	; 43
 c7e:	01 c0       	rjmp	.+2      	; 0xc82 <vfprintf+0x366>
 c80:	80 e2       	ldi	r24, 0x20	; 32
 c82:	a7 fc       	sbrc	r10, 7
 c84:	8d e2       	ldi	r24, 0x2D	; 45
 c86:	b6 01       	movw	r22, r12
 c88:	90 e0       	ldi	r25, 0x00	; 0
 c8a:	0e 94 85 06 	call	0xd0a	; 0xd0a <fputc>
 c8e:	89 14       	cp	r8, r9
 c90:	38 f4       	brcc	.+14     	; 0xca0 <vfprintf+0x384>
 c92:	b6 01       	movw	r22, r12
 c94:	80 e3       	ldi	r24, 0x30	; 48
 c96:	90 e0       	ldi	r25, 0x00	; 0
 c98:	0e 94 85 06 	call	0xd0a	; 0xd0a <fputc>
 c9c:	9a 94       	dec	r9
 c9e:	f7 cf       	rjmp	.-18     	; 0xc8e <vfprintf+0x372>
 ca0:	8a 94       	dec	r8
 ca2:	f3 01       	movw	r30, r6
 ca4:	e8 0d       	add	r30, r8
 ca6:	f1 1d       	adc	r31, r1
 ca8:	80 81       	ld	r24, Z
 caa:	b6 01       	movw	r22, r12
 cac:	90 e0       	ldi	r25, 0x00	; 0
 cae:	0e 94 85 06 	call	0xd0a	; 0xd0a <fputc>
 cb2:	81 10       	cpse	r8, r1
 cb4:	f5 cf       	rjmp	.-22     	; 0xca0 <vfprintf+0x384>
 cb6:	22 20       	and	r2, r2
 cb8:	09 f4       	brne	.+2      	; 0xcbc <vfprintf+0x3a0>
 cba:	42 ce       	rjmp	.-892    	; 0x940 <vfprintf+0x24>
 cbc:	b6 01       	movw	r22, r12
 cbe:	80 e2       	ldi	r24, 0x20	; 32
 cc0:	90 e0       	ldi	r25, 0x00	; 0
 cc2:	0e 94 85 06 	call	0xd0a	; 0xd0a <fputc>
 cc6:	2a 94       	dec	r2
 cc8:	f6 cf       	rjmp	.-20     	; 0xcb6 <vfprintf+0x39a>
 cca:	f6 01       	movw	r30, r12
 ccc:	86 81       	ldd	r24, Z+6	; 0x06
 cce:	97 81       	ldd	r25, Z+7	; 0x07
 cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <vfprintf+0x3ba>
 cd2:	8f ef       	ldi	r24, 0xFF	; 255
 cd4:	9f ef       	ldi	r25, 0xFF	; 255
 cd6:	2b 96       	adiw	r28, 0x0b	; 11
 cd8:	e2 e1       	ldi	r30, 0x12	; 18
 cda:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__epilogue_restores__>

00000cde <strnlen_P>:
 cde:	fc 01       	movw	r30, r24
 ce0:	05 90       	lpm	r0, Z+
 ce2:	61 50       	subi	r22, 0x01	; 1
 ce4:	70 40       	sbci	r23, 0x00	; 0
 ce6:	01 10       	cpse	r0, r1
 ce8:	d8 f7       	brcc	.-10     	; 0xce0 <strnlen_P+0x2>
 cea:	80 95       	com	r24
 cec:	90 95       	com	r25
 cee:	8e 0f       	add	r24, r30
 cf0:	9f 1f       	adc	r25, r31
 cf2:	08 95       	ret

00000cf4 <strnlen>:
 cf4:	fc 01       	movw	r30, r24
 cf6:	61 50       	subi	r22, 0x01	; 1
 cf8:	70 40       	sbci	r23, 0x00	; 0
 cfa:	01 90       	ld	r0, Z+
 cfc:	01 10       	cpse	r0, r1
 cfe:	d8 f7       	brcc	.-10     	; 0xcf6 <strnlen+0x2>
 d00:	80 95       	com	r24
 d02:	90 95       	com	r25
 d04:	8e 0f       	add	r24, r30
 d06:	9f 1f       	adc	r25, r31
 d08:	08 95       	ret

00000d0a <fputc>:
 d0a:	0f 93       	push	r16
 d0c:	1f 93       	push	r17
 d0e:	cf 93       	push	r28
 d10:	df 93       	push	r29
 d12:	fb 01       	movw	r30, r22
 d14:	23 81       	ldd	r18, Z+3	; 0x03
 d16:	21 fd       	sbrc	r18, 1
 d18:	03 c0       	rjmp	.+6      	; 0xd20 <fputc+0x16>
 d1a:	8f ef       	ldi	r24, 0xFF	; 255
 d1c:	9f ef       	ldi	r25, 0xFF	; 255
 d1e:	2c c0       	rjmp	.+88     	; 0xd78 <fputc+0x6e>
 d20:	22 ff       	sbrs	r18, 2
 d22:	16 c0       	rjmp	.+44     	; 0xd50 <fputc+0x46>
 d24:	46 81       	ldd	r20, Z+6	; 0x06
 d26:	57 81       	ldd	r21, Z+7	; 0x07
 d28:	24 81       	ldd	r18, Z+4	; 0x04
 d2a:	35 81       	ldd	r19, Z+5	; 0x05
 d2c:	42 17       	cp	r20, r18
 d2e:	53 07       	cpc	r21, r19
 d30:	44 f4       	brge	.+16     	; 0xd42 <fputc+0x38>
 d32:	a0 81       	ld	r26, Z
 d34:	b1 81       	ldd	r27, Z+1	; 0x01
 d36:	9d 01       	movw	r18, r26
 d38:	2f 5f       	subi	r18, 0xFF	; 255
 d3a:	3f 4f       	sbci	r19, 0xFF	; 255
 d3c:	31 83       	std	Z+1, r19	; 0x01
 d3e:	20 83       	st	Z, r18
 d40:	8c 93       	st	X, r24
 d42:	26 81       	ldd	r18, Z+6	; 0x06
 d44:	37 81       	ldd	r19, Z+7	; 0x07
 d46:	2f 5f       	subi	r18, 0xFF	; 255
 d48:	3f 4f       	sbci	r19, 0xFF	; 255
 d4a:	37 83       	std	Z+7, r19	; 0x07
 d4c:	26 83       	std	Z+6, r18	; 0x06
 d4e:	14 c0       	rjmp	.+40     	; 0xd78 <fputc+0x6e>
 d50:	8b 01       	movw	r16, r22
 d52:	ec 01       	movw	r28, r24
 d54:	fb 01       	movw	r30, r22
 d56:	00 84       	ldd	r0, Z+8	; 0x08
 d58:	f1 85       	ldd	r31, Z+9	; 0x09
 d5a:	e0 2d       	mov	r30, r0
 d5c:	09 95       	icall
 d5e:	89 2b       	or	r24, r25
 d60:	e1 f6       	brne	.-72     	; 0xd1a <fputc+0x10>
 d62:	d8 01       	movw	r26, r16
 d64:	16 96       	adiw	r26, 0x06	; 6
 d66:	8d 91       	ld	r24, X+
 d68:	9c 91       	ld	r25, X
 d6a:	17 97       	sbiw	r26, 0x07	; 7
 d6c:	01 96       	adiw	r24, 0x01	; 1
 d6e:	17 96       	adiw	r26, 0x07	; 7
 d70:	9c 93       	st	X, r25
 d72:	8e 93       	st	-X, r24
 d74:	16 97       	sbiw	r26, 0x06	; 6
 d76:	ce 01       	movw	r24, r28
 d78:	df 91       	pop	r29
 d7a:	cf 91       	pop	r28
 d7c:	1f 91       	pop	r17
 d7e:	0f 91       	pop	r16
 d80:	08 95       	ret

00000d82 <__ultoa_invert>:
 d82:	fa 01       	movw	r30, r20
 d84:	aa 27       	eor	r26, r26
 d86:	28 30       	cpi	r18, 0x08	; 8
 d88:	51 f1       	breq	.+84     	; 0xdde <__ultoa_invert+0x5c>
 d8a:	20 31       	cpi	r18, 0x10	; 16
 d8c:	81 f1       	breq	.+96     	; 0xdee <__ultoa_invert+0x6c>
 d8e:	e8 94       	clt
 d90:	6f 93       	push	r22
 d92:	6e 7f       	andi	r22, 0xFE	; 254
 d94:	6e 5f       	subi	r22, 0xFE	; 254
 d96:	7f 4f       	sbci	r23, 0xFF	; 255
 d98:	8f 4f       	sbci	r24, 0xFF	; 255
 d9a:	9f 4f       	sbci	r25, 0xFF	; 255
 d9c:	af 4f       	sbci	r26, 0xFF	; 255
 d9e:	b1 e0       	ldi	r27, 0x01	; 1
 da0:	3e d0       	rcall	.+124    	; 0xe1e <__ultoa_invert+0x9c>
 da2:	b4 e0       	ldi	r27, 0x04	; 4
 da4:	3c d0       	rcall	.+120    	; 0xe1e <__ultoa_invert+0x9c>
 da6:	67 0f       	add	r22, r23
 da8:	78 1f       	adc	r23, r24
 daa:	89 1f       	adc	r24, r25
 dac:	9a 1f       	adc	r25, r26
 dae:	a1 1d       	adc	r26, r1
 db0:	68 0f       	add	r22, r24
 db2:	79 1f       	adc	r23, r25
 db4:	8a 1f       	adc	r24, r26
 db6:	91 1d       	adc	r25, r1
 db8:	a1 1d       	adc	r26, r1
 dba:	6a 0f       	add	r22, r26
 dbc:	71 1d       	adc	r23, r1
 dbe:	81 1d       	adc	r24, r1
 dc0:	91 1d       	adc	r25, r1
 dc2:	a1 1d       	adc	r26, r1
 dc4:	20 d0       	rcall	.+64     	; 0xe06 <__ultoa_invert+0x84>
 dc6:	09 f4       	brne	.+2      	; 0xdca <__ultoa_invert+0x48>
 dc8:	68 94       	set
 dca:	3f 91       	pop	r19
 dcc:	2a e0       	ldi	r18, 0x0A	; 10
 dce:	26 9f       	mul	r18, r22
 dd0:	11 24       	eor	r1, r1
 dd2:	30 19       	sub	r19, r0
 dd4:	30 5d       	subi	r19, 0xD0	; 208
 dd6:	31 93       	st	Z+, r19
 dd8:	de f6       	brtc	.-74     	; 0xd90 <__ultoa_invert+0xe>
 dda:	cf 01       	movw	r24, r30
 ddc:	08 95       	ret
 dde:	46 2f       	mov	r20, r22
 de0:	47 70       	andi	r20, 0x07	; 7
 de2:	40 5d       	subi	r20, 0xD0	; 208
 de4:	41 93       	st	Z+, r20
 de6:	b3 e0       	ldi	r27, 0x03	; 3
 de8:	0f d0       	rcall	.+30     	; 0xe08 <__ultoa_invert+0x86>
 dea:	c9 f7       	brne	.-14     	; 0xdde <__ultoa_invert+0x5c>
 dec:	f6 cf       	rjmp	.-20     	; 0xdda <__ultoa_invert+0x58>
 dee:	46 2f       	mov	r20, r22
 df0:	4f 70       	andi	r20, 0x0F	; 15
 df2:	40 5d       	subi	r20, 0xD0	; 208
 df4:	4a 33       	cpi	r20, 0x3A	; 58
 df6:	18 f0       	brcs	.+6      	; 0xdfe <__ultoa_invert+0x7c>
 df8:	49 5d       	subi	r20, 0xD9	; 217
 dfa:	31 fd       	sbrc	r19, 1
 dfc:	40 52       	subi	r20, 0x20	; 32
 dfe:	41 93       	st	Z+, r20
 e00:	02 d0       	rcall	.+4      	; 0xe06 <__ultoa_invert+0x84>
 e02:	a9 f7       	brne	.-22     	; 0xdee <__ultoa_invert+0x6c>
 e04:	ea cf       	rjmp	.-44     	; 0xdda <__ultoa_invert+0x58>
 e06:	b4 e0       	ldi	r27, 0x04	; 4
 e08:	a6 95       	lsr	r26
 e0a:	97 95       	ror	r25
 e0c:	87 95       	ror	r24
 e0e:	77 95       	ror	r23
 e10:	67 95       	ror	r22
 e12:	ba 95       	dec	r27
 e14:	c9 f7       	brne	.-14     	; 0xe08 <__ultoa_invert+0x86>
 e16:	00 97       	sbiw	r24, 0x00	; 0
 e18:	61 05       	cpc	r22, r1
 e1a:	71 05       	cpc	r23, r1
 e1c:	08 95       	ret
 e1e:	9b 01       	movw	r18, r22
 e20:	ac 01       	movw	r20, r24
 e22:	0a 2e       	mov	r0, r26
 e24:	06 94       	lsr	r0
 e26:	57 95       	ror	r21
 e28:	47 95       	ror	r20
 e2a:	37 95       	ror	r19
 e2c:	27 95       	ror	r18
 e2e:	ba 95       	dec	r27
 e30:	c9 f7       	brne	.-14     	; 0xe24 <__ultoa_invert+0xa2>
 e32:	62 0f       	add	r22, r18
 e34:	73 1f       	adc	r23, r19
 e36:	84 1f       	adc	r24, r20
 e38:	95 1f       	adc	r25, r21
 e3a:	a0 1d       	adc	r26, r0
 e3c:	08 95       	ret

00000e3e <__prologue_saves__>:
 e3e:	2f 92       	push	r2
 e40:	3f 92       	push	r3
 e42:	4f 92       	push	r4
 e44:	5f 92       	push	r5
 e46:	6f 92       	push	r6
 e48:	7f 92       	push	r7
 e4a:	8f 92       	push	r8
 e4c:	9f 92       	push	r9
 e4e:	af 92       	push	r10
 e50:	bf 92       	push	r11
 e52:	cf 92       	push	r12
 e54:	df 92       	push	r13
 e56:	ef 92       	push	r14
 e58:	ff 92       	push	r15
 e5a:	0f 93       	push	r16
 e5c:	1f 93       	push	r17
 e5e:	cf 93       	push	r28
 e60:	df 93       	push	r29
 e62:	cd b7       	in	r28, 0x3d	; 61
 e64:	de b7       	in	r29, 0x3e	; 62
 e66:	ca 1b       	sub	r28, r26
 e68:	db 0b       	sbc	r29, r27
 e6a:	0f b6       	in	r0, 0x3f	; 63
 e6c:	f8 94       	cli
 e6e:	de bf       	out	0x3e, r29	; 62
 e70:	0f be       	out	0x3f, r0	; 63
 e72:	cd bf       	out	0x3d, r28	; 61
 e74:	09 94       	ijmp

00000e76 <__epilogue_restores__>:
 e76:	2a 88       	ldd	r2, Y+18	; 0x12
 e78:	39 88       	ldd	r3, Y+17	; 0x11
 e7a:	48 88       	ldd	r4, Y+16	; 0x10
 e7c:	5f 84       	ldd	r5, Y+15	; 0x0f
 e7e:	6e 84       	ldd	r6, Y+14	; 0x0e
 e80:	7d 84       	ldd	r7, Y+13	; 0x0d
 e82:	8c 84       	ldd	r8, Y+12	; 0x0c
 e84:	9b 84       	ldd	r9, Y+11	; 0x0b
 e86:	aa 84       	ldd	r10, Y+10	; 0x0a
 e88:	b9 84       	ldd	r11, Y+9	; 0x09
 e8a:	c8 84       	ldd	r12, Y+8	; 0x08
 e8c:	df 80       	ldd	r13, Y+7	; 0x07
 e8e:	ee 80       	ldd	r14, Y+6	; 0x06
 e90:	fd 80       	ldd	r15, Y+5	; 0x05
 e92:	0c 81       	ldd	r16, Y+4	; 0x04
 e94:	1b 81       	ldd	r17, Y+3	; 0x03
 e96:	aa 81       	ldd	r26, Y+2	; 0x02
 e98:	b9 81       	ldd	r27, Y+1	; 0x01
 e9a:	ce 0f       	add	r28, r30
 e9c:	d1 1d       	adc	r29, r1
 e9e:	0f b6       	in	r0, 0x3f	; 63
 ea0:	f8 94       	cli
 ea2:	de bf       	out	0x3e, r29	; 62
 ea4:	0f be       	out	0x3f, r0	; 63
 ea6:	cd bf       	out	0x3d, r28	; 61
 ea8:	ed 01       	movw	r28, r26
 eaa:	08 95       	ret

00000eac <_exit>:
 eac:	f8 94       	cli

00000eae <__stop_program>:
 eae:	ff cf       	rjmp	.-2      	; 0xeae <__stop_program>
