
PruebaSensorAtm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000cf6  00000d8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800112  00800112  00000d9c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eab  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000982  00000000  00000000  00001db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000857  00000000  00000000  00002735  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00002f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000575  00000000  00000000  00003180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000656  00000000  00000000  000036f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003d4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ef       	ldi	r30, 0xF6	; 246
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 32       	cpi	r26, 0x27	; 39
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <main>
  9e:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_SETTING_MASTER>:
	
	address <<= 1;  //Ubica la dirección y
	address |= 0x01; //habilita para reconocer las llamadas generales de I2C
	TWAR = address;
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	9a 01       	movw	r18, r20
  ac:	ab 01       	movw	r20, r22
  ae:	87 b1       	in	r24, 0x07	; 7
  b0:	8f 7c       	andi	r24, 0xCF	; 207
  b2:	87 b9       	out	0x07, r24	; 7
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	74 e2       	ldi	r23, 0x24	; 36
  b8:	84 ef       	ldi	r24, 0xF4	; 244
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 4b 03 	call	0x696	; 0x696 <__udivmodsi4>
  c0:	ca 01       	movw	r24, r20
  c2:	b9 01       	movw	r22, r18
  c4:	60 51       	subi	r22, 0x10	; 16
  c6:	71 09       	sbc	r23, r1
  c8:	81 09       	sbc	r24, r1
  ca:	91 09       	sbc	r25, r1
  cc:	2c 2f       	mov	r18, r28
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	03 2e       	mov	r0, r19
  d6:	00 0c       	add	r0, r0
  d8:	44 0b       	sbc	r20, r20
  da:	55 0b       	sbc	r21, r21
  dc:	0e 94 4b 03 	call	0x696	; 0x696 <__udivmodsi4>
  e0:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  e4:	c4 30       	cpi	r28, 0x04	; 4
  e6:	79 f0       	breq	.+30     	; 0x106 <I2C_SETTING_MASTER+0x60>
  e8:	18 f4       	brcc	.+6      	; 0xf0 <I2C_SETTING_MASTER+0x4a>
  ea:	c1 30       	cpi	r28, 0x01	; 1
  ec:	31 f0       	breq	.+12     	; 0xfa <I2C_SETTING_MASTER+0x54>
  ee:	23 c0       	rjmp	.+70     	; 0x136 <I2C_SETTING_MASTER+0x90>
  f0:	c0 31       	cpi	r28, 0x10	; 16
  f2:	91 f0       	breq	.+36     	; 0x118 <I2C_SETTING_MASTER+0x72>
  f4:	c0 34       	cpi	r28, 0x40	; 64
  f6:	c9 f0       	breq	.+50     	; 0x12a <I2C_SETTING_MASTER+0x84>
  f8:	1e c0       	rjmp	.+60     	; 0x136 <I2C_SETTING_MASTER+0x90>
  fa:	e9 eb       	ldi	r30, 0xB9	; 185
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8c 7f       	andi	r24, 0xFC	; 252
 102:	80 83       	st	Z, r24
 104:	1d c0       	rjmp	.+58     	; 0x140 <I2C_SETTING_MASTER+0x9a>
 106:	e9 eb       	ldi	r30, 0xB9	; 185
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	80 83       	st	Z, r24
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
 116:	14 c0       	rjmp	.+40     	; 0x140 <I2C_SETTING_MASTER+0x9a>
 118:	e9 eb       	ldi	r30, 0xB9	; 185
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	8e 7f       	andi	r24, 0xFE	; 254
 120:	80 83       	st	Z, r24
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	80 83       	st	Z, r24
 128:	0b c0       	rjmp	.+22     	; 0x140 <I2C_SETTING_MASTER+0x9a>
 12a:	e9 eb       	ldi	r30, 0xB9	; 185
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8d 6f       	ori	r24, 0xFD	; 253
 132:	80 83       	st	Z, r24
 134:	05 c0       	rjmp	.+10     	; 0x140 <I2C_SETTING_MASTER+0x9a>
 136:	e9 eb       	ldi	r30, 0xB9	; 185
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8c 7f       	andi	r24, 0xFC	; 252
 13e:	80 83       	st	Z, r24
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <I2C_INIT>:
}


uint8_t I2C_INIT(){
	uint8_t estado;  //Variable que indica que no se consiguió el bus 
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA); //Condición de inicio
 14a:	84 ea       	ldi	r24, 0xA4	; 164
 14c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));  //Espera la bandera TWINT
 150:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 154:	88 23       	and	r24, r24
 156:	e4 f7       	brge	.-8      	; 0x150 <I2C_INIT+0x6>
	estado = TWSR & 0xF8; //Obtiene el estado, 1 condicion de inicio, o 2 inicio repetido
 158:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 15c:	88 7f       	andi	r24, 0xF8	; 248
	
	if (estado == 0x08 || estado == 0x10) 
 15e:	88 30       	cpi	r24, 0x08	; 8
 160:	21 f0       	breq	.+8      	; 0x16a <I2C_INIT+0x20>
 162:	80 31       	cpi	r24, 0x10	; 16
 164:	19 f4       	brne	.+6      	; 0x16c <I2C_INIT+0x22>
	{
		return 1;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	08 95       	ret
 16a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return estado;  
	
}
 16c:	08 95       	ret

0000016e <I2C_WRITE>:
//Regresa: 0x01 envio sin problemas, edo, si el dato no se envio como se esperaba

uint8_t I2C_WRITE(uint8_t dato){
	uint8_t estado;
	
	TWDR = dato;      //Carga el dato   
 16e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);   //Inicia el envio
 172:	84 e8       	ldi	r24, 0x84	; 132
 174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while (!(TWCR & (1 << TWINT))); //espera la bandera TWINT
 178:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17c:	88 23       	and	r24, r24
 17e:	e4 f7       	brge	.-8      	; 0x178 <I2C_WRITE+0xa>
	estado = TWSR & 0xF8; //Obtiene el estado
 180:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 184:	88 7f       	andi	r24, 0xF8	; 248
	
	    //Hay 3 posibilidades de éxito:
	if (estado == 0x18 || estado == 0x28 || estado == 0x40)  //Transmitió una SLA+W CON ACK, transimitió una SLA+R con ACK, Transmitió un dato con ACK
 186:	88 31       	cpi	r24, 0x18	; 24
 188:	31 f0       	breq	.+12     	; 0x196 <I2C_WRITE+0x28>
 18a:	88 32       	cpi	r24, 0x28	; 40
 18c:	31 f0       	breq	.+12     	; 0x19a <I2C_WRITE+0x2c>
 18e:	80 34       	cpi	r24, 0x40	; 64
 190:	29 f4       	brne	.+10     	; 0x19c <I2C_WRITE+0x2e>
	{
		return 0x01;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	08 95       	ret
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	08 95       	ret
 19a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return estado;   //So hay algún error
	
}
 19c:	08 95       	ret

0000019e <I2C_STOP>:

void I2C_STOP(){
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);  //Condición de Paro
 19e:	84 e9       	ldi	r24, 0x94	; 148
 1a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (TWCR & (1 << TWSTO));  //El bit se limpia por HW
 1a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a8:	84 fd       	sbrc	r24, 4
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <I2C_STOP+0x6>
}
 1ac:	08 95       	ret

000001ae <I2C_SLAVE>:

void I2C_SLAVE(uint8_t dato, uint8_t address){
 1ae:	cf 93       	push	r28
 1b0:	c8 2f       	mov	r28, r24
	esclavo = address;  //Dirección del esclavo
	esclavo = esclavo << 1;    //Compone la SLA+W*************************************************************************
 1b2:	66 0f       	add	r22, r22
 1b4:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <esclavo>
	
	
	aux = I2C_INIT();   //Condicion de inicio
 1b8:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_INIT>
 1bc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	if (aux != 0x01)  //Si no se establece la conexión
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <I2C_SLAVE+0x22>
	{
		TWCR |= (1 << TWINT);  //Borrar la bandera
 1c4:	ec eb       	ldi	r30, 0xBC	; 188
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	80 83       	st	Z, r24
		return;   //No continua
 1ce:	10 c0       	rjmp	.+32     	; 0x1f0 <I2C_SLAVE+0x42>
	}
	
	aux = I2C_WRITE(esclavo);     //Direcciona con la SLA+W
 1d0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <esclavo>
 1d4:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_WRITE>
 1d8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	if (aux != 0x01)   //Si hay algun error de comunicación
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	19 f0       	breq	.+6      	; 0x1e6 <I2C_SLAVE+0x38>
	{
		I2C_STOP();  //No continua, termina la comunicación y la cierra
 1e0:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_STOP>
		return;   
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <I2C_SLAVE+0x42>
	}
	
	I2C_WRITE(dato);   //Envia el dato al esclavo
 1e6:	8c 2f       	mov	r24, r28
 1e8:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_WRITE>
	I2C_STOP();  //No continua, termina la comunicación y la cierra
 1ec:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_STOP>
	
	
}
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <I2C_READ>:

// Lee un byte de datos del esclavo I2C
uint8_t I2C_READ(uint8_t address, uint8_t *dato) {
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 1f8:	94 ea       	ldi	r25, 0xA4	; 164
 1fa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 1fe:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 202:	99 23       	and	r25, r25
 204:	e4 f7       	brge	.-8      	; 0x1fe <I2C_READ+0xa>

	// Verificar condición de START
	if ((TWSR & 0xF8) != TW_START) {
 206:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 20a:	98 7f       	andi	r25, 0xF8	; 248
 20c:	98 30       	cpi	r25, 0x08	; 8
 20e:	b1 f5       	brne	.+108    	; 0x27c <I2C_READ+0x88>
		return 1; // Error: No se pudo iniciar la condición de START
	}

	// Enviar dirección del esclavo con bit de lectura
	TWDR = SLA_R(address);
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	81 60       	ori	r24, 0x01	; 1
 218:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 21c:	84 e8       	ldi	r24, 0x84	; 132
 21e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete la transmisión de la dirección
 222:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 226:	88 23       	and	r24, r24
 228:	e4 f7       	brge	.-8      	; 0x222 <I2C_READ+0x2e>
 22a:	eb 01       	movw	r28, r22

	// Verificar ACK/NACK de la dirección
	uint8_t twsr_value = TWSR & 0xF8;
 22c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 230:	88 7f       	andi	r24, 0xF8	; 248
	if (twsr_value == TW_MR_SLA_NACK) {
 232:	88 34       	cpi	r24, 0x48	; 72
 234:	21 f4       	brne	.+8      	; 0x23e <I2C_READ+0x4a>
		I2C_STOP(); // Detener si se recibe un NACK
 236:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_STOP>
		return 1; // Error: NACK recibido
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	20 c0       	rjmp	.+64     	; 0x27e <I2C_READ+0x8a>
		} else if (twsr_value != TW_MR_SLA_ACK) {
 23e:	80 34       	cpi	r24, 0x40	; 64
 240:	21 f0       	breq	.+8      	; 0x24a <I2C_READ+0x56>
		I2C_STOP(); // Detener si otro estado inesperado
 242:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_STOP>
		return 1; // Error: Estado inesperado
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	1a c0       	rjmp	.+52     	; 0x27e <I2C_READ+0x8a>
	}

	// Leer un byte del esclavo
	TWCR = (1 << TWEN) | (1 << TWINT); // Leer sin ACK (NACK)
 24a:	84 e8       	ldi	r24, 0x84	; 132
 24c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete la recepción
 250:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 254:	88 23       	and	r24, r24
 256:	e4 f7       	brge	.-8      	; 0x250 <I2C_READ+0x5c>

	// Verificar estado de recepción
	twsr_value = TWSR & 0xF8;
 258:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 25c:	88 7f       	andi	r24, 0xF8	; 248
	if (twsr_value != TW_MR_DATA_NACK && twsr_value != TW_MR_DATA_ACK) {
 25e:	88 35       	cpi	r24, 0x58	; 88
 260:	31 f0       	breq	.+12     	; 0x26e <I2C_READ+0x7a>
 262:	80 35       	cpi	r24, 0x50	; 80
 264:	21 f0       	breq	.+8      	; 0x26e <I2C_READ+0x7a>
		I2C_STOP(); // Detener si hay error en la recepción
 266:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_STOP>
		return 1; // Error en la recepción
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	08 c0       	rjmp	.+16     	; 0x27e <I2C_READ+0x8a>
	}

	// Leer el dato recibido
	*dato = TWDR;
 26e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 272:	88 83       	st	Y, r24

	// Generar condición de STOP
      I2C_STOP();
 274:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_STOP>
  
	return  *dato; // Éxito
 278:	88 81       	ld	r24, Y
 27a:	01 c0       	rjmp	.+2      	; 0x27e <I2C_READ+0x8a>
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete

	// Verificar condición de START
	if ((TWSR & 0xF8) != TW_START) {
		return 1; // Error: No se pudo iniciar la condición de START
 27c:	81 e0       	ldi	r24, 0x01	; 1

	// Generar condición de STOP
      I2C_STOP();
  
	return  *dato; // Éxito
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <bme280_init>:
int16_t dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

// Función para inicializar el BME280
void bme280_init(void) {
	// Configurar humedad
	I2C_SLAVE(BME280_REG_CTRL_HUM, BME280_ADDRESS);
 284:	66 e7       	ldi	r22, 0x76	; 118
 286:	82 ef       	ldi	r24, 0xF2	; 242
 288:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_SLAVE>
	I2C_SLAVE(0x01, BME280_ADDRESS);
 28c:	66 e7       	ldi	r22, 0x76	; 118
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_SLAVE>

	// Configurar temperatura y presión
	I2C_SLAVE(BME280_REG_CTRL_MEAS, BME280_ADDRESS);
 294:	66 e7       	ldi	r22, 0x76	; 118
 296:	84 ef       	ldi	r24, 0xF4	; 244
 298:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_SLAVE>
	I2C_SLAVE(0x27, BME280_ADDRESS);
 29c:	66 e7       	ldi	r22, 0x76	; 118
 29e:	87 e2       	ldi	r24, 0x27	; 39
 2a0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_SLAVE>

	// Configurar filtro y tiempo de espera
	I2C_SLAVE(BME280_REG_CONFIG, BME280_ADDRESS);
 2a4:	66 e7       	ldi	r22, 0x76	; 118
 2a6:	85 ef       	ldi	r24, 0xF5	; 245
 2a8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_SLAVE>
	I2C_SLAVE(0xA0, BME280_ADDRESS);
 2ac:	66 e7       	ldi	r22, 0x76	; 118
 2ae:	80 ea       	ldi	r24, 0xA0	; 160
 2b0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_SLAVE>
 2b4:	08 95       	ret

000002b6 <bme280_read_calibration>:
}

// Función para leer los registros de calibración de presión
void bme280_read_calibration(void) {
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	62 97       	sbiw	r28, 0x12	; 18
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	f8 94       	cli
 2c6:	de bf       	out	0x3e, r29	; 62
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[18];

	// Leer registros de calibración de presión
	for (uint8_t i = 0; i < 18; i++) {
 2cc:	10 e0       	ldi	r17, 0x00	; 0
 2ce:	0a c0       	rjmp	.+20     	; 0x2e4 <bme280_read_calibration+0x2e>
		I2C_READ(BME280_ADDRESS, &data[i]);
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	6c 0f       	add	r22, r28
 2d6:	7d 1f       	adc	r23, r29
 2d8:	61 0f       	add	r22, r17
 2da:	71 1d       	adc	r23, r1
 2dc:	86 e7       	ldi	r24, 0x76	; 118
 2de:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <I2C_READ>
// Función para leer los registros de calibración de presión
void bme280_read_calibration(void) {
	uint8_t data[18];

	// Leer registros de calibración de presión
	for (uint8_t i = 0; i < 18; i++) {
 2e2:	1f 5f       	subi	r17, 0xFF	; 255
 2e4:	12 31       	cpi	r17, 0x12	; 18
 2e6:	a0 f3       	brcs	.-24     	; 0x2d0 <bme280_read_calibration+0x1a>
		I2C_READ(BME280_ADDRESS, &data[i]);
	}

	dig_P1 = (data[1] << 8) | data[0];
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	98 2f       	mov	r25, r24
 2ee:	88 27       	eor	r24, r24
 2f0:	29 81       	ldd	r18, Y+1	; 0x01
 2f2:	82 2b       	or	r24, r18
 2f4:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <dig_P1+0x1>
 2f8:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <dig_P1>
	dig_P2 = (data[3] << 8) | data[2];
 2fc:	8c 81       	ldd	r24, Y+4	; 0x04
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	98 2f       	mov	r25, r24
 302:	88 27       	eor	r24, r24
 304:	2b 81       	ldd	r18, Y+3	; 0x03
 306:	82 2b       	or	r24, r18
 308:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <dig_P2+0x1>
 30c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <dig_P2>
	dig_P3 = (data[5] << 8) | data[4];
 310:	8e 81       	ldd	r24, Y+6	; 0x06
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	98 2f       	mov	r25, r24
 316:	88 27       	eor	r24, r24
 318:	2d 81       	ldd	r18, Y+5	; 0x05
 31a:	82 2b       	or	r24, r18
 31c:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <dig_P3+0x1>
 320:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <dig_P3>
	dig_P4 = (data[7] << 8) | data[6];
 324:	88 85       	ldd	r24, Y+8	; 0x08
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	98 2f       	mov	r25, r24
 32a:	88 27       	eor	r24, r24
 32c:	2f 81       	ldd	r18, Y+7	; 0x07
 32e:	82 2b       	or	r24, r18
 330:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <dig_P4+0x1>
 334:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <dig_P4>
	dig_P5 = (data[9] << 8) | data[8];
 338:	8a 85       	ldd	r24, Y+10	; 0x0a
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	98 2f       	mov	r25, r24
 33e:	88 27       	eor	r24, r24
 340:	29 85       	ldd	r18, Y+9	; 0x09
 342:	82 2b       	or	r24, r18
 344:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <dig_P5+0x1>
 348:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <dig_P5>
	dig_P6 = (data[11] << 8) | data[10];
 34c:	8c 85       	ldd	r24, Y+12	; 0x0c
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	98 2f       	mov	r25, r24
 352:	88 27       	eor	r24, r24
 354:	2b 85       	ldd	r18, Y+11	; 0x0b
 356:	82 2b       	or	r24, r18
 358:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <dig_P6+0x1>
 35c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <dig_P6>
	dig_P7 = (data[13] << 8) | data[12];
 360:	8e 85       	ldd	r24, Y+14	; 0x0e
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	98 2f       	mov	r25, r24
 366:	88 27       	eor	r24, r24
 368:	2d 85       	ldd	r18, Y+13	; 0x0d
 36a:	82 2b       	or	r24, r18
 36c:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <dig_P7+0x1>
 370:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <dig_P7>
	dig_P8 = (data[15] << 8) | data[14];
 374:	88 89       	ldd	r24, Y+16	; 0x10
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	98 2f       	mov	r25, r24
 37a:	88 27       	eor	r24, r24
 37c:	2f 85       	ldd	r18, Y+15	; 0x0f
 37e:	82 2b       	or	r24, r18
 380:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <dig_P8+0x1>
 384:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <dig_P8>
	dig_P9 = (data[17] << 8) | data[16];
 388:	8a 89       	ldd	r24, Y+18	; 0x12
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	98 2f       	mov	r25, r24
 38e:	88 27       	eor	r24, r24
 390:	29 89       	ldd	r18, Y+17	; 0x11
 392:	82 2b       	or	r24, r18
 394:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <dig_P9+0x1>
 398:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <dig_P9>
}
 39c:	62 96       	adiw	r28, 0x12	; 18
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	f8 94       	cli
 3a2:	de bf       	out	0x3e, r29	; 62
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	cd bf       	out	0x3d, r28	; 61
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	08 95       	ret

000003b0 <bme280_read_pressure>:

// Función para leer la presión
uint32_t bme280_read_pressure(void) {
 3b0:	4f 92       	push	r4
 3b2:	5f 92       	push	r5
 3b4:	6f 92       	push	r6
 3b6:	7f 92       	push	r7
 3b8:	8f 92       	push	r8
 3ba:	9f 92       	push	r9
 3bc:	af 92       	push	r10
 3be:	bf 92       	push	r11
 3c0:	cf 92       	push	r12
 3c2:	df 92       	push	r13
 3c4:	ef 92       	push	r14
 3c6:	ff 92       	push	r15
 3c8:	0f 93       	push	r16
 3ca:	1f 93       	push	r17
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	00 d0       	rcall	.+0      	; 0x3d2 <bme280_read_pressure+0x22>
 3d2:	1f 92       	push	r1
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
	int32_t adc_P, var1, var2;
	uint32_t P;
	uint8_t data[3];

	// Leer datos de presión
	for (uint8_t i = 0; i < 3; i++) {
 3d8:	10 e0       	ldi	r17, 0x00	; 0
 3da:	0a c0       	rjmp	.+20     	; 0x3f0 <bme280_read_pressure+0x40>
		I2C_READ(BME280_ADDRESS, &data[i]);
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	6c 0f       	add	r22, r28
 3e2:	7d 1f       	adc	r23, r29
 3e4:	61 0f       	add	r22, r17
 3e6:	71 1d       	adc	r23, r1
 3e8:	86 e7       	ldi	r24, 0x76	; 118
 3ea:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <I2C_READ>
	int32_t adc_P, var1, var2;
	uint32_t P;
	uint8_t data[3];

	// Leer datos de presión
	for (uint8_t i = 0; i < 3; i++) {
 3ee:	1f 5f       	subi	r17, 0xFF	; 255
 3f0:	13 30       	cpi	r17, 0x03	; 3
 3f2:	a0 f3       	brcs	.-24     	; 0x3dc <bme280_read_pressure+0x2c>
		I2C_READ(BME280_ADDRESS, &data[i]);
	}

	adc_P = ((uint32_t)data[0] << 12) | ((uint32_t)data[1] << 4) | (data[2] >> 4);
 3f4:	c9 80       	ldd	r12, Y+1	; 0x01
 3f6:	d1 2c       	mov	r13, r1
 3f8:	e1 2c       	mov	r14, r1
 3fa:	f1 2c       	mov	r15, r1
 3fc:	b7 01       	movw	r22, r14
 3fe:	a6 01       	movw	r20, r12
 400:	03 2e       	mov	r0, r19
 402:	3c e0       	ldi	r19, 0x0C	; 12
 404:	44 0f       	add	r20, r20
 406:	55 1f       	adc	r21, r21
 408:	66 1f       	adc	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	3a 95       	dec	r19
 40e:	d1 f7       	brne	.-12     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 410:	30 2d       	mov	r19, r0
 412:	8a 81       	ldd	r24, Y+2	; 0x02
 414:	c8 2e       	mov	r12, r24
 416:	d1 2c       	mov	r13, r1
 418:	e1 2c       	mov	r14, r1
 41a:	f1 2c       	mov	r15, r1
 41c:	cc 0c       	add	r12, r12
 41e:	dd 1c       	adc	r13, r13
 420:	ee 1c       	adc	r14, r14
 422:	ff 1c       	adc	r15, r15
 424:	cc 0c       	add	r12, r12
 426:	dd 1c       	adc	r13, r13
 428:	ee 1c       	adc	r14, r14
 42a:	ff 1c       	adc	r15, r15
 42c:	cc 0c       	add	r12, r12
 42e:	dd 1c       	adc	r13, r13
 430:	ee 1c       	adc	r14, r14
 432:	ff 1c       	adc	r15, r15
 434:	cc 0c       	add	r12, r12
 436:	dd 1c       	adc	r13, r13
 438:	ee 1c       	adc	r14, r14
 43a:	ff 1c       	adc	r15, r15
 43c:	c4 2a       	or	r12, r20
 43e:	d5 2a       	or	r13, r21
 440:	e6 2a       	or	r14, r22
 442:	f7 2a       	or	r15, r23
 444:	8b 81       	ldd	r24, Y+3	; 0x03
 446:	82 95       	swap	r24
 448:	8f 70       	andi	r24, 0x0F	; 15
 44a:	c8 2a       	or	r12, r24

	// Calcular la presión en Pa (Pascal)
	var1 = (((int32_t)adc_P >> 3) - ((int32_t)dig_P1 << 1)) * ((int32_t)dig_P2) >> 11;
 44c:	b7 01       	movw	r22, r14
 44e:	a6 01       	movw	r20, r12
 450:	68 94       	set
 452:	12 f8       	bld	r1, 2
 454:	75 95       	asr	r23
 456:	67 95       	ror	r22
 458:	57 95       	ror	r21
 45a:	47 95       	ror	r20
 45c:	16 94       	lsr	r1
 45e:	d1 f7       	brne	.-12     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 460:	40 90 1d 01 	lds	r4, 0x011D	; 0x80011d <dig_P1>
 464:	50 90 1e 01 	lds	r5, 0x011E	; 0x80011e <dig_P1+0x1>
 468:	61 2c       	mov	r6, r1
 46a:	71 2c       	mov	r7, r1
 46c:	d3 01       	movw	r26, r6
 46e:	c2 01       	movw	r24, r4
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	aa 1f       	adc	r26, r26
 476:	bb 1f       	adc	r27, r27
 478:	9a 01       	movw	r18, r20
 47a:	ab 01       	movw	r20, r22
 47c:	28 1b       	sub	r18, r24
 47e:	39 0b       	sbc	r19, r25
 480:	4a 0b       	sbc	r20, r26
 482:	5b 0b       	sbc	r21, r27
 484:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <dig_P2>
 488:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <dig_P2+0x1>
 48c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__mulshisi3>
 490:	4b 01       	movw	r8, r22
 492:	5c 01       	movw	r10, r24
 494:	07 2e       	mov	r0, r23
 496:	7b e0       	ldi	r23, 0x0B	; 11
 498:	b5 94       	asr	r11
 49a:	a7 94       	ror	r10
 49c:	97 94       	ror	r9
 49e:	87 94       	ror	r8
 4a0:	7a 95       	dec	r23
 4a2:	d1 f7       	brne	.-12     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 4a4:	70 2d       	mov	r23, r0
	var2 = (((((int32_t)adc_P >> 4) - ((int32_t)dig_P1)) * ((adc_P >> 4) - ((int32_t)dig_P1))) >> 12) * ((int32_t)dig_P3) >> 14;
 4a6:	d7 01       	movw	r26, r14
 4a8:	c6 01       	movw	r24, r12
 4aa:	68 94       	set
 4ac:	13 f8       	bld	r1, 3
 4ae:	b5 95       	asr	r27
 4b0:	a7 95       	ror	r26
 4b2:	97 95       	ror	r25
 4b4:	87 95       	ror	r24
 4b6:	16 94       	lsr	r1
 4b8:	d1 f7       	brne	.-12     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4ba:	bc 01       	movw	r22, r24
 4bc:	cd 01       	movw	r24, r26
 4be:	64 19       	sub	r22, r4
 4c0:	75 09       	sbc	r23, r5
 4c2:	86 09       	sbc	r24, r6
 4c4:	97 09       	sbc	r25, r7
 4c6:	9b 01       	movw	r18, r22
 4c8:	ac 01       	movw	r20, r24
 4ca:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsi3>
 4ce:	9b 01       	movw	r18, r22
 4d0:	ac 01       	movw	r20, r24
 4d2:	01 2e       	mov	r0, r17
 4d4:	1c e0       	ldi	r17, 0x0C	; 12
 4d6:	55 95       	asr	r21
 4d8:	47 95       	ror	r20
 4da:	37 95       	ror	r19
 4dc:	27 95       	ror	r18
 4de:	1a 95       	dec	r17
 4e0:	d1 f7       	brne	.-12     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4e2:	10 2d       	mov	r17, r0
 4e4:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <dig_P3>
 4e8:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <dig_P3+0x1>
 4ec:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__mulshisi3>
 4f0:	dc 01       	movw	r26, r24
 4f2:	cb 01       	movw	r24, r22
 4f4:	07 2e       	mov	r0, r23
 4f6:	7e e0       	ldi	r23, 0x0E	; 14
 4f8:	b5 95       	asr	r27
 4fa:	a7 95       	ror	r26
 4fc:	97 95       	ror	r25
 4fe:	87 95       	ror	r24
 500:	7a 95       	dec	r23
 502:	d1 f7       	brne	.-12     	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 504:	70 2d       	mov	r23, r0
	P = ((var1 + var2) >> 10) + ((uint32_t)dig_P4 << 4);
 506:	88 0d       	add	r24, r8
 508:	99 1d       	adc	r25, r9
 50a:	aa 1d       	adc	r26, r10
 50c:	bb 1d       	adc	r27, r11
 50e:	ac 01       	movw	r20, r24
 510:	bd 01       	movw	r22, r26
 512:	03 2e       	mov	r0, r19
 514:	3a e0       	ldi	r19, 0x0A	; 10
 516:	75 95       	asr	r23
 518:	67 95       	ror	r22
 51a:	57 95       	ror	r21
 51c:	47 95       	ror	r20
 51e:	3a 95       	dec	r19
 520:	d1 f7       	brne	.-12     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 522:	30 2d       	mov	r19, r0
 524:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <dig_P4>
 528:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <dig_P4+0x1>
 52c:	09 2e       	mov	r0, r25
 52e:	00 0c       	add	r0, r0
 530:	aa 0b       	sbc	r26, r26
 532:	bb 0b       	sbc	r27, r27
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	aa 1f       	adc	r26, r26
 53a:	bb 1f       	adc	r27, r27
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	aa 1f       	adc	r26, r26
 542:	bb 1f       	adc	r27, r27
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	aa 1f       	adc	r26, r26
 54a:	bb 1f       	adc	r27, r27
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	aa 1f       	adc	r26, r26
 552:	bb 1f       	adc	r27, r27
 554:	8a 01       	movw	r16, r20
 556:	9b 01       	movw	r18, r22
 558:	08 0f       	add	r16, r24
 55a:	19 1f       	adc	r17, r25
 55c:	2a 1f       	adc	r18, r26
 55e:	3b 1f       	adc	r19, r27
 560:	c9 01       	movw	r24, r18
 562:	b8 01       	movw	r22, r16

	return P;
}
 564:	0f 90       	pop	r0
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	1f 91       	pop	r17
 570:	0f 91       	pop	r16
 572:	ff 90       	pop	r15
 574:	ef 90       	pop	r14
 576:	df 90       	pop	r13
 578:	cf 90       	pop	r12
 57a:	bf 90       	pop	r11
 57c:	af 90       	pop	r10
 57e:	9f 90       	pop	r9
 580:	8f 90       	pop	r8
 582:	7f 90       	pop	r7
 584:	6f 90       	pop	r6
 586:	5f 90       	pop	r5
 588:	4f 90       	pop	r4
 58a:	08 95       	ret

0000058c <uart_send_pressure>:

// Función para enviar la presión por UART
void uart_send_pressure(uint32_t pressure) {
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	6e 97       	sbiw	r28, 0x1e	; 30
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	de bf       	out	0x3e, r29	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	cd bf       	out	0x3d, r28	; 61
	char buffer[30];
	int length = sprintf(buffer, "Pressure: %lu Pa\n", pressure);
 5a4:	9f 93       	push	r25
 5a6:	8f 93       	push	r24
 5a8:	7f 93       	push	r23
 5aa:	6f 93       	push	r22
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	91 e0       	ldi	r25, 0x01	; 1
 5b0:	9f 93       	push	r25
 5b2:	8f 93       	push	r24
 5b4:	8e 01       	movw	r16, r28
 5b6:	0f 5f       	subi	r16, 0xFF	; 255
 5b8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ba:	1f 93       	push	r17
 5bc:	0f 93       	push	r16
 5be:	0e 94 8f 03 	call	0x71e	; 0x71e <sprintf>
	cadena(buffer); // Enviar cadena a través de UART
 5c2:	c8 01       	movw	r24, r16
 5c4:	0e 94 2a 03 	call	0x654	; 0x654 <cadena>
}
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	f8 94       	cli
 5cc:	de bf       	out	0x3e, r29	; 62
 5ce:	0f be       	out	0x3f, r0	; 63
 5d0:	cd bf       	out	0x3d, r28	; 61
 5d2:	6e 96       	adiw	r28, 0x1e	; 30
 5d4:	0f b6       	in	r0, 0x3f	; 63
 5d6:	f8 94       	cli
 5d8:	de bf       	out	0x3e, r29	; 62
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	cd bf       	out	0x3d, r28	; 61
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	08 95       	ret

000005e8 <main>:

int main(void) {
	// Inicializar UART y I2C
	initUART9600();
 5e8:	0e 94 0f 03 	call	0x61e	; 0x61e <initUART9600>
	I2C_SETTING_MASTER(1, 100000); // Configurar I2C a 100kHz
 5ec:	40 ea       	ldi	r20, 0xA0	; 160
 5ee:	56 e8       	ldi	r21, 0x86	; 134
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_SETTING_MASTER>
	bme280_init();
 5fa:	0e 94 42 01 	call	0x284	; 0x284 <bme280_init>
	bme280_read_calibration();
 5fe:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <bme280_read_calibration>

	while (1) {
		uint32_t pressure = bme280_read_pressure();
 602:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <bme280_read_pressure>
		uart_send_pressure(pressure); // Enviar presión a través de UART
 606:	0e 94 c6 02 	call	0x58c	; 0x58c <uart_send_pressure>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 60a:	2f ef       	ldi	r18, 0xFF	; 255
 60c:	83 ed       	ldi	r24, 0xD3	; 211
 60e:	90 e3       	ldi	r25, 0x30	; 48
 610:	21 50       	subi	r18, 0x01	; 1
 612:	80 40       	sbci	r24, 0x00	; 0
 614:	90 40       	sbci	r25, 0x00	; 0
 616:	e1 f7       	brne	.-8      	; 0x610 <main+0x28>
 618:	00 c0       	rjmp	.+0      	; 0x61a <main+0x32>
 61a:	00 00       	nop
 61c:	f2 cf       	rjmp	.-28     	; 0x602 <main+0x1a>

0000061e <initUART9600>:
}

void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  // hasta que la bandera este en 1
	UDR0 = Caracter;				// Enviar el caracter al arduino
 61e:	8a b1       	in	r24, 0x0a	; 10
 620:	8e 7f       	andi	r24, 0xFE	; 254
 622:	8a b9       	out	0x0a, r24	; 10
 624:	8a b1       	in	r24, 0x0a	; 10
 626:	82 60       	ori	r24, 0x02	; 2
 628:	8a b9       	out	0x0a, r24	; 10
 62a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 62e:	e1 ec       	ldi	r30, 0xC1	; 193
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	10 82       	st	Z, r1
 634:	80 81       	ld	r24, Z
 636:	88 69       	ori	r24, 0x98	; 152
 638:	80 83       	st	Z, r24
 63a:	e2 ec       	ldi	r30, 0xC2	; 194
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	10 82       	st	Z, r1
 640:	80 81       	ld	r24, Z
 642:	86 60       	ori	r24, 0x06	; 6
 644:	80 83       	st	Z, r24
 646:	87 e6       	ldi	r24, 0x67	; 103
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 64e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 652:	08 95       	ret

00000654 <cadena>:
	
}

void cadena (char* texto){
 654:	ac 01       	movw	r20, r24
	uint8_t i;
	// Se realiza un ciclo for para recorrer la cadena
	for(i=0; texto[i]!='\0'; i++){
 656:	20 e0       	ldi	r18, 0x00	; 0
 658:	07 c0       	rjmp	.+14     	; 0x668 <cadena+0x14>
		while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
 65a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 65e:	95 ff       	sbrs	r25, 5
 660:	fc cf       	rjmp	.-8      	; 0x65a <cadena+0x6>
		UDR0 = texto[i];				// Enviando caracter por caracter
 662:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

void cadena (char* texto){
	uint8_t i;
	// Se realiza un ciclo for para recorrer la cadena
	for(i=0; texto[i]!='\0'; i++){
 666:	2f 5f       	subi	r18, 0xFF	; 255
 668:	fa 01       	movw	r30, r20
 66a:	e2 0f       	add	r30, r18
 66c:	f1 1d       	adc	r31, r1
 66e:	30 81       	ld	r19, Z
 670:	31 11       	cpse	r19, r1
 672:	f3 cf       	rjmp	.-26     	; 0x65a <cadena+0x6>
		while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
		UDR0 = texto[i];				// Enviando caracter por caracter
	}
	
}
 674:	08 95       	ret

00000676 <__mulsi3>:
 676:	db 01       	movw	r26, r22
 678:	8f 93       	push	r24
 67a:	9f 93       	push	r25
 67c:	0e 94 6d 03 	call	0x6da	; 0x6da <__muluhisi3>
 680:	bf 91       	pop	r27
 682:	af 91       	pop	r26
 684:	a2 9f       	mul	r26, r18
 686:	80 0d       	add	r24, r0
 688:	91 1d       	adc	r25, r1
 68a:	a3 9f       	mul	r26, r19
 68c:	90 0d       	add	r25, r0
 68e:	b2 9f       	mul	r27, r18
 690:	90 0d       	add	r25, r0
 692:	11 24       	eor	r1, r1
 694:	08 95       	ret

00000696 <__udivmodsi4>:
 696:	a1 e2       	ldi	r26, 0x21	; 33
 698:	1a 2e       	mov	r1, r26
 69a:	aa 1b       	sub	r26, r26
 69c:	bb 1b       	sub	r27, r27
 69e:	fd 01       	movw	r30, r26
 6a0:	0d c0       	rjmp	.+26     	; 0x6bc <__udivmodsi4_ep>

000006a2 <__udivmodsi4_loop>:
 6a2:	aa 1f       	adc	r26, r26
 6a4:	bb 1f       	adc	r27, r27
 6a6:	ee 1f       	adc	r30, r30
 6a8:	ff 1f       	adc	r31, r31
 6aa:	a2 17       	cp	r26, r18
 6ac:	b3 07       	cpc	r27, r19
 6ae:	e4 07       	cpc	r30, r20
 6b0:	f5 07       	cpc	r31, r21
 6b2:	20 f0       	brcs	.+8      	; 0x6bc <__udivmodsi4_ep>
 6b4:	a2 1b       	sub	r26, r18
 6b6:	b3 0b       	sbc	r27, r19
 6b8:	e4 0b       	sbc	r30, r20
 6ba:	f5 0b       	sbc	r31, r21

000006bc <__udivmodsi4_ep>:
 6bc:	66 1f       	adc	r22, r22
 6be:	77 1f       	adc	r23, r23
 6c0:	88 1f       	adc	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	1a 94       	dec	r1
 6c6:	69 f7       	brne	.-38     	; 0x6a2 <__udivmodsi4_loop>
 6c8:	60 95       	com	r22
 6ca:	70 95       	com	r23
 6cc:	80 95       	com	r24
 6ce:	90 95       	com	r25
 6d0:	9b 01       	movw	r18, r22
 6d2:	ac 01       	movw	r20, r24
 6d4:	bd 01       	movw	r22, r26
 6d6:	cf 01       	movw	r24, r30
 6d8:	08 95       	ret

000006da <__muluhisi3>:
 6da:	0e 94 80 03 	call	0x700	; 0x700 <__umulhisi3>
 6de:	a5 9f       	mul	r26, r21
 6e0:	90 0d       	add	r25, r0
 6e2:	b4 9f       	mul	r27, r20
 6e4:	90 0d       	add	r25, r0
 6e6:	a4 9f       	mul	r26, r20
 6e8:	80 0d       	add	r24, r0
 6ea:	91 1d       	adc	r25, r1
 6ec:	11 24       	eor	r1, r1
 6ee:	08 95       	ret

000006f0 <__mulshisi3>:
 6f0:	b7 ff       	sbrs	r27, 7
 6f2:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__muluhisi3>

000006f6 <__mulohisi3>:
 6f6:	0e 94 6d 03 	call	0x6da	; 0x6da <__muluhisi3>
 6fa:	82 1b       	sub	r24, r18
 6fc:	93 0b       	sbc	r25, r19
 6fe:	08 95       	ret

00000700 <__umulhisi3>:
 700:	a2 9f       	mul	r26, r18
 702:	b0 01       	movw	r22, r0
 704:	b3 9f       	mul	r27, r19
 706:	c0 01       	movw	r24, r0
 708:	a3 9f       	mul	r26, r19
 70a:	70 0d       	add	r23, r0
 70c:	81 1d       	adc	r24, r1
 70e:	11 24       	eor	r1, r1
 710:	91 1d       	adc	r25, r1
 712:	b2 9f       	mul	r27, r18
 714:	70 0d       	add	r23, r0
 716:	81 1d       	adc	r24, r1
 718:	11 24       	eor	r1, r1
 71a:	91 1d       	adc	r25, r1
 71c:	08 95       	ret

0000071e <sprintf>:
 71e:	ae e0       	ldi	r26, 0x0E	; 14
 720:	b0 e0       	ldi	r27, 0x00	; 0
 722:	e5 e9       	ldi	r30, 0x95	; 149
 724:	f3 e0       	ldi	r31, 0x03	; 3
 726:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__prologue_saves__+0x1c>
 72a:	0d 89       	ldd	r16, Y+21	; 0x15
 72c:	1e 89       	ldd	r17, Y+22	; 0x16
 72e:	86 e0       	ldi	r24, 0x06	; 6
 730:	8c 83       	std	Y+4, r24	; 0x04
 732:	1a 83       	std	Y+2, r17	; 0x02
 734:	09 83       	std	Y+1, r16	; 0x01
 736:	8f ef       	ldi	r24, 0xFF	; 255
 738:	9f e7       	ldi	r25, 0x7F	; 127
 73a:	9e 83       	std	Y+6, r25	; 0x06
 73c:	8d 83       	std	Y+5, r24	; 0x05
 73e:	ae 01       	movw	r20, r28
 740:	47 5e       	subi	r20, 0xE7	; 231
 742:	5f 4f       	sbci	r21, 0xFF	; 255
 744:	6f 89       	ldd	r22, Y+23	; 0x17
 746:	78 8d       	ldd	r23, Y+24	; 0x18
 748:	ce 01       	movw	r24, r28
 74a:	01 96       	adiw	r24, 0x01	; 1
 74c:	0e 94 b1 03 	call	0x762	; 0x762 <vfprintf>
 750:	ef 81       	ldd	r30, Y+7	; 0x07
 752:	f8 85       	ldd	r31, Y+8	; 0x08
 754:	e0 0f       	add	r30, r16
 756:	f1 1f       	adc	r31, r17
 758:	10 82       	st	Z, r1
 75a:	2e 96       	adiw	r28, 0x0e	; 14
 75c:	e4 e0       	ldi	r30, 0x04	; 4
 75e:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__epilogue_restores__+0x1c>

00000762 <vfprintf>:
 762:	ab e0       	ldi	r26, 0x0B	; 11
 764:	b0 e0       	ldi	r27, 0x00	; 0
 766:	e7 eb       	ldi	r30, 0xB7	; 183
 768:	f3 e0       	ldi	r31, 0x03	; 3
 76a:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__prologue_saves__>
 76e:	6c 01       	movw	r12, r24
 770:	7b 01       	movw	r14, r22
 772:	8a 01       	movw	r16, r20
 774:	fc 01       	movw	r30, r24
 776:	17 82       	std	Z+7, r1	; 0x07
 778:	16 82       	std	Z+6, r1	; 0x06
 77a:	83 81       	ldd	r24, Z+3	; 0x03
 77c:	81 ff       	sbrs	r24, 1
 77e:	cc c1       	rjmp	.+920    	; 0xb18 <__stack+0x219>
 780:	ce 01       	movw	r24, r28
 782:	01 96       	adiw	r24, 0x01	; 1
 784:	3c 01       	movw	r6, r24
 786:	f6 01       	movw	r30, r12
 788:	93 81       	ldd	r25, Z+3	; 0x03
 78a:	f7 01       	movw	r30, r14
 78c:	93 fd       	sbrc	r25, 3
 78e:	85 91       	lpm	r24, Z+
 790:	93 ff       	sbrs	r25, 3
 792:	81 91       	ld	r24, Z+
 794:	7f 01       	movw	r14, r30
 796:	88 23       	and	r24, r24
 798:	09 f4       	brne	.+2      	; 0x79c <vfprintf+0x3a>
 79a:	ba c1       	rjmp	.+884    	; 0xb10 <__stack+0x211>
 79c:	85 32       	cpi	r24, 0x25	; 37
 79e:	39 f4       	brne	.+14     	; 0x7ae <vfprintf+0x4c>
 7a0:	93 fd       	sbrc	r25, 3
 7a2:	85 91       	lpm	r24, Z+
 7a4:	93 ff       	sbrs	r25, 3
 7a6:	81 91       	ld	r24, Z+
 7a8:	7f 01       	movw	r14, r30
 7aa:	85 32       	cpi	r24, 0x25	; 37
 7ac:	29 f4       	brne	.+10     	; 0x7b8 <vfprintf+0x56>
 7ae:	b6 01       	movw	r22, r12
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	0e 94 a8 05 	call	0xb50	; 0xb50 <fputc>
 7b6:	e7 cf       	rjmp	.-50     	; 0x786 <vfprintf+0x24>
 7b8:	91 2c       	mov	r9, r1
 7ba:	21 2c       	mov	r2, r1
 7bc:	31 2c       	mov	r3, r1
 7be:	ff e1       	ldi	r31, 0x1F	; 31
 7c0:	f3 15       	cp	r31, r3
 7c2:	d8 f0       	brcs	.+54     	; 0x7fa <vfprintf+0x98>
 7c4:	8b 32       	cpi	r24, 0x2B	; 43
 7c6:	79 f0       	breq	.+30     	; 0x7e6 <vfprintf+0x84>
 7c8:	38 f4       	brcc	.+14     	; 0x7d8 <vfprintf+0x76>
 7ca:	80 32       	cpi	r24, 0x20	; 32
 7cc:	79 f0       	breq	.+30     	; 0x7ec <vfprintf+0x8a>
 7ce:	83 32       	cpi	r24, 0x23	; 35
 7d0:	a1 f4       	brne	.+40     	; 0x7fa <vfprintf+0x98>
 7d2:	23 2d       	mov	r18, r3
 7d4:	20 61       	ori	r18, 0x10	; 16
 7d6:	1d c0       	rjmp	.+58     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7d8:	8d 32       	cpi	r24, 0x2D	; 45
 7da:	61 f0       	breq	.+24     	; 0x7f4 <vfprintf+0x92>
 7dc:	80 33       	cpi	r24, 0x30	; 48
 7de:	69 f4       	brne	.+26     	; 0x7fa <vfprintf+0x98>
 7e0:	23 2d       	mov	r18, r3
 7e2:	21 60       	ori	r18, 0x01	; 1
 7e4:	16 c0       	rjmp	.+44     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7e6:	83 2d       	mov	r24, r3
 7e8:	82 60       	ori	r24, 0x02	; 2
 7ea:	38 2e       	mov	r3, r24
 7ec:	e3 2d       	mov	r30, r3
 7ee:	e4 60       	ori	r30, 0x04	; 4
 7f0:	3e 2e       	mov	r3, r30
 7f2:	2a c0       	rjmp	.+84     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 7f4:	f3 2d       	mov	r31, r3
 7f6:	f8 60       	ori	r31, 0x08	; 8
 7f8:	1d c0       	rjmp	.+58     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 7fa:	37 fc       	sbrc	r3, 7
 7fc:	2d c0       	rjmp	.+90     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 7fe:	20 ed       	ldi	r18, 0xD0	; 208
 800:	28 0f       	add	r18, r24
 802:	2a 30       	cpi	r18, 0x0A	; 10
 804:	40 f0       	brcs	.+16     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 806:	8e 32       	cpi	r24, 0x2E	; 46
 808:	b9 f4       	brne	.+46     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 80a:	36 fc       	sbrc	r3, 6
 80c:	81 c1       	rjmp	.+770    	; 0xb10 <__stack+0x211>
 80e:	23 2d       	mov	r18, r3
 810:	20 64       	ori	r18, 0x40	; 64
 812:	32 2e       	mov	r3, r18
 814:	19 c0       	rjmp	.+50     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 816:	36 fe       	sbrs	r3, 6
 818:	06 c0       	rjmp	.+12     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 81a:	8a e0       	ldi	r24, 0x0A	; 10
 81c:	98 9e       	mul	r9, r24
 81e:	20 0d       	add	r18, r0
 820:	11 24       	eor	r1, r1
 822:	92 2e       	mov	r9, r18
 824:	11 c0       	rjmp	.+34     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 826:	ea e0       	ldi	r30, 0x0A	; 10
 828:	2e 9e       	mul	r2, r30
 82a:	20 0d       	add	r18, r0
 82c:	11 24       	eor	r1, r1
 82e:	22 2e       	mov	r2, r18
 830:	f3 2d       	mov	r31, r3
 832:	f0 62       	ori	r31, 0x20	; 32
 834:	3f 2e       	mov	r3, r31
 836:	08 c0       	rjmp	.+16     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 838:	8c 36       	cpi	r24, 0x6C	; 108
 83a:	21 f4       	brne	.+8      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 83c:	83 2d       	mov	r24, r3
 83e:	80 68       	ori	r24, 0x80	; 128
 840:	38 2e       	mov	r3, r24
 842:	02 c0       	rjmp	.+4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 844:	88 36       	cpi	r24, 0x68	; 104
 846:	41 f4       	brne	.+16     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 848:	f7 01       	movw	r30, r14
 84a:	93 fd       	sbrc	r25, 3
 84c:	85 91       	lpm	r24, Z+
 84e:	93 ff       	sbrs	r25, 3
 850:	81 91       	ld	r24, Z+
 852:	7f 01       	movw	r14, r30
 854:	81 11       	cpse	r24, r1
 856:	b3 cf       	rjmp	.-154    	; 0x7be <vfprintf+0x5c>
 858:	98 2f       	mov	r25, r24
 85a:	9f 7d       	andi	r25, 0xDF	; 223
 85c:	95 54       	subi	r25, 0x45	; 69
 85e:	93 30       	cpi	r25, 0x03	; 3
 860:	28 f4       	brcc	.+10     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 862:	0c 5f       	subi	r16, 0xFC	; 252
 864:	1f 4f       	sbci	r17, 0xFF	; 255
 866:	9f e3       	ldi	r25, 0x3F	; 63
 868:	99 83       	std	Y+1, r25	; 0x01
 86a:	0d c0       	rjmp	.+26     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 86c:	83 36       	cpi	r24, 0x63	; 99
 86e:	31 f0       	breq	.+12     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 870:	83 37       	cpi	r24, 0x73	; 115
 872:	71 f0       	breq	.+28     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 874:	83 35       	cpi	r24, 0x53	; 83
 876:	09 f0       	breq	.+2      	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 878:	59 c0       	rjmp	.+178    	; 0x92c <__stack+0x2d>
 87a:	21 c0       	rjmp	.+66     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 87c:	f8 01       	movw	r30, r16
 87e:	80 81       	ld	r24, Z
 880:	89 83       	std	Y+1, r24	; 0x01
 882:	0e 5f       	subi	r16, 0xFE	; 254
 884:	1f 4f       	sbci	r17, 0xFF	; 255
 886:	88 24       	eor	r8, r8
 888:	83 94       	inc	r8
 88a:	91 2c       	mov	r9, r1
 88c:	53 01       	movw	r10, r6
 88e:	13 c0       	rjmp	.+38     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 890:	28 01       	movw	r4, r16
 892:	f2 e0       	ldi	r31, 0x02	; 2
 894:	4f 0e       	add	r4, r31
 896:	51 1c       	adc	r5, r1
 898:	f8 01       	movw	r30, r16
 89a:	a0 80       	ld	r10, Z
 89c:	b1 80       	ldd	r11, Z+1	; 0x01
 89e:	36 fe       	sbrs	r3, 6
 8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 8a2:	69 2d       	mov	r22, r9
 8a4:	70 e0       	ldi	r23, 0x00	; 0
 8a6:	02 c0       	rjmp	.+4      	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 8a8:	6f ef       	ldi	r22, 0xFF	; 255
 8aa:	7f ef       	ldi	r23, 0xFF	; 255
 8ac:	c5 01       	movw	r24, r10
 8ae:	0e 94 9d 05 	call	0xb3a	; 0xb3a <strnlen>
 8b2:	4c 01       	movw	r8, r24
 8b4:	82 01       	movw	r16, r4
 8b6:	f3 2d       	mov	r31, r3
 8b8:	ff 77       	andi	r31, 0x7F	; 127
 8ba:	3f 2e       	mov	r3, r31
 8bc:	16 c0       	rjmp	.+44     	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 8be:	28 01       	movw	r4, r16
 8c0:	22 e0       	ldi	r18, 0x02	; 2
 8c2:	42 0e       	add	r4, r18
 8c4:	51 1c       	adc	r5, r1
 8c6:	f8 01       	movw	r30, r16
 8c8:	a0 80       	ld	r10, Z
 8ca:	b1 80       	ldd	r11, Z+1	; 0x01
 8cc:	36 fe       	sbrs	r3, 6
 8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
 8d0:	69 2d       	mov	r22, r9
 8d2:	70 e0       	ldi	r23, 0x00	; 0
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 8d6:	6f ef       	ldi	r22, 0xFF	; 255
 8d8:	7f ef       	ldi	r23, 0xFF	; 255
 8da:	c5 01       	movw	r24, r10
 8dc:	0e 94 92 05 	call	0xb24	; 0xb24 <strnlen_P>
 8e0:	4c 01       	movw	r8, r24
 8e2:	f3 2d       	mov	r31, r3
 8e4:	f0 68       	ori	r31, 0x80	; 128
 8e6:	3f 2e       	mov	r3, r31
 8e8:	82 01       	movw	r16, r4
 8ea:	33 fc       	sbrc	r3, 3
 8ec:	1b c0       	rjmp	.+54     	; 0x924 <__stack+0x25>
 8ee:	82 2d       	mov	r24, r2
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	88 16       	cp	r8, r24
 8f4:	99 06       	cpc	r9, r25
 8f6:	b0 f4       	brcc	.+44     	; 0x924 <__stack+0x25>
 8f8:	b6 01       	movw	r22, r12
 8fa:	80 e2       	ldi	r24, 0x20	; 32
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	0e 94 a8 05 	call	0xb50	; 0xb50 <fputc>
 902:	2a 94       	dec	r2
 904:	f4 cf       	rjmp	.-24     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 906:	f5 01       	movw	r30, r10
 908:	37 fc       	sbrc	r3, 7
 90a:	85 91       	lpm	r24, Z+
 90c:	37 fe       	sbrs	r3, 7
 90e:	81 91       	ld	r24, Z+
 910:	5f 01       	movw	r10, r30
 912:	b6 01       	movw	r22, r12
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	0e 94 a8 05 	call	0xb50	; 0xb50 <fputc>
 91a:	21 10       	cpse	r2, r1
 91c:	2a 94       	dec	r2
 91e:	21 e0       	ldi	r18, 0x01	; 1
 920:	82 1a       	sub	r8, r18
 922:	91 08       	sbc	r9, r1
 924:	81 14       	cp	r8, r1
 926:	91 04       	cpc	r9, r1
 928:	71 f7       	brne	.-36     	; 0x906 <__stack+0x7>
 92a:	e8 c0       	rjmp	.+464    	; 0xafc <__stack+0x1fd>
 92c:	84 36       	cpi	r24, 0x64	; 100
 92e:	11 f0       	breq	.+4      	; 0x934 <__stack+0x35>
 930:	89 36       	cpi	r24, 0x69	; 105
 932:	41 f5       	brne	.+80     	; 0x984 <__stack+0x85>
 934:	f8 01       	movw	r30, r16
 936:	37 fe       	sbrs	r3, 7
 938:	07 c0       	rjmp	.+14     	; 0x948 <__stack+0x49>
 93a:	60 81       	ld	r22, Z
 93c:	71 81       	ldd	r23, Z+1	; 0x01
 93e:	82 81       	ldd	r24, Z+2	; 0x02
 940:	93 81       	ldd	r25, Z+3	; 0x03
 942:	0c 5f       	subi	r16, 0xFC	; 252
 944:	1f 4f       	sbci	r17, 0xFF	; 255
 946:	08 c0       	rjmp	.+16     	; 0x958 <__stack+0x59>
 948:	60 81       	ld	r22, Z
 94a:	71 81       	ldd	r23, Z+1	; 0x01
 94c:	07 2e       	mov	r0, r23
 94e:	00 0c       	add	r0, r0
 950:	88 0b       	sbc	r24, r24
 952:	99 0b       	sbc	r25, r25
 954:	0e 5f       	subi	r16, 0xFE	; 254
 956:	1f 4f       	sbci	r17, 0xFF	; 255
 958:	f3 2d       	mov	r31, r3
 95a:	ff 76       	andi	r31, 0x6F	; 111
 95c:	3f 2e       	mov	r3, r31
 95e:	97 ff       	sbrs	r25, 7
 960:	09 c0       	rjmp	.+18     	; 0x974 <__stack+0x75>
 962:	90 95       	com	r25
 964:	80 95       	com	r24
 966:	70 95       	com	r23
 968:	61 95       	neg	r22
 96a:	7f 4f       	sbci	r23, 0xFF	; 255
 96c:	8f 4f       	sbci	r24, 0xFF	; 255
 96e:	9f 4f       	sbci	r25, 0xFF	; 255
 970:	f0 68       	ori	r31, 0x80	; 128
 972:	3f 2e       	mov	r3, r31
 974:	2a e0       	ldi	r18, 0x0A	; 10
 976:	30 e0       	ldi	r19, 0x00	; 0
 978:	a3 01       	movw	r20, r6
 97a:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__ultoa_invert>
 97e:	88 2e       	mov	r8, r24
 980:	86 18       	sub	r8, r6
 982:	45 c0       	rjmp	.+138    	; 0xa0e <__stack+0x10f>
 984:	85 37       	cpi	r24, 0x75	; 117
 986:	31 f4       	brne	.+12     	; 0x994 <__stack+0x95>
 988:	23 2d       	mov	r18, r3
 98a:	2f 7e       	andi	r18, 0xEF	; 239
 98c:	b2 2e       	mov	r11, r18
 98e:	2a e0       	ldi	r18, 0x0A	; 10
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	25 c0       	rjmp	.+74     	; 0x9de <__stack+0xdf>
 994:	93 2d       	mov	r25, r3
 996:	99 7f       	andi	r25, 0xF9	; 249
 998:	b9 2e       	mov	r11, r25
 99a:	8f 36       	cpi	r24, 0x6F	; 111
 99c:	c1 f0       	breq	.+48     	; 0x9ce <__stack+0xcf>
 99e:	18 f4       	brcc	.+6      	; 0x9a6 <__stack+0xa7>
 9a0:	88 35       	cpi	r24, 0x58	; 88
 9a2:	79 f0       	breq	.+30     	; 0x9c2 <__stack+0xc3>
 9a4:	b5 c0       	rjmp	.+362    	; 0xb10 <__stack+0x211>
 9a6:	80 37       	cpi	r24, 0x70	; 112
 9a8:	19 f0       	breq	.+6      	; 0x9b0 <__stack+0xb1>
 9aa:	88 37       	cpi	r24, 0x78	; 120
 9ac:	21 f0       	breq	.+8      	; 0x9b6 <__stack+0xb7>
 9ae:	b0 c0       	rjmp	.+352    	; 0xb10 <__stack+0x211>
 9b0:	e9 2f       	mov	r30, r25
 9b2:	e0 61       	ori	r30, 0x10	; 16
 9b4:	be 2e       	mov	r11, r30
 9b6:	b4 fe       	sbrs	r11, 4
 9b8:	0d c0       	rjmp	.+26     	; 0x9d4 <__stack+0xd5>
 9ba:	fb 2d       	mov	r31, r11
 9bc:	f4 60       	ori	r31, 0x04	; 4
 9be:	bf 2e       	mov	r11, r31
 9c0:	09 c0       	rjmp	.+18     	; 0x9d4 <__stack+0xd5>
 9c2:	34 fe       	sbrs	r3, 4
 9c4:	0a c0       	rjmp	.+20     	; 0x9da <__stack+0xdb>
 9c6:	29 2f       	mov	r18, r25
 9c8:	26 60       	ori	r18, 0x06	; 6
 9ca:	b2 2e       	mov	r11, r18
 9cc:	06 c0       	rjmp	.+12     	; 0x9da <__stack+0xdb>
 9ce:	28 e0       	ldi	r18, 0x08	; 8
 9d0:	30 e0       	ldi	r19, 0x00	; 0
 9d2:	05 c0       	rjmp	.+10     	; 0x9de <__stack+0xdf>
 9d4:	20 e1       	ldi	r18, 0x10	; 16
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <__stack+0xdf>
 9da:	20 e1       	ldi	r18, 0x10	; 16
 9dc:	32 e0       	ldi	r19, 0x02	; 2
 9de:	f8 01       	movw	r30, r16
 9e0:	b7 fe       	sbrs	r11, 7
 9e2:	07 c0       	rjmp	.+14     	; 0x9f2 <__stack+0xf3>
 9e4:	60 81       	ld	r22, Z
 9e6:	71 81       	ldd	r23, Z+1	; 0x01
 9e8:	82 81       	ldd	r24, Z+2	; 0x02
 9ea:	93 81       	ldd	r25, Z+3	; 0x03
 9ec:	0c 5f       	subi	r16, 0xFC	; 252
 9ee:	1f 4f       	sbci	r17, 0xFF	; 255
 9f0:	06 c0       	rjmp	.+12     	; 0x9fe <__stack+0xff>
 9f2:	60 81       	ld	r22, Z
 9f4:	71 81       	ldd	r23, Z+1	; 0x01
 9f6:	80 e0       	ldi	r24, 0x00	; 0
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	0e 5f       	subi	r16, 0xFE	; 254
 9fc:	1f 4f       	sbci	r17, 0xFF	; 255
 9fe:	a3 01       	movw	r20, r6
 a00:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__ultoa_invert>
 a04:	88 2e       	mov	r8, r24
 a06:	86 18       	sub	r8, r6
 a08:	fb 2d       	mov	r31, r11
 a0a:	ff 77       	andi	r31, 0x7F	; 127
 a0c:	3f 2e       	mov	r3, r31
 a0e:	36 fe       	sbrs	r3, 6
 a10:	0d c0       	rjmp	.+26     	; 0xa2c <__stack+0x12d>
 a12:	23 2d       	mov	r18, r3
 a14:	2e 7f       	andi	r18, 0xFE	; 254
 a16:	a2 2e       	mov	r10, r18
 a18:	89 14       	cp	r8, r9
 a1a:	58 f4       	brcc	.+22     	; 0xa32 <__stack+0x133>
 a1c:	34 fe       	sbrs	r3, 4
 a1e:	0b c0       	rjmp	.+22     	; 0xa36 <__stack+0x137>
 a20:	32 fc       	sbrc	r3, 2
 a22:	09 c0       	rjmp	.+18     	; 0xa36 <__stack+0x137>
 a24:	83 2d       	mov	r24, r3
 a26:	8e 7e       	andi	r24, 0xEE	; 238
 a28:	a8 2e       	mov	r10, r24
 a2a:	05 c0       	rjmp	.+10     	; 0xa36 <__stack+0x137>
 a2c:	b8 2c       	mov	r11, r8
 a2e:	a3 2c       	mov	r10, r3
 a30:	03 c0       	rjmp	.+6      	; 0xa38 <__stack+0x139>
 a32:	b8 2c       	mov	r11, r8
 a34:	01 c0       	rjmp	.+2      	; 0xa38 <__stack+0x139>
 a36:	b9 2c       	mov	r11, r9
 a38:	a4 fe       	sbrs	r10, 4
 a3a:	0f c0       	rjmp	.+30     	; 0xa5a <__stack+0x15b>
 a3c:	fe 01       	movw	r30, r28
 a3e:	e8 0d       	add	r30, r8
 a40:	f1 1d       	adc	r31, r1
 a42:	80 81       	ld	r24, Z
 a44:	80 33       	cpi	r24, 0x30	; 48
 a46:	21 f4       	brne	.+8      	; 0xa50 <__stack+0x151>
 a48:	9a 2d       	mov	r25, r10
 a4a:	99 7e       	andi	r25, 0xE9	; 233
 a4c:	a9 2e       	mov	r10, r25
 a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__stack+0x163>
 a50:	a2 fe       	sbrs	r10, 2
 a52:	06 c0       	rjmp	.+12     	; 0xa60 <__stack+0x161>
 a54:	b3 94       	inc	r11
 a56:	b3 94       	inc	r11
 a58:	04 c0       	rjmp	.+8      	; 0xa62 <__stack+0x163>
 a5a:	8a 2d       	mov	r24, r10
 a5c:	86 78       	andi	r24, 0x86	; 134
 a5e:	09 f0       	breq	.+2      	; 0xa62 <__stack+0x163>
 a60:	b3 94       	inc	r11
 a62:	a3 fc       	sbrc	r10, 3
 a64:	11 c0       	rjmp	.+34     	; 0xa88 <__stack+0x189>
 a66:	a0 fe       	sbrs	r10, 0
 a68:	06 c0       	rjmp	.+12     	; 0xa76 <__stack+0x177>
 a6a:	b2 14       	cp	r11, r2
 a6c:	88 f4       	brcc	.+34     	; 0xa90 <__stack+0x191>
 a6e:	28 0c       	add	r2, r8
 a70:	92 2c       	mov	r9, r2
 a72:	9b 18       	sub	r9, r11
 a74:	0e c0       	rjmp	.+28     	; 0xa92 <__stack+0x193>
 a76:	b2 14       	cp	r11, r2
 a78:	60 f4       	brcc	.+24     	; 0xa92 <__stack+0x193>
 a7a:	b6 01       	movw	r22, r12
 a7c:	80 e2       	ldi	r24, 0x20	; 32
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	0e 94 a8 05 	call	0xb50	; 0xb50 <fputc>
 a84:	b3 94       	inc	r11
 a86:	f7 cf       	rjmp	.-18     	; 0xa76 <__stack+0x177>
 a88:	b2 14       	cp	r11, r2
 a8a:	18 f4       	brcc	.+6      	; 0xa92 <__stack+0x193>
 a8c:	2b 18       	sub	r2, r11
 a8e:	02 c0       	rjmp	.+4      	; 0xa94 <__stack+0x195>
 a90:	98 2c       	mov	r9, r8
 a92:	21 2c       	mov	r2, r1
 a94:	a4 fe       	sbrs	r10, 4
 a96:	10 c0       	rjmp	.+32     	; 0xab8 <__stack+0x1b9>
 a98:	b6 01       	movw	r22, r12
 a9a:	80 e3       	ldi	r24, 0x30	; 48
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	0e 94 a8 05 	call	0xb50	; 0xb50 <fputc>
 aa2:	a2 fe       	sbrs	r10, 2
 aa4:	17 c0       	rjmp	.+46     	; 0xad4 <__stack+0x1d5>
 aa6:	a1 fc       	sbrc	r10, 1
 aa8:	03 c0       	rjmp	.+6      	; 0xab0 <__stack+0x1b1>
 aaa:	88 e7       	ldi	r24, 0x78	; 120
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	02 c0       	rjmp	.+4      	; 0xab4 <__stack+0x1b5>
 ab0:	88 e5       	ldi	r24, 0x58	; 88
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	b6 01       	movw	r22, r12
 ab6:	0c c0       	rjmp	.+24     	; 0xad0 <__stack+0x1d1>
 ab8:	8a 2d       	mov	r24, r10
 aba:	86 78       	andi	r24, 0x86	; 134
 abc:	59 f0       	breq	.+22     	; 0xad4 <__stack+0x1d5>
 abe:	a1 fe       	sbrs	r10, 1
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <__stack+0x1c7>
 ac2:	8b e2       	ldi	r24, 0x2B	; 43
 ac4:	01 c0       	rjmp	.+2      	; 0xac8 <__stack+0x1c9>
 ac6:	80 e2       	ldi	r24, 0x20	; 32
 ac8:	a7 fc       	sbrc	r10, 7
 aca:	8d e2       	ldi	r24, 0x2D	; 45
 acc:	b6 01       	movw	r22, r12
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	0e 94 a8 05 	call	0xb50	; 0xb50 <fputc>
 ad4:	89 14       	cp	r8, r9
 ad6:	38 f4       	brcc	.+14     	; 0xae6 <__stack+0x1e7>
 ad8:	b6 01       	movw	r22, r12
 ada:	80 e3       	ldi	r24, 0x30	; 48
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	0e 94 a8 05 	call	0xb50	; 0xb50 <fputc>
 ae2:	9a 94       	dec	r9
 ae4:	f7 cf       	rjmp	.-18     	; 0xad4 <__stack+0x1d5>
 ae6:	8a 94       	dec	r8
 ae8:	f3 01       	movw	r30, r6
 aea:	e8 0d       	add	r30, r8
 aec:	f1 1d       	adc	r31, r1
 aee:	80 81       	ld	r24, Z
 af0:	b6 01       	movw	r22, r12
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	0e 94 a8 05 	call	0xb50	; 0xb50 <fputc>
 af8:	81 10       	cpse	r8, r1
 afa:	f5 cf       	rjmp	.-22     	; 0xae6 <__stack+0x1e7>
 afc:	22 20       	and	r2, r2
 afe:	09 f4       	brne	.+2      	; 0xb02 <__stack+0x203>
 b00:	42 ce       	rjmp	.-892    	; 0x786 <vfprintf+0x24>
 b02:	b6 01       	movw	r22, r12
 b04:	80 e2       	ldi	r24, 0x20	; 32
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	0e 94 a8 05 	call	0xb50	; 0xb50 <fputc>
 b0c:	2a 94       	dec	r2
 b0e:	f6 cf       	rjmp	.-20     	; 0xafc <__stack+0x1fd>
 b10:	f6 01       	movw	r30, r12
 b12:	86 81       	ldd	r24, Z+6	; 0x06
 b14:	97 81       	ldd	r25, Z+7	; 0x07
 b16:	02 c0       	rjmp	.+4      	; 0xb1c <__stack+0x21d>
 b18:	8f ef       	ldi	r24, 0xFF	; 255
 b1a:	9f ef       	ldi	r25, 0xFF	; 255
 b1c:	2b 96       	adiw	r28, 0x0b	; 11
 b1e:	e2 e1       	ldi	r30, 0x12	; 18
 b20:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__epilogue_restores__>

00000b24 <strnlen_P>:
 b24:	fc 01       	movw	r30, r24
 b26:	05 90       	lpm	r0, Z+
 b28:	61 50       	subi	r22, 0x01	; 1
 b2a:	70 40       	sbci	r23, 0x00	; 0
 b2c:	01 10       	cpse	r0, r1
 b2e:	d8 f7       	brcc	.-10     	; 0xb26 <strnlen_P+0x2>
 b30:	80 95       	com	r24
 b32:	90 95       	com	r25
 b34:	8e 0f       	add	r24, r30
 b36:	9f 1f       	adc	r25, r31
 b38:	08 95       	ret

00000b3a <strnlen>:
 b3a:	fc 01       	movw	r30, r24
 b3c:	61 50       	subi	r22, 0x01	; 1
 b3e:	70 40       	sbci	r23, 0x00	; 0
 b40:	01 90       	ld	r0, Z+
 b42:	01 10       	cpse	r0, r1
 b44:	d8 f7       	brcc	.-10     	; 0xb3c <strnlen+0x2>
 b46:	80 95       	com	r24
 b48:	90 95       	com	r25
 b4a:	8e 0f       	add	r24, r30
 b4c:	9f 1f       	adc	r25, r31
 b4e:	08 95       	ret

00000b50 <fputc>:
 b50:	0f 93       	push	r16
 b52:	1f 93       	push	r17
 b54:	cf 93       	push	r28
 b56:	df 93       	push	r29
 b58:	fb 01       	movw	r30, r22
 b5a:	23 81       	ldd	r18, Z+3	; 0x03
 b5c:	21 fd       	sbrc	r18, 1
 b5e:	03 c0       	rjmp	.+6      	; 0xb66 <fputc+0x16>
 b60:	8f ef       	ldi	r24, 0xFF	; 255
 b62:	9f ef       	ldi	r25, 0xFF	; 255
 b64:	2c c0       	rjmp	.+88     	; 0xbbe <fputc+0x6e>
 b66:	22 ff       	sbrs	r18, 2
 b68:	16 c0       	rjmp	.+44     	; 0xb96 <fputc+0x46>
 b6a:	46 81       	ldd	r20, Z+6	; 0x06
 b6c:	57 81       	ldd	r21, Z+7	; 0x07
 b6e:	24 81       	ldd	r18, Z+4	; 0x04
 b70:	35 81       	ldd	r19, Z+5	; 0x05
 b72:	42 17       	cp	r20, r18
 b74:	53 07       	cpc	r21, r19
 b76:	44 f4       	brge	.+16     	; 0xb88 <fputc+0x38>
 b78:	a0 81       	ld	r26, Z
 b7a:	b1 81       	ldd	r27, Z+1	; 0x01
 b7c:	9d 01       	movw	r18, r26
 b7e:	2f 5f       	subi	r18, 0xFF	; 255
 b80:	3f 4f       	sbci	r19, 0xFF	; 255
 b82:	31 83       	std	Z+1, r19	; 0x01
 b84:	20 83       	st	Z, r18
 b86:	8c 93       	st	X, r24
 b88:	26 81       	ldd	r18, Z+6	; 0x06
 b8a:	37 81       	ldd	r19, Z+7	; 0x07
 b8c:	2f 5f       	subi	r18, 0xFF	; 255
 b8e:	3f 4f       	sbci	r19, 0xFF	; 255
 b90:	37 83       	std	Z+7, r19	; 0x07
 b92:	26 83       	std	Z+6, r18	; 0x06
 b94:	14 c0       	rjmp	.+40     	; 0xbbe <fputc+0x6e>
 b96:	8b 01       	movw	r16, r22
 b98:	ec 01       	movw	r28, r24
 b9a:	fb 01       	movw	r30, r22
 b9c:	00 84       	ldd	r0, Z+8	; 0x08
 b9e:	f1 85       	ldd	r31, Z+9	; 0x09
 ba0:	e0 2d       	mov	r30, r0
 ba2:	09 95       	icall
 ba4:	89 2b       	or	r24, r25
 ba6:	e1 f6       	brne	.-72     	; 0xb60 <fputc+0x10>
 ba8:	d8 01       	movw	r26, r16
 baa:	16 96       	adiw	r26, 0x06	; 6
 bac:	8d 91       	ld	r24, X+
 bae:	9c 91       	ld	r25, X
 bb0:	17 97       	sbiw	r26, 0x07	; 7
 bb2:	01 96       	adiw	r24, 0x01	; 1
 bb4:	17 96       	adiw	r26, 0x07	; 7
 bb6:	9c 93       	st	X, r25
 bb8:	8e 93       	st	-X, r24
 bba:	16 97       	sbiw	r26, 0x06	; 6
 bbc:	ce 01       	movw	r24, r28
 bbe:	df 91       	pop	r29
 bc0:	cf 91       	pop	r28
 bc2:	1f 91       	pop	r17
 bc4:	0f 91       	pop	r16
 bc6:	08 95       	ret

00000bc8 <__ultoa_invert>:
 bc8:	fa 01       	movw	r30, r20
 bca:	aa 27       	eor	r26, r26
 bcc:	28 30       	cpi	r18, 0x08	; 8
 bce:	51 f1       	breq	.+84     	; 0xc24 <__ultoa_invert+0x5c>
 bd0:	20 31       	cpi	r18, 0x10	; 16
 bd2:	81 f1       	breq	.+96     	; 0xc34 <__ultoa_invert+0x6c>
 bd4:	e8 94       	clt
 bd6:	6f 93       	push	r22
 bd8:	6e 7f       	andi	r22, 0xFE	; 254
 bda:	6e 5f       	subi	r22, 0xFE	; 254
 bdc:	7f 4f       	sbci	r23, 0xFF	; 255
 bde:	8f 4f       	sbci	r24, 0xFF	; 255
 be0:	9f 4f       	sbci	r25, 0xFF	; 255
 be2:	af 4f       	sbci	r26, 0xFF	; 255
 be4:	b1 e0       	ldi	r27, 0x01	; 1
 be6:	3e d0       	rcall	.+124    	; 0xc64 <__ultoa_invert+0x9c>
 be8:	b4 e0       	ldi	r27, 0x04	; 4
 bea:	3c d0       	rcall	.+120    	; 0xc64 <__ultoa_invert+0x9c>
 bec:	67 0f       	add	r22, r23
 bee:	78 1f       	adc	r23, r24
 bf0:	89 1f       	adc	r24, r25
 bf2:	9a 1f       	adc	r25, r26
 bf4:	a1 1d       	adc	r26, r1
 bf6:	68 0f       	add	r22, r24
 bf8:	79 1f       	adc	r23, r25
 bfa:	8a 1f       	adc	r24, r26
 bfc:	91 1d       	adc	r25, r1
 bfe:	a1 1d       	adc	r26, r1
 c00:	6a 0f       	add	r22, r26
 c02:	71 1d       	adc	r23, r1
 c04:	81 1d       	adc	r24, r1
 c06:	91 1d       	adc	r25, r1
 c08:	a1 1d       	adc	r26, r1
 c0a:	20 d0       	rcall	.+64     	; 0xc4c <__ultoa_invert+0x84>
 c0c:	09 f4       	brne	.+2      	; 0xc10 <__ultoa_invert+0x48>
 c0e:	68 94       	set
 c10:	3f 91       	pop	r19
 c12:	2a e0       	ldi	r18, 0x0A	; 10
 c14:	26 9f       	mul	r18, r22
 c16:	11 24       	eor	r1, r1
 c18:	30 19       	sub	r19, r0
 c1a:	30 5d       	subi	r19, 0xD0	; 208
 c1c:	31 93       	st	Z+, r19
 c1e:	de f6       	brtc	.-74     	; 0xbd6 <__ultoa_invert+0xe>
 c20:	cf 01       	movw	r24, r30
 c22:	08 95       	ret
 c24:	46 2f       	mov	r20, r22
 c26:	47 70       	andi	r20, 0x07	; 7
 c28:	40 5d       	subi	r20, 0xD0	; 208
 c2a:	41 93       	st	Z+, r20
 c2c:	b3 e0       	ldi	r27, 0x03	; 3
 c2e:	0f d0       	rcall	.+30     	; 0xc4e <__ultoa_invert+0x86>
 c30:	c9 f7       	brne	.-14     	; 0xc24 <__ultoa_invert+0x5c>
 c32:	f6 cf       	rjmp	.-20     	; 0xc20 <__ultoa_invert+0x58>
 c34:	46 2f       	mov	r20, r22
 c36:	4f 70       	andi	r20, 0x0F	; 15
 c38:	40 5d       	subi	r20, 0xD0	; 208
 c3a:	4a 33       	cpi	r20, 0x3A	; 58
 c3c:	18 f0       	brcs	.+6      	; 0xc44 <__ultoa_invert+0x7c>
 c3e:	49 5d       	subi	r20, 0xD9	; 217
 c40:	31 fd       	sbrc	r19, 1
 c42:	40 52       	subi	r20, 0x20	; 32
 c44:	41 93       	st	Z+, r20
 c46:	02 d0       	rcall	.+4      	; 0xc4c <__ultoa_invert+0x84>
 c48:	a9 f7       	brne	.-22     	; 0xc34 <__ultoa_invert+0x6c>
 c4a:	ea cf       	rjmp	.-44     	; 0xc20 <__ultoa_invert+0x58>
 c4c:	b4 e0       	ldi	r27, 0x04	; 4
 c4e:	a6 95       	lsr	r26
 c50:	97 95       	ror	r25
 c52:	87 95       	ror	r24
 c54:	77 95       	ror	r23
 c56:	67 95       	ror	r22
 c58:	ba 95       	dec	r27
 c5a:	c9 f7       	brne	.-14     	; 0xc4e <__ultoa_invert+0x86>
 c5c:	00 97       	sbiw	r24, 0x00	; 0
 c5e:	61 05       	cpc	r22, r1
 c60:	71 05       	cpc	r23, r1
 c62:	08 95       	ret
 c64:	9b 01       	movw	r18, r22
 c66:	ac 01       	movw	r20, r24
 c68:	0a 2e       	mov	r0, r26
 c6a:	06 94       	lsr	r0
 c6c:	57 95       	ror	r21
 c6e:	47 95       	ror	r20
 c70:	37 95       	ror	r19
 c72:	27 95       	ror	r18
 c74:	ba 95       	dec	r27
 c76:	c9 f7       	brne	.-14     	; 0xc6a <__ultoa_invert+0xa2>
 c78:	62 0f       	add	r22, r18
 c7a:	73 1f       	adc	r23, r19
 c7c:	84 1f       	adc	r24, r20
 c7e:	95 1f       	adc	r25, r21
 c80:	a0 1d       	adc	r26, r0
 c82:	08 95       	ret

00000c84 <__prologue_saves__>:
 c84:	2f 92       	push	r2
 c86:	3f 92       	push	r3
 c88:	4f 92       	push	r4
 c8a:	5f 92       	push	r5
 c8c:	6f 92       	push	r6
 c8e:	7f 92       	push	r7
 c90:	8f 92       	push	r8
 c92:	9f 92       	push	r9
 c94:	af 92       	push	r10
 c96:	bf 92       	push	r11
 c98:	cf 92       	push	r12
 c9a:	df 92       	push	r13
 c9c:	ef 92       	push	r14
 c9e:	ff 92       	push	r15
 ca0:	0f 93       	push	r16
 ca2:	1f 93       	push	r17
 ca4:	cf 93       	push	r28
 ca6:	df 93       	push	r29
 ca8:	cd b7       	in	r28, 0x3d	; 61
 caa:	de b7       	in	r29, 0x3e	; 62
 cac:	ca 1b       	sub	r28, r26
 cae:	db 0b       	sbc	r29, r27
 cb0:	0f b6       	in	r0, 0x3f	; 63
 cb2:	f8 94       	cli
 cb4:	de bf       	out	0x3e, r29	; 62
 cb6:	0f be       	out	0x3f, r0	; 63
 cb8:	cd bf       	out	0x3d, r28	; 61
 cba:	09 94       	ijmp

00000cbc <__epilogue_restores__>:
 cbc:	2a 88       	ldd	r2, Y+18	; 0x12
 cbe:	39 88       	ldd	r3, Y+17	; 0x11
 cc0:	48 88       	ldd	r4, Y+16	; 0x10
 cc2:	5f 84       	ldd	r5, Y+15	; 0x0f
 cc4:	6e 84       	ldd	r6, Y+14	; 0x0e
 cc6:	7d 84       	ldd	r7, Y+13	; 0x0d
 cc8:	8c 84       	ldd	r8, Y+12	; 0x0c
 cca:	9b 84       	ldd	r9, Y+11	; 0x0b
 ccc:	aa 84       	ldd	r10, Y+10	; 0x0a
 cce:	b9 84       	ldd	r11, Y+9	; 0x09
 cd0:	c8 84       	ldd	r12, Y+8	; 0x08
 cd2:	df 80       	ldd	r13, Y+7	; 0x07
 cd4:	ee 80       	ldd	r14, Y+6	; 0x06
 cd6:	fd 80       	ldd	r15, Y+5	; 0x05
 cd8:	0c 81       	ldd	r16, Y+4	; 0x04
 cda:	1b 81       	ldd	r17, Y+3	; 0x03
 cdc:	aa 81       	ldd	r26, Y+2	; 0x02
 cde:	b9 81       	ldd	r27, Y+1	; 0x01
 ce0:	ce 0f       	add	r28, r30
 ce2:	d1 1d       	adc	r29, r1
 ce4:	0f b6       	in	r0, 0x3f	; 63
 ce6:	f8 94       	cli
 ce8:	de bf       	out	0x3e, r29	; 62
 cea:	0f be       	out	0x3f, r0	; 63
 cec:	cd bf       	out	0x3d, r28	; 61
 cee:	ed 01       	movw	r28, r26
 cf0:	08 95       	ret

00000cf2 <_exit>:
 cf2:	f8 94       	cli

00000cf4 <__stop_program>:
 cf4:	ff cf       	rjmp	.-2      	; 0xcf4 <__stop_program>
