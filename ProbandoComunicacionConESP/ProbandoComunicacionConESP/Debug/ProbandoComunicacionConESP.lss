
ProbandoComunicacionConESP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089c  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076a  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043e  00000000  00000000  00001286  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  000016c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000111  00000000  00000000  00001bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001cca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
uint8_t BufferRx;


int main(void)
{
    cli();
  90:	f8 94       	cli
	DDRB |= (1<<DDB3);
  92:	84 b1       	in	r24, 0x04	; 4
  94:	88 60       	ori	r24, 0x08	; 8
  96:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<DDB3);
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	88 60       	ori	r24, 0x08	; 8
  9c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
  9e:	15 b8       	out	0x05, r1	; 5
	initUART9600();
  a0:	0e 94 7c 00 	call	0xf8	; 0xf8 <initUART9600>
	sei();
  a4:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	8b e7       	ldi	r24, 0x7B	; 123
  aa:	92 e9       	ldi	r25, 0x92	; 146
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x1c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x26>
  b6:	00 00       	nop
  b8:	f6 cf       	rjmp	.-20     	; 0xa6 <main+0x16>

000000ba <__vector_18>:
    }
}


ISR(USART_RX_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	BufferRx = UDR0;
  ca:	e6 ec       	ldi	r30, 0xC6	; 198
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (UDR0 == '1')
  d4:	80 81       	ld	r24, Z
  d6:	81 33       	cpi	r24, 0x31	; 49
  d8:	21 f4       	brne	.+8      	; 0xe2 <__vector_18+0x28>
	{
		PORTB |= 1<<PORTB3;
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	88 60       	ori	r24, 0x08	; 8
  de:	85 b9       	out	0x05, r24	; 5
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <__vector_18+0x2e>
	}
	else{
		PINB |= 1<<PINB4;
  e2:	83 b1       	in	r24, 0x03	; 3
  e4:	80 61       	ori	r24, 0x10	; 16
  e6:	83 b9       	out	0x03, r24	; 3
	}

  e8:	ff 91       	pop	r31
  ea:	ef 91       	pop	r30
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <initUART9600>:
#include <stdint.h>

void initUART9600(void){
	
	//Paso 1: RX y TX como salida
	DDRD &= ~(1<<DDD0);
  f8:	8a b1       	in	r24, 0x0a	; 10
  fa:	8e 7f       	andi	r24, 0xFE	; 254
  fc:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
  fe:	8a b1       	in	r24, 0x0a	; 10
 100:	82 60       	ori	r24, 0x02	; 2
 102:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2:Configurar UCSR0A
	UCSR0A = 0;
 104:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: configurar UCSR0B donde se habilita ISR de recepcion y se habilita RX y TX
	UCSR0B = 0;
 108:	e1 ec       	ldi	r30, 0xC1	; 193
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
 10e:	80 81       	ld	r24, Z
 110:	88 69       	ori	r24, 0x98	; 152
 112:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, asincrono, paridad: none, 1 bit stop, data bits de 8 bits
	UCSR0C = 0;
 114:	e2 ec       	ldi	r30, 0xC2	; 194
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 11a:	80 81       	ld	r24, Z
 11c:	86 60       	ori	r24, 0x06	; 6
 11e:	80 83       	st	Z, r24
	
	//Paso 5: COnfigurar velocidad de baudrate a 9600
	UBRR0 = 103;
 120:	87 e6       	ldi	r24, 0x67	; 103
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 128:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 12c:	08 95       	ret

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
